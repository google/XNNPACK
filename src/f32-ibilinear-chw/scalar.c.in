// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert PIXEL_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <xnnpack/ibilinear.h>


void xnn_f32_ibilinear_chw_ukernel__scalar_p${PIXEL_TILE}(
    size_t output_pixels,
    const float**restrict input,
    size_t input_offset,
    const float*restrict horizontal_weights,
    const float*restrict vertical_weights,
    float* output)
{
  assert(output_pixels != 0);

  const float** i = input;
  const float* wh = horizontal_weights;
  const float* wv = vertical_weights;

  size_t p = output_pixels;
  $if PIXEL_TILE > 1:
    for (; p >= ${PIXEL_TILE}; p -= ${PIXEL_TILE}) {
      $for P in range(PIXEL_TILE * 4):
        const float* i${P} = (const float*) ((uintptr_t) i[${P}] + input_offset);
      i += ${PIXEL_TILE} * 4;

      $for P in range(PIXEL_TILE):
         const float valphah${ABC[P]} = wh[${P}];
         const float valphav${ABC[P]} = wv[${P}];
      wh += ${PIXEL_TILE};
      wv += ${PIXEL_TILE};

      $for P in range(PIXEL_TILE):
        const float vtl${ABC[P]} = *i${P * 4};
        const float vtr${ABC[P]} = *i${P * 4 + 1};
        const float vbl${ABC[P]} = *i${P * 4 + 2};
        const float vbr${ABC[P]} = *i${P * 4 + 3};

      $for P in range(PIXEL_TILE):
        const float vtd${ABC[P]} = vtr${ABC[P]} - vtl${ABC[P]};
        const float vbd${ABC[P]} = vbr${ABC[P]} - vbl${ABC[P]};

      $for P in range(PIXEL_TILE):
        const float vt${ABC[P]} = vtl${ABC[P]} + vtd${ABC[P]} * valphah${ABC[P]};
        const float vb${ABC[P]} = vbl${ABC[P]} + vbd${ABC[P]} * valphah${ABC[P]};

      $for P in range(PIXEL_TILE):
        const float vd${ABC[P]} = vb${ABC[P]} - vt${ABC[P]};

      $for P in range(PIXEL_TILE):
        const float vo${ABC[P]} = vt${ABC[P]} + vd${ABC[P]} * valphav${ABC[P]};

      $for P in range(PIXEL_TILE):
        output[${P}] = vo${ABC[P]};
      output += ${PIXEL_TILE};
    }

    for (; p >= 1; p -= 1) {
      const float* i0 = (const float*) ((uintptr_t) i[0] + input_offset);
      const float* i1 = (const float*) ((uintptr_t) i[1] + input_offset);
      const float* i2 = (const float*) ((uintptr_t) i[2] + input_offset);
      const float* i3 = (const float*) ((uintptr_t) i[3] + input_offset);
      i += 4;

      const float valphah = *wh++;
      const float valphav = *wv++;

      const float vtl = *i0;
      const float vtr = *i1;
      const float vbl = *i2;
      const float vbr = *i3;

      const float vtd = vtr - vtl;
      const float vbd = vbr - vbl;

      const float vt = vtl + vtd * valphah;
      const float vb = vbl + vbd * valphah;

      const float vd = vb - vt;

      const float vo = vt + vd * valphav;

      *output++ = vo;
    }
  $else:
    do {
      const float* i0 = (const float*) ((uintptr_t) i[0] + input_offset);
      const float* i1 = (const float*) ((uintptr_t) i[1] + input_offset);
      const float* i2 = (const float*) ((uintptr_t) i[2] + input_offset);
      const float* i3 = (const float*) ((uintptr_t) i[3] + input_offset);
      i += 4;

      const float valphah = *wh++;
      const float valphav = *wv++;

      const float vtl = *i0;
      const float vtr = *i1;
      const float vbl = *i2;
      const float vbr = *i3;

      const float vtd = vtr - vtl;
      const float vbd = vbr - vbl;

      const float vt = vtl + vtd * valphah;
      const float vb = vbl + vbd * valphah;

      const float vd = vb - vt;

      const float vo = vt + vd * valphav;

      *output++ = vo;
    } while (--p != 0);
}
