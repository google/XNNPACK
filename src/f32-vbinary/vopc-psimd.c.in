// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ADD", "DIV", "RDIV", "MAX", "MIN", "MUL", "SUB", "RSUB"]
#include <assert.h>

#include <psimd.h>

#include <xnnpack/common.h>
#include <xnnpack/vbinary.h>


$PSIMD_OP_F32 = {
$  "ADD": lambda x: "psimd_add_f32(%s, vb)" % x,
$  "DIV": lambda x: "psimd_div_f32(%s, vb)" % x,
$  "RDIV": lambda x: "psimd_div_f32(vb, %s)" % x,
$  "MAX": lambda x: "psimd_max_f32(%s, vb)" % x,
$  "MIN": lambda x: "psimd_min_f32(%s, vb)" % x,
$  "MUL": lambda x: "psimd_mul_f32(%s, vb)" % x,
$  "SUB": lambda x: "psimd_sub_f32(%s, vb)" % x,
$  "RSUB": lambda x: "psimd_sub_f32(vb, %s)" % x,
$}[OP]
void xnn_f32_v${OP.lower()}c_ukernel__psimd_x${BATCH_TILE}(
    size_t n,
    const float* a,
    const float* b,
    float* y,
    const union xnn_f32_output_params params[restrict static 1])
{
  assert(n != 0);
  assert(n % sizeof(float) == 0);

  const psimd_f32 vy_min = psimd_load_splat_f32(&params->scalar.min);
  const psimd_f32 vy_max = psimd_load_splat_f32(&params->scalar.max);

  const psimd_f32 vb = psimd_load_splat_f32(b);
  for (; n >= ${BATCH_TILE} * sizeof(float); n -= ${BATCH_TILE} * sizeof(float)) {
    const psimd_f32 va${ABC[0:4]} = psimd_load_f32(a);
    $for N in range(4, BATCH_TILE, 4):
      const psimd_f32 va${ABC[N:N+4]} = psimd_load_f32(a + ${N});
    a += ${BATCH_TILE};

    $for N in range(0, BATCH_TILE, 4):
      psimd_f32 vy${ABC[N:N+4]} = ${PSIMD_OP_F32("va" + ABC[N:N+4])};

    $for N in range(0, BATCH_TILE, 4):
      vy${ABC[N:N+4]} = psimd_max_f32(vy${ABC[N:N+4]}, vy_min);

    $for N in range(0, BATCH_TILE, 4):
      vy${ABC[N:N+4]} = psimd_min_f32(vy${ABC[N:N+4]}, vy_max);

    psimd_store_f32(y, vy${ABC[0:4]});
    $for N in range(4, BATCH_TILE, 4):
      psimd_store_f32(y + ${N}, vy${ABC[N:N+4]});
    y += ${BATCH_TILE};
  }
  $if BATCH_TILE >= 4:
    for (; n >= 4 * sizeof(float); n -= 4 * sizeof(float)) {
      const psimd_f32 va0123 = psimd_load_f32(a);
      a += 4;

      psimd_f32 vy0123 = ${PSIMD_OP_F32("va0123")};
      vy0123 = psimd_max_f32(vy0123, vy_min);
      vy0123 = psimd_min_f32(vy0123, vy_max);
      psimd_store_f32(y, vy0123);
      y += 4;
    }
  if XNN_UNLIKELY(n != 0) {
    const psimd_f32 va0123 = psimd_load_f32(a);

    psimd_f32 vy0123 = ${PSIMD_OP_F32("va0123")};
    vy0123 = psimd_max_f32(vy0123, vy_min);
    vy0123 = psimd_min_f32(vy0123, vy_max);
    if (n & (2 * sizeof(float))) {
      psimd_store2_f32(y, vy0123);
      vy0123 = psimd_concat_hi_f32(vy0123, vy0123);
      y += 2;
    }
    if (n & (1 * sizeof(float))) {
      psimd_store1_f32(y, vy0123);
    }
  }
}
