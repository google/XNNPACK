// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 16 == 0
$assert BATCH_TILE >= 16
$SIMD_TILE = BATCH_TILE // 16
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ADD", "DIV", "RDIV", "MAX", "MIN", "MUL", "SUB", "RSUB", "SQRDIFF"]
$assert ACTIVATION in ["LINEAR", "MINMAX"]
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/vbinary.h>


$_MM512_OP_PS = {
$  "ADD": lambda x: "_mm512_add_ps(%s, vb)" % x,
$  "DIV": lambda x: "_mm512_div_ps(%s, vb)" % x,
$  "RDIV": lambda x: "_mm512_div_ps(vb, %s)" % x,
$  "MAX": lambda x: "_mm512_max_ps(%s, vb)" % x,
$  "MIN": lambda x: "_mm512_min_ps(%s, vb)" % x,
$  "MUL": lambda x: "_mm512_mul_ps(%s, vb)" % x,
$  "SUB": lambda x: "_mm512_sub_ps(%s, vb)" % x,
$  "RSUB": lambda x: "_mm512_sub_ps(vb, %s)" % x,
$  "SQRDIFF": lambda x: "_mm512_sub_ps(%s, vb)" % x,
$}[OP]
$_MM512_MASKZ_OP_PS = {
$  "ADD": lambda m, x: "_mm512_maskz_add_ps(%s, %s, vb)" % (m, x),
$  "DIV": lambda m, x: "_mm512_maskz_div_ps(%s, %s, vb)" % (m, x),
$  "RDIV": lambda m, x: "_mm512_maskz_div_ps(%s, vb, %s)" % (m, x),
$  "MAX": lambda m, x: "_mm512_maskz_max_ps(%s, %s, vb)" % (m, x),
$  "MIN": lambda m, x: "_mm512_maskz_min_ps(%s, %s, vb)" % (m, x),
$  "MUL": lambda m, x: "_mm512_maskz_mul_ps(%s, %s, vb)" % (m, x),
$  "SUB": lambda m, x: "_mm512_maskz_sub_ps(%s, %s, vb)" % (m, x),
$  "RSUB": lambda m, x: "_mm512_maskz_sub_ps(%s, vb, %s)" % (m, x),
$  "SQRDIFF": lambda m, x: "_mm512_maskz_sub_ps(%s, %s, vb)" % (m, x),
$}[OP]
$SUFFIX = {"LINEAR": "", "MINMAX": "_minmax"}[ACTIVATION]
$PARAMS = {"LINEAR": "xnn_f32_default_params", "MINMAX": "xnn_f32_minmax_params"}[ACTIVATION]
void xnn_f32_v${OP.lower()}c${SUFFIX}_ukernel__avx512f_u${BATCH_TILE}(
    size_t batch,
    const float* input_a,
    const float* input_b,
    float* output,
    const union ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input_a != NULL);
  assert(input_b != NULL);
  assert(output != NULL);

  $if ACTIVATION == "MINMAX":
    const __m512 voutput_min = _mm512_set1_ps(params->scalar.min);
    const __m512 voutput_max = _mm512_set1_ps(params->scalar.max);
  const __m512 vb = _mm512_set1_ps(*input_b);

  for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
    __m512 vacc${ABC[0]} = _mm512_loadu_ps(input_a);
    $for N in range(1, SIMD_TILE):
      __m512 vacc${ABC[N]} = _mm512_loadu_ps(input_a + ${N * 16});
    input_a += ${BATCH_TILE};

    $for N in range(SIMD_TILE):
      vacc${ABC[N]} = ${_MM512_OP_PS("vacc" + ABC[N])};

    $if OP == "SQRDIFF":
      $for N in range(SIMD_TILE):
        vacc${ABC[N]} = _mm512_mul_ps(vacc${ABC[N]}, vacc${ABC[N]});

    $if ACTIVATION == "MINMAX":
      $for N in range(SIMD_TILE):
        vacc${ABC[N]} = _mm512_max_ps(voutput_min, vacc${ABC[N]});

      $for N in range(SIMD_TILE):
        vacc${ABC[N]} = _mm512_min_ps(voutput_max, vacc${ABC[N]});

    _mm512_storeu_ps(output, vacc${ABC[0]});
    $for N in range(1, SIMD_TILE):
      _mm512_storeu_ps(output + ${N * 16}, vacc${ABC[N]});
    output += ${BATCH_TILE};
  }
  $if BATCH_TILE > 16:
    for (; batch >= 16 * sizeof(float); batch -= 16 * sizeof(float)) {
      __m512 vacc = _mm512_loadu_ps(input_a);
      input_a += 16;

      vacc = ${_MM512_OP_PS("vacc")};
      $if OP == "SQRDIFF":
        vacc = _mm512_mul_ps(vacc, vacc);
      $if ACTIVATION == "MINMAX":
        vacc = _mm512_max_ps(voutput_min, vacc);
        vacc = _mm512_min_ps(voutput_max, vacc);

      _mm512_storeu_ps(output, vacc);
      output += 16;
    }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(float));
    assert(batch <= 15 * sizeof(float));
    // Prepare mask for valid 32-bit elements (depends on batch).
    batch >>= XNN_LOG2_SIZEOF_FLOAT;
    const __mmask16 vmask = _cvtu32_mask16((uint32_t) ((UINT32_C(1) << batch) - UINT32_C(1)));

    __m512 vacc = _mm512_maskz_loadu_ps(vmask, input_a);
    vacc = ${_MM512_MASKZ_OP_PS("vmask", "vacc")};
    $if OP == "SQRDIFF":
      vacc = _mm512_maskz_mul_ps(vmask, vacc, vacc);
    $if ACTIVATION == "MINMAX":
      vacc = _mm512_maskz_max_ps(vmask, voutput_min, vacc);
      vacc = _mm512_maskz_min_ps(vmask, voutput_max, vacc);
    _mm512_mask_storeu_ps(output, vmask, vacc);
  }
}
