// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE in ["F32", "QC8"]
$assert NR == 2
$assert MR % 2 == 0
$assert ACTIVATION in ["LINEAR", "RELU", "MINMAX"]
$assert ACTIVATION != "MINMAX" or ARCH in ["ARM", "X86", "RELAXED"]
$assert not FMA or ARCH == "RELAXED"
#include <assert.h>

#include <wasm_simd128.h>

#include "xnnpack/gemm.h"


$RANGE_MRX2 = list(range(0, MR, 2))
$DATATYPE_SPEC = {"F32": "f32", "QC8": "f32_qc8w"}[DATATYPE]
$if ACTIVATION == "MINMAX":
$  WASM_F32X4_MIN={"ARM": "wasm_f32x4_min", "X86": "wasm_f32x4_pmin", "RELAXED": "wasm_f32x4_relaxed_min"}[ARCH]
$  WASM_F32X4_MAX={"ARM": "wasm_f32x4_max", "X86": "wasm_f32x4_pmax", "RELAXED": "wasm_f32x4_relaxed_max"}[ARCH]
$ACTIVATION_SUFFIX = {"LINEAR": ""}.get(ACTIVATION, "_" + ACTIVATION.lower())
$ISA = "wasmsimd" if not FMA and (ACTIVATION in ["LINEAR", "RELU"] or ARCH != "RELAXED") else "wasmrelaxedsimd"
$ARCH_SUFFIX = "" if not FMA and (ACTIVATION in ["LINEAR", "RELU"] or ARCH == "RELAXED") else "_" + ("fma" if FMA else ARCH.lower())
$PARAMS = {"LINEAR": "struct xnn_f32_default_params", "RELU": "struct xnn_f32_relu_params", "MINMAX": "union xnn_f32_minmax_params"}[ACTIVATION]
void xnn_${DATATYPE_SPEC}_gemm${ACTIVATION_SUFFIX}_ukernel_${MR}x${NR}c4__${ISA}${ARCH_SUFFIX}(
    size_t mr,
    size_t nc,
    size_t kc,
    const float* restrict a,
    size_t a_stride,
    $if DATATYPE == "F32":
      const float* restrict w,
    $else:
      const void* restrict w,
    float* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    const ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(float) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  const float* a0 = a;
  float* c0 = c;
  $for M in range(1, MR):
    const float* a${M} = (const float*) ((uintptr_t) a${M-1} + a_stride);
    float* c${M} = (float*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  $if ACTIVATION == "MINMAX":
    const v128_t vmin = wasm_v128_load32_splat(&params->scalar.min);
    const v128_t vmax = wasm_v128_load32_splat(&params->scalar.max);
    XNN_FORCE_REALIZATION(vmin);
    XNN_FORCE_REALIZATION(vmax);
  do {
    v128_t vacc0x0c4 = wasm_v128_load32_zero(w);
    $for N in range(1, NR):
      $if DATATYPE == "F32":
        v128_t vacc0x${N}c4 = wasm_v128_load32_zero(w + ${N});
      $else:
        v128_t vacc0x${N}c4 = wasm_v128_load32_zero((const float*) w + ${N});
    $for M in range(1, MR):
      $for N in range(NR):
        v128_t vacc${M}x${N}c4 = vacc0x${N}c4;
    $if DATATYPE == "F32":
      w += ${NR};
    $else:
      w = (const float*) w + ${NR};

    size_t k = kc;
    for (; k >= 4 * sizeof(float); k -= 4 * sizeof(float)) {
      $for M in range(MR):
        const v128_t va${M} = wasm_v128_load(a${M});
        a${M} += 4;

      $if DATATYPE == "F32":
        const v128_t vb0 = wasm_v128_load(w);
        $for N in range(1, NR):
          const v128_t vb${N} = wasm_v128_load(w + ${N * 4});
        w += ${NR * 4};
      $else:
        $for N in range(0, NR, 2):
          const v128_t vb${N}${N+1} = wasm_i16x8_load8x8((const int8_t*) w + ${N * 2});
          const v128_t vbi${N} = wasm_i32x4_extend_low_i16x8(vb${N}${N+1});
          const v128_t vbi${N+1} = wasm_i32x4_extend_high_i16x8(vb${N}${N+1});
        $for N in range(NR):
          const v128_t vb${N} = wasm_f32x4_convert_i32x4(vbi${N});
        w = (const int8_t*) w + ${NR * 4};

      $for M in range(MR):
        $for N in range(NR):
          $if FMA:
            vacc${M}x${N}c4 = wasm_f32x4_relaxed_madd(va${M}, vb${N}, vacc${M}x${N}c4);
          $else:
            vacc${M}x${N}c4 = wasm_f32x4_add(wasm_f32x4_mul(va${M}, vb${N}), vacc${M}x${N}c4);
    }
    if XNN_UNLIKELY(k != 0) {
      $for M in range(MR):
        const v128_t va${M} = wasm_v128_load(a${M});
        a${M} = (const float*) ((uintptr_t) a${M} + k);

      $if DATATYPE == "F32":
        const v128_t vb0 = wasm_v128_load(w);
        $for N in range(1, NR):
          const v128_t vb${N} = wasm_v128_load(w + ${N * 4});
        w += ${NR * 4};
      $else:
        $for N in range(0, NR, 2):
          const v128_t vb${N}${N+1} = wasm_i16x8_load8x8((const int8_t*) w + ${N * 2});
          const v128_t vbi${N} = wasm_i32x4_extend_low_i16x8(vb${N}${N+1});
          const v128_t vbi${N+1} = wasm_i32x4_extend_high_i16x8(vb${N}${N+1});
        $for N in range(NR):
          const v128_t vb${N} = wasm_f32x4_convert_i32x4(vbi${N});
        w = (const int8_t*) w + ${NR * 4};

      const v128_t vzero = wasm_f32x4_const_splat(0.0f);
      $for N in range(NR):
        const v128_t vmask${N} = wasm_f32x4_eq(vb${N}, vzero);

      $for M in range(MR):
        $for N in range(NR):
          $if FMA:
            vacc${M}x${N}c4 = wasm_f32x4_relaxed_madd(wasm_v128_andnot(va${M}, vmask${N}), vb${N}, vacc${M}x${N}c4);
          $else:
            vacc${M}x${N}c4 = wasm_f32x4_add(wasm_f32x4_mul(wasm_v128_andnot(va${M}, vmask${N}), vb${N}), vacc${M}x${N}c4);
    }

    $for M in range(MR):
      const v128_t vacc${M}x01c2 = wasm_f32x4_add(
        wasm_v32x4_shuffle(vacc${M}x0c4, vacc${M}x1c4, 0, 4, 1, 5),
        wasm_v32x4_shuffle(vacc${M}x0c4, vacc${M}x1c4, 2, 6, 3, 7));

    $for M in range(0, MR, 2):
      v128_t vacc${M}${M+1}x01 = wasm_f32x4_add(
        wasm_v32x4_shuffle(vacc${M}x01c2, vacc${M+1}x01c2, 0, 1, 4, 5),
        wasm_v32x4_shuffle(vacc${M}x01c2, vacc${M+1}x01c2, 2, 3, 6, 7));

    $if DATATYPE == "QC8":
      const v128_t vscalex01 = wasm_v128_load64_splat(w);
      w = (const float*) w + 2;
      $for M in range(0, MR, 2):
        vacc${M}${M+1}x01 = wasm_f32x4_mul(vacc${M}${M+1}x01, vscalex01);
    $if ACTIVATION == "MINMAX":
      $for M in range(0, MR, 2):
        vacc${M}${M+1}x01 = ${WASM_F32X4_MAX}(vmin, vacc${M}${M+1}x01);

      $for M in range(0, MR, 2):
        vacc${M}${M+1}x01 = ${WASM_F32X4_MIN}(vmax, vacc${M}${M+1}x01);
    $elif ACTIVATION == "RELU":
      const v128_t vzero = wasm_i32x4_const_splat(0);
      $for M in range(0, MR, 2):
        vacc${M}${M+1}x01 = wasm_i32x4_max(vacc${M}${M+1}x01, vzero);

    if XNN_LIKELY(nc >= ${NR}) {
      $for M in RANGE_MRX2:
        wasm_v128_store64_lane(c${M}, vacc${M}${M+1}x01, 0);
        c${M} = (float*) ((uintptr_t) c${M} + cn_stride);
        a${M} = (const float*) ((uintptr_t) a${M} - kc);
        wasm_v128_store64_lane(c${M+1}, vacc${M}${M+1}x01, 1);
        c${M+1} = (float*) ((uintptr_t) c${M+1} + cn_stride);
        a${M+1} = (const float*) ((uintptr_t) a${M+1} - kc);

      nc -= ${NR};
    } else {
      assert(nc == 1);
      $for M in RANGE_MRX2:
        wasm_v128_store32_lane(c${M}, vacc${M}${M+1}x01, 0);
        wasm_v128_store32_lane(c${M+1}, vacc${M}${M+1}x01, 2);

      nc = 0;
    }
  } while (nc != 0);
}
