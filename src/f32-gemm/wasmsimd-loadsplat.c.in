// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE in ["F32", "QC8"]
$assert NR % 4 == 0
$if DATATYPE == "QC8":
  $assert NR % 8 == 0
$assert ACTIVATION in ["LINEAR", "RELU", "MINMAX"]
$assert ACTIVATION != "MINMAX" or ARCH in ["ARM", "X86", "RELAXED"]
$assert not FMA or ARCH == "RELAXED"
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <wasm_simd128.h>

#include "xnnpack/gemm.h"


$RANGE_MR = list(reversed(range(MR))) if INC else list(range(MR))
$DATATYPE_SPEC = {"F32": "f32", "QC8": "f32_qc8w"}[DATATYPE]
$if ACTIVATION == "MINMAX":
$  WASM_F32X4_MIN={"ARM": "wasm_f32x4_min", "X86": "wasm_f32x4_pmin", "RELAXED": "wasm_f32x4_relaxed_min"}[ARCH]
$  WASM_F32X4_MAX={"ARM": "wasm_f32x4_max", "X86": "wasm_f32x4_pmax", "RELAXED": "wasm_f32x4_relaxed_max"}[ARCH]
$ACTIVATION_SUFFIX = {"LINEAR": ""}.get(ACTIVATION, "_" + ACTIVATION.lower())
$ISA = "wasmsimd" if not FMA and (ACTIVATION in ["LINEAR", "RELU"] or ARCH != "RELAXED") else "wasmrelaxedsimd"
$ARCH_SUFFIX = "" if not FMA and (ACTIVATION in ["LINEAR", "RELU"] or ARCH == "RELAXED") else "_" + ("fma" if FMA else ARCH.lower())
$PARAMS = {"LINEAR": "struct xnn_f32_default_params", "RELU": "struct xnn_f32_relu_params", "MINMAX": "union xnn_f32_minmax_params"}[ACTIVATION]
void xnn_${DATATYPE_SPEC}_gemm${"inc" if INC else ""}${ACTIVATION_SUFFIX}_ukernel_${MR}x${NR}__${ISA}${ARCH_SUFFIX}_loadsplat(
    size_t mr,
    size_t nc,
    size_t kc,
    const float* restrict a,
    size_t a_stride,
    $if DATATYPE == "F32":
      const float* restrict w,
    $else:
      const void* restrict w,
    float* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if INC:
      const float* restrict acc,
    const ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(float) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);
  $if INC:
    assert(acc != NULL);

  const float* a0 = a;
  float* c0 = c;
  $for M in range(1, MR):
    const float* a${M} = (const float*) ((uintptr_t) a${M-1} + a_stride);
    float* c${M} = (float*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  $if ACTIVATION == "MINMAX":
    const v128_t vmin = wasm_v128_load32_splat(&params->scalar.min);
    const v128_t vmax = wasm_v128_load32_splat(&params->scalar.max);
    XNN_FORCE_REALIZATION(vmin);
    XNN_FORCE_REALIZATION(vmax);
  do {
    $if INC:
      $for M in range(MR):
        $for N in range(0, NR, 4):
          v128_t vacc${M}x${ABC[N:N+4]} = wasm_v128_load(acc + ${M*NR+N});
      acc += ${MR*NR};
    $else:
      $for N in range(0, NR, 4):
        $if DATATYPE == "F32":
          v128_t vacc0x${ABC[N:N+4]} = wasm_v128_load(w + ${N});
        $else:
          v128_t vacc0x${ABC[N:N+4]} = wasm_v128_load((const float*) w + ${N});
      $for M in range(1, MR):
        $for N in range(0, NR, 4):
          v128_t vacc${M}x${ABC[N:N+4]} = vacc0x${ABC[N:N+4]};
      $if DATATYPE == "F32":
        w += ${NR};
      $else:
        w = (const float*) w + ${NR};

    size_t k = kc;
    do {
      $for M in range(MR):
        const v128_t va${M} = wasm_v128_load32_splat(a${M});
        a${M} += 1;

      $if DATATYPE == "F32":
        const v128_t vb${ABC[0:4]} = wasm_v128_load(w);
        $for N in range(4, NR, 4):
          const v128_t vb${ABC[N:N+4]} = wasm_v128_load(w + ${N});
        w += ${NR};
      $else:
        $for N in range(0, NR, 8):
          const v128_t vb${ABC[N:N+8]} = wasm_i16x8_load8x8((const int8_t*) w + ${N});
          const v128_t vbi${ABC[N:N+4]} = wasm_i32x4_extend_low_i16x8(vb${ABC[N:N+8]});
          const v128_t vbi${ABC[N+4:N+8]} = wasm_i32x4_extend_high_i16x8(vb${ABC[N:N+8]});
        $for N in range(0, NR, 4):
          const v128_t vb${ABC[N:N+4]} = wasm_f32x4_convert_i32x4(vbi${ABC[N:N+4]});
        w = (const int8_t*) w + ${NR};

      $for M in range(MR):
        $for N in range(0, NR, 4):
          $if FMA:
            vacc${M}x${ABC[N:N+4]} = wasm_f32x4_relaxed_madd(va${M}, vb${ABC[N:N+4]}, vacc${M}x${ABC[N:N+4]});
          $else:
            vacc${M}x${ABC[N:N+4]} = wasm_f32x4_add(vacc${M}x${ABC[N:N+4]}, wasm_f32x4_mul(va${M}, vb${ABC[N:N+4]}));

      k -= sizeof(float);
    } while (k != 0);

    $if DATATYPE == "QC8":
      $for N in range(0, NR, 4):
        const v128_t vscale${ABC[N:N+4]} = wasm_v128_load((const float*) w + ${N});
        $for M in range(MR):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_mul(vacc${M}x${ABC[N:N+4]}, vscale${ABC[N:N+4]});
      w = (const float*) w + ${NR};
    $if ACTIVATION == "MINMAX":
      $for N in range(0, NR, 4):
        $for M in range(MR):
          vacc${M}x${ABC[N:N+4]} = ${WASM_F32X4_MAX}(vmin, vacc${M}x${ABC[N:N+4]});

      $for N in range(0, NR, 4):
        $for M in range(MR):
          vacc${M}x${ABC[N:N+4]} = ${WASM_F32X4_MIN}(vmax, vacc${M}x${ABC[N:N+4]});
    $elif ACTIVATION == "RELU":
      const v128_t vzero = wasm_i32x4_const_splat(0);
      $for N in range(0, NR, 4):
        $for M in range(MR):
          vacc${M}x${ABC[N:N+4]} = wasm_i32x4_max(vacc${M}x${ABC[N:N+4]}, vzero);

    if XNN_LIKELY(nc >= ${NR}) {
      $for M in RANGE_MR:
        wasm_v128_store(c${M}, vacc${M}x${ABC[0:4]});
        $for N in range(4, NR, 4):
          wasm_v128_store(c${M} + ${N}, vacc${M}x${ABC[N:N+4]});
        c${M} = (float*) ((uintptr_t) c${M} + cn_stride);

      $for M in RANGE_MR:
        a${M} = (const float*) ((uintptr_t) a${M} - kc);

      nc -= ${NR};
    } else {
      $for LOG2N in reversed(range(NR.bit_length())):
        $if NR != 1 << LOG2N:
          if (nc & ${1 << LOG2N}) {
            $if LOG2N >= 2:
              $for M in RANGE_MR:
                wasm_v128_store(c${M}, vacc${M}x${ABC[0:4]});
                $for N in range(4, 1 << LOG2N, 4):
                  wasm_v128_store(c${M} + ${N}, vacc${M}x${ABC[N:N+4]});

              $for M in RANGE_MR:
                $for N in range(0, NR - (1 << LOG2N), 4):
                  vacc${M}x${ABC[N:N+4]} = vacc${M}x${ABC[N + (1 << LOG2N):N + (1 << LOG2N)+4]};

              $for M in RANGE_MR:
                c${M} += ${1 << LOG2N};
            $elif LOG2N == 1:
              $for M in RANGE_MR:
                wasm_v128_store64_lane(c${M}, vacc${M}x${ABC[0:4]}, 0);

              $for M in RANGE_MR:
                vacc${M}x${ABC[0:4]} = wasm_v64x2_shuffle(vacc${M}x${ABC[0:4]}, vacc${M}x${ABC[0:4]}, 1, 1);

              $for M in RANGE_MR:
                c${M} += 2;
            $elif LOG2N == 0:
              $for M in RANGE_MR:
                wasm_v128_store32_lane(c${M}, vacc${M}x${ABC[0:4]}, 0);
          }

      nc = 0;
    }
  } while (nc != 0);
}
