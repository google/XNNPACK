// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE in ["F32", "QC4", "QC8"]
$assert NR % 8 == 0
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>
$if DATATYPE in ["QC8", "QC4"]:
  #include <smmintrin.h>

#include "xnnpack/gemm.h"


$RANGE_MR = list(reversed(range(MR))) if INC else list(range(MR))
$if DATATYPE in ["QC8", "QC4"]:
  $ISA = "avx2"
$else:
  $ISA = {0: "avx", 3: "fma3"}[FMA]
$DATATYPE_SPEC = {"F32": "f32", "QC8": "f32_qc8w", "QC4": "f32_qc4w"}[DATATYPE]
void xnn_${DATATYPE_SPEC}_gemm${"inc" if INC else ""}_minmax_ukernel_${MR}x${NR}s4__${ISA}_broadcast(
    size_t mr,
    size_t nc,
    size_t kc,
    const float* restrict a,
    size_t a_stride,
    $if DATATYPE == "F32":
      const float* restrict w,
    $else:
      const void* restrict w,
    float* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if INC:
      const float* restrict acc,
    $if DATATYPE == "QC4":
      const struct xnn_f32_qc4w_minmax_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union xnn_f32_minmax_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(float) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);
  $if INC:
    assert(acc != NULL);

  const float* a0 = a;
  float* c0 = c;
  $for M in range(1, MR):
    const float* a${M} = (const float*) ((uintptr_t) a${M-1} + a_stride);
    float* c${M} = (float*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
  const __m256 vmin = _mm256_set1_ps(params->scalar.min);
  const __m256 vmax = _mm256_set1_ps(params->scalar.max);
  XNN_FORCE_REALIZATION(vmin);
  XNN_FORCE_REALIZATION(vmax);

  do {
    $if INC:
      $for M in range(MR):
        $for N in range(0, NR, 8):
          __m256 vacc${M}x${ABC[N:N+8]} = _mm256_load_ps(acc + ${M*NR+N});
      acc += ${MR*NR};
    $else:
      $for N in range(0, NR, 8):
        $if DATATYPE == "F32":
          __m256 vacc0x${ABC[N:N+8]} = _mm256_load_ps(w + ${N});
        $else:
          __m256 vacc0x${ABC[N:N+8]} = _mm256_loadu_ps((const float*) w + ${N});
      $for M in range(1, MR):
        $for N in range(0, NR, 8):
          __m256 vacc${M}x${ABC[N:N+8]} = vacc0x${ABC[N:N+8]};
      $if DATATYPE == "F32":
        w += ${NR};
      $else:
        w = (const float*) w + ${NR};

    size_t k = kc;
    while (k >= 4 * sizeof(float)) {
      $for M in range(MR):
        __m256 va${M} = _mm256_broadcast_ps((const __m128*) a${M});
        a${M} += 4;

      $for L in range(4):
        $if DATATYPE == "F32":
          $for N in range(0, NR, 8):
            const __m256 vb${ABC[N:N+8]}c${L} = _mm256_load_ps(w + ${L * NR + N});
        $else:
          $for N in range(0, NR, 8):
            const __m256i vbi${ABC[N:N+8]}c${L} = _mm256_cvtepi8_epi32(_mm_loadl_epi64((const __m128i*) ((const int8_t*) w + ${L * NR + N})));
          $for N in range(0, NR, 8):
            const __m256 vb${ABC[N:N+8]}c${L} = _mm256_cvtepi32_ps(vbi${ABC[N:N+8]}c${L});

        $for N in range(0, NR, 8):
          $for M in range(MR):
            $if FMA == 3:
              vacc${M}x${ABC[N:N+8]} = _mm256_fmadd_ps(va${M}, vb${ABC[N:N+8]}c${L}, vacc${M}x${ABC[N:N+8]});
            $else:
              vacc${M}x${ABC[N:N+8]} = _mm256_add_ps(vacc${M}x${ABC[N:N+8]}, _mm256_mul_ps(va${M}, vb${ABC[N:N+8]}c${L}));

        $if L + 1 != 4:
          $for M in range(MR):
            va${M} = _mm256_permute_ps(va${M}, _MM_SHUFFLE(0, 3, 2, 1));

      $if DATATYPE == "F32":
        w += ${NR * 4};
      $elif DATATYPE == "QC4":
        w = (const int8_t*) w + ${NR * 4 // 2};
      $else:
        w = (const int8_t*) w + ${NR * 4};
      k -= 4 * sizeof(float);
    }
    if XNN_UNLIKELY(k != 0) {
      $for M in range(MR):
        __m256 va${M} = _mm256_broadcast_ps((const __m128*) a${M});
        a${M} = (const float*) ((uintptr_t) a${M} + k);

      const __m256 vzero = _mm256_setzero_ps();
      $for L in range(4):
        $if DATATYPE == "F32":
          $for N in range(0, NR, 8):
            const __m256 vb${ABC[N:N+8]}c${L} = _mm256_load_ps(w + ${L * NR + N});
        $else:
          $for N in range(0, NR, 8):
            const __m256i vbi${ABC[N:N+8]}c${L} = _mm256_cvtepi8_epi32(_mm_loadl_epi64((const __m128i*) ((const int8_t*) w + ${L * NR + N})));
          $for N in range(0, NR, 8):
            const __m256 vb${ABC[N:N+8]}c${L} = _mm256_cvtepi32_ps(vbi${ABC[N:N+8]}c${L});

        $for N in range(0, NR, 8):
          $for M in range(MR):
            $if FMA == 3:
              vacc${M}x${ABC[N:N+8]} = _mm256_fmadd_ps(_mm256_and_ps(va${M}, _mm256_cmp_ps(vb${ABC[N:N+8]}c${L}, vzero, _CMP_NEQ_OQ)), vb${ABC[N:N+8]}c${L}, vacc${M}x${ABC[N:N+8]});
            $else:
              vacc${M}x${ABC[N:N+8]} = _mm256_add_ps(vacc${M}x${ABC[N:N+8]}, _mm256_mul_ps(_mm256_and_ps(va${M}, _mm256_cmp_ps(vb${ABC[N:N+8]}c${L}, vzero, _CMP_NEQ_OQ)), vb${ABC[N:N+8]}c${L}));

        $if L + 1 != 4:
          $for M in range(MR):
            va${M} = _mm256_permute_ps(va${M}, _MM_SHUFFLE(0, 3, 2, 1));

      $if DATATYPE == "F32":
        w += ${NR * 4};
      $elif DATATYPE == "QC4":
        w = (const int8_t*) w + ${NR * 4 // 2};
      $else:
        w = (const int8_t*) w + ${NR * 4};
    }

    $if DATATYPE in ["QC8", "QC4"]:
      $for N in range(0, NR, 8):
        const __m256 vscale${ABC[N:N+8]} = _mm256_loadu_ps((const float*) w + ${N});
        $for M in range(MR):
          vacc${M}x${ABC[N:N+8]} = _mm256_mul_ps(vacc${M}x${ABC[N:N+8]}, vscale${ABC[N:N+8]});
      w = (const float*) w + ${NR};
    $for N in range(0, NR, 8):
      $for M in range(MR):
        vacc${M}x${ABC[N:N+8]} = _mm256_max_ps(vmin, vacc${M}x${ABC[N:N+8]});

    $for N in range(0, NR, 8):
      $for M in range(MR):
        vacc${M}x${ABC[N:N+8]} = _mm256_min_ps(vmax, vacc${M}x${ABC[N:N+8]});

    if XNN_LIKELY(nc >= ${NR}) {
      $for M in RANGE_MR:
        _mm256_storeu_ps(c${M}, vacc${M}x${ABC[0:8]});
        $for N in range(8, NR, 8):
          _mm256_storeu_ps(c${M} + ${N}, vacc${M}x${ABC[N:N+8]});
        c${M} = (float*) ((uintptr_t) c${M} + cn_stride);

      $for M in RANGE_MR:
        a${M} = (const float*) ((uintptr_t) a${M} - kc);

      nc -= ${NR};
    } else {
      $for LOG2N in reversed(range(NR.bit_length())):
        $if NR != 1 << LOG2N:
          if (nc & ${1 << LOG2N}) {
            $if LOG2N >= 3:
              $for M in RANGE_MR:
                _mm256_storeu_ps(c${M}, vacc${M}x${ABC[0:8]});
                $for N in range(8, 1 << LOG2N, 8):
                  _mm256_storeu_ps(c${M} + ${N}, vacc${M}x${ABC[N:N+8]});

              $for M in RANGE_MR:
                $for N in range(0, NR - (1 << LOG2N), 8):
                  vacc${M}x${ABC[N:N+8]} = vacc${M}x${ABC[N + (1 << LOG2N):N + (1 << LOG2N)+8]};

              $for M in RANGE_MR:
                c${M} += ${1 << LOG2N};
            $elif LOG2N == 2:
              $for M in RANGE_MR:
                _mm_storeu_ps(c${M}, vacc${M}x${ABC[0:4]});

              $for M in RANGE_MR:
                vacc${M}x${ABC[0:4]} = _mm256_extractf128_ps(vacc${M}x${ABC[0:8]}, 1);

              $for M in RANGE_MR:
                c${M} += 4;
            $elif LOG2N == 1:
              $for M in RANGE_MR:
                _mm_storel_pi((__m64*) c${M}, vacc${M}x${ABC[0:4]});

              $for M in RANGE_MR:
                vacc${M}x${ABC[0:4]} = _mm_movehl_ps(vacc${M}x${ABC[0:4]}, vacc${M}x${ABC[0:4]});

              $for M in RANGE_MR:
                c${M} += 2;
            $elif LOG2N == 0:
              $for M in RANGE_MR:
                _mm_store_ss(c${M}, vacc${M}x${ABC[0:4]});
          }
        $if LOG2N == 3:
          $for M in RANGE_MR:
            __m128 vacc${M}x${ABC[0:4]} = _mm256_castps256_ps128(vacc${M}x${ABC[0:8]});

      nc = 0;
    }
  } while (nc != 0);
}
