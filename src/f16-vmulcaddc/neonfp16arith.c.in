// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE % 8 == 0
$assert CHANNEL_TILE >= 8
$assert ROW_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/math.h>
#include <xnnpack/vmulcaddc.h>


void xnn_f16_vmulcaddc_minmax_ukernel_c${CHANNEL_TILE}__neonfp16arith_${ROW_TILE}x(
    size_t rows,
    size_t channels,
    const void* restrict input,
    size_t input_stride,
    const void* restrict weights,
    void* restrict output,
    size_t output_stride,
    const union xnn_f16_minmax_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(rows != 0);
  assert(channels != 0);
  assert(channels % sizeof(uint16_t) == 0);

  const uint16_t* i0 = (const uint16_t*) input;
  uint16_t* o0 = (uint16_t*) output;
  $for M in range(1, ROW_TILE):
    const uint16_t* i${M} = (const uint16_t*) ((uintptr_t) i${M-1} + input_stride);
    uint16_t* o${M} = (uint16_t*) ((uintptr_t) o${M-1} + output_stride);

  const size_t input_increment = input_stride * ${ROW_TILE} - channels;
  const size_t output_increment = output_stride * ${ROW_TILE} - channels;

  const float16x8_t vmin = vreinterpretq_f16_u16(vld1q_dup_u16(&params->fp16arith.min));
  const float16x8_t vmax = vreinterpretq_f16_u16(vld1q_dup_u16(&params->fp16arith.max));
  do {
    $for M in range(1, ROW_TILE):
      $if M % 2 == 0:
        if XNN_UNPREDICTABLE(rows <= ${M}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }
      $else:
        if XNN_UNPREDICTABLE(rows < ${M+1}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }

    const uint16_t* w = (const uint16_t*) weights;
    size_t c = channels;
    $if CHANNEL_TILE > 8:
      for (; c >= ${CHANNEL_TILE} * sizeof(uint16_t); c -= ${CHANNEL_TILE} * sizeof(uint16_t)) {
        $for C in range(0, CHANNEL_TILE, 8):
          const float16x8_t vscale${ABC[C:C+8]} = vreinterpretq_f16_u16(vld1q_u16(w)); w += 8;

        $for M in range(ROW_TILE):
          $for C in range(0, CHANNEL_TILE, 8):
            float16x8_t vacc${M}x${ABC[C:C+8]} = vreinterpretq_f16_u16(vld1q_u16(i${M})); i${M} += 8;

        $for C in range(0, CHANNEL_TILE, 8):
          const float16x8_t vbias${ABC[C:C+8]} = vreinterpretq_f16_u16(vld1q_u16(w)); w += 8;

        $for M in range(ROW_TILE):
          $for C in range(0, CHANNEL_TILE, 8):
            vacc${M}x${ABC[C:C+8]} = vfmaq_f16(vbias${ABC[C:C+8]}, vscale${ABC[C:C+8]}, vacc${M}x${ABC[C:C+8]});

        $for M in range(ROW_TILE):
          $for C in range(0, CHANNEL_TILE, 8):
            vacc${M}x${ABC[C:C+8]} = vmaxq_f16(vacc${M}x${ABC[C:C+8]}, vmin);

        $for M in range(ROW_TILE):
          $for C in range(0, CHANNEL_TILE, 8):
            vacc${M}x${ABC[C:C+8]} = vminq_f16(vacc${M}x${ABC[C:C+8]}, vmax);

        $for M in range(ROW_TILE):
          $for C in range(0, CHANNEL_TILE, 8):
            vst1q_u16(o${M}, vreinterpretq_u16_f16(vacc${M}x${ABC[C:C+8]})); o${M} += 8;
      }
    for (; c >= 8 * sizeof(uint16_t); c -= 8 * sizeof(uint16_t)) {
      const float16x8_t vscale01234567 = vreinterpretq_f16_u16(vld1q_u16(w));

      $for M in range(ROW_TILE):
        float16x8_t vacc${M}x01234567 = vreinterpretq_f16_u16(vld1q_u16(i${M})); i${M} += 8;

      const float16x8_t vbias01234567 = vreinterpretq_f16_u16(vld1q_u16(w + ${CHANNEL_TILE}));
      w += ${8 if CHANNEL_TILE > 8 else CHANNEL_TILE * 2};

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vfmaq_f16(vbias01234567, vscale01234567, vacc${M}x01234567);

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vmaxq_f16(vacc${M}x01234567, vmin);

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vminq_f16(vacc${M}x01234567, vmax);

      $for M in range(ROW_TILE):
        vst1q_u16(o${M}, vreinterpretq_u16_f16(vacc${M}x01234567)); o${M} += 8;
    }
    if XNN_UNLIKELY(c != 0) {
      const float16x8_t vscale01234567 = vreinterpretq_f16_u16(vld1q_u16(w));

      $for M in range(ROW_TILE):
        float16x8_t vacc${M}x01234567 = vreinterpretq_f16_u16(vld1q_u16(i${M})); i${M} = (const uint16_t*) ((uintptr_t) i${M} + c);

      const float16x8_t vbias01234567 = vreinterpretq_f16_u16(vld1q_u16(w + ${CHANNEL_TILE}));

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vfmaq_f16(vbias01234567, vscale01234567, vacc${M}x01234567);

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vmaxq_f16(vacc${M}x01234567, vmin);

      $for M in range(ROW_TILE):
        vacc${M}x01234567 = vminq_f16(vacc${M}x01234567, vmax);

      $for M in range(ROW_TILE):
        float16x4_t vacc${M}x0123 = vget_low_f16(vacc${M}x01234567);
      if (c & (4 * sizeof(uint16_t))) {
        $for M in range(ROW_TILE):
          vst1_u16(o${M}, vreinterpret_u16_f16(vacc${M}x0123)); o${M} += 4;

        $for M in range(ROW_TILE):
          vacc${M}x0123 = vget_high_f16(vacc${M}x01234567);
      }
      if (c & (2 * sizeof(uint16_t))) {
        $for M in range(ROW_TILE):
          vst1_lane_u32((void*) o${M}, vreinterpret_u32_f16(vacc${M}x0123), 0); o${M} += 2;

        $for M in range(ROW_TILE):
          vacc${M}x0123 = vext_f16(vacc${M}x0123, vacc${M}x0123, 2);
      }
      if (c & (1 * sizeof(uint16_t))) {
        $for M in range(ROW_TILE):
          vst1_lane_u16(o${M}, vreinterpret_u16_f16(vacc${M}x0123), 0); o${M} += 1;
      }
    }
    $for M in range(ROW_TILE):
      i${M} = (const uint16_t*) ((uintptr_t) i${M} + input_increment);
      o${M} = (uint16_t*) ((uintptr_t) o${M} + output_increment);
    rows = doz(rows, ${ROW_TILE});
  } while (rows != 0);
}
