// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["RNDNE", "RNDZ", "RNDU", "RNDD"]
#include <assert.h>

#include <arm_neon.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/vunary.h"


$VRNDQ_F32 = {
$  "RNDNE": "vrndnq_f32",
$  "RNDZ": "vrndq_f32",
$  "RNDU": "vrndpq_f32",
$  "RNDD": "vrndmq_f32",
$}[OP]
void xnn_f32_v${OP.lower()}_ukernel__neonv8_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const struct xnn_f32_rnd_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vx${ABC[N:N+4]} = vld1q_f32(input); input += 4;

    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vy${ABC[N:N+4]} = ${VRNDQ_F32}(vx${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vst1q_f32(output, vy${ABC[N:N+4]}); output += 4;
  }
  $if BATCH_TILE > 4:
    for (; batch >= 4 * sizeof(float); batch -= 4 * sizeof(float)) {
      const float32x4_t vx = vld1q_f32(input); input += 4;
      const float32x4_t vy = ${VRNDQ_F32}(vx);
      vst1q_f32(output, vy); output += 4;
    }
  if XNN_UNLIKELY(batch != 0) {
    const float32x4_t vx = vld1q_f32(input);
    const float32x4_t vy = ${VRNDQ_F32}(vx);
    float32x2_t vy_lo = vget_low_f32(vy);
    if (batch & (2 * sizeof(float))) {
      vst1_f32(output, vy_lo); output += 2;
      vy_lo = vget_high_f32(vy);
    }
    if (batch & (1 * sizeof(float))) {
      vst1_lane_f32(output, vy_lo, 0);
    }
  }
}
