// Copyright 2025 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 32 == 0
$assert BATCH_TILE >= 32
$assert OP in ["RNDNE", "RNDZ", "RNDU", "RNDD"]
#include <assert.h>

#include "src/xnnpack/simd/f32-${ARCH}.h"

#include "src/xnnpack/common.h"
#include "src/xnnpack/vunary.h"


$XNN_RND_F32 = {
$  "RNDNE": "xnn_round_f32",
$  "RNDZ": "xnn_trunc_f32",
$  "RNDU": "xnn_ceil_f32",
$  "RNDD": "xnn_floor_f32",
$}[OP]
void xnn_f32_v${OP.lower()}_ukernel__${ARCH}_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const struct xnn_f32_default_params* restrict params)
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
    $for N in range(0, BATCH_TILE, 32):
      const xnn_simd_f32_t vx${N//32} = xnn_loadu_f32(input); input += 32;

    $for N in range(0, BATCH_TILE, 32):
      const xnn_simd_f32_t vy${N//32} = ${XNN_RND_F32}(vx${N//32});

    $for N in range(0, BATCH_TILE, 32):
      xnn_storeu_f32(output, vy${N//32}); output += 32;
  }
  $if BATCH_TILE > 32:
    for (; batch >= 32 * sizeof(float); batch -= 32 * sizeof(float)) {
      const xnn_simd_f32_t vx = xnn_loadu_f32(input); input += 32;
      const xnn_simd_f32_t vy = ${XNN_RND_F32}(vx);
      xnn_storeu_f32(output, vy); output += 32;
    }
  if XNN_UNLIKELY(batch != 0) {
    const xnn_simd_f32_t vx = xnn_load_tail_f32(input, batch >> XNN_LOG2_SIZEOF_FLOAT);
    xnn_simd_f32_t vy = ${XNN_RND_F32}(vx);
    xnn_store_tail_f32(output, vy, batch >> XNN_LOG2_SIZEOF_FLOAT);
  }
}
