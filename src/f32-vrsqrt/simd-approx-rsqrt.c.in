// Copyright 2025 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$BATCH_TILES = tuple(int(bt) for bt in BATCH_TILES.split(","))
$SIMD_SIZE = BATCH_TILES[0]
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include "src/xnnpack/simd/f32-${ARCH}.h"

#include "src/xnnpack/common.h"
#include "src/xnnpack/microparams.h"
#include "src/xnnpack/vunary.h"

// In the following, we use Newton-Raphson steps on the equation
// $x^{-2} - a$, which expands to:
//
//  $$x_{k+1} = 0.5 * x_k * (3.0 - a * x_k^2)$$
//
// So we do the following steps:
//
//  1. t0 = x_k
//  2. t1 = t0 * t0   (x_k^2)
//  3. t2 = a * t1    (a * x_k^2)
//  4. t3 = 3.0 - t2  (3.0 - a * x_k^2)
//  5. t4 = 0.5 * t0  (0.5 * x_k)
//  6. y  = t3 * t4   (0.5 * x_k * (3.0 - a * x_k^2))
//
// Where $x_k$ is the original approximation and `y` contains the improved
// approximation $x_{k+1}$.
$NEWTON_RHAPSON_ITERATIONS = 2

$for BATCH_TILE in BATCH_TILES:
  $assert BATCH_TILE % SIMD_SIZE == 0
  $assert BATCH_TILE >= SIMD_SIZE
  $SIMD_TILE = BATCH_TILE // SIMD_SIZE

  void xnn_f32_vrsqrt_ukernel__${ARCH}_approx_rsqrt_u${BATCH_TILE}(
      size_t batch,
      const float* input,
      float* output,
      const struct xnn_f32_default_params unused_params[restrict XNN_MIN_ELEMENTS(1)])
  {
    assert(batch != 0);
    assert(batch % sizeof(float) == 0);
    assert(input != NULL);
    assert(output != NULL);
    assert(xnn_simd_size_f32 == ${SIMD_SIZE});

    XNN_SIMD_CONST_F32(vthree, 3.0f);
    XNN_SIMD_CONST_F32(vhalf, 0.5f);

    // Register pressure isn't much of an issue in these kernels, but for some
    // reason this is necessary to avoid up to *~10x* slower code.
    // Stack alignment...?
    XNN_FORCE_REALIZATION(vthree);
    XNN_FORCE_REALIZATION(vhalf);

    $if SIMD_TILE > 1:
      for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
        $for N in range(SIMD_TILE):
          xnn_simd_f32_t vx_${N} = xnn_loadu_f32(input + ${N} * xnn_simd_size_f32);
        input += ${BATCH_TILE};

        $for N in range(SIMD_TILE):
          xnn_simd_f32_t vy_${N} = xnn_approx_reciprocal_sqrt_f32(vx_${N});

        $for N in range(SIMD_TILE):
          xnn_simd_f32_t vt1_${N}, vt2_${N}, vt3_${N}, vt4_${N};
        $for i in range(NEWTON_RHAPSON_ITERATIONS):
          // Do a Newton-Raphson step as described above.
          $for N in range(SIMD_TILE):
            vt1_${N} = xnn_mul_f32(vy_${N}, vy_${N});
          $for N in range(SIMD_TILE):
            vt2_${N} = xnn_mul_f32(vx_${N}, vt1_${N});
          $for N in range(SIMD_TILE):
            vt3_${N} = xnn_sub_f32(vthree, vt2_${N});
          $for N in range(SIMD_TILE):
            vt4_${N} = xnn_mul_f32(vhalf, vy_${N});
          $for N in range(SIMD_TILE):
            vy_${N} = xnn_mul_f32(vt3_${N}, vt4_${N});

        $for N in range(SIMD_TILE):
          xnn_storeu_f32(output + ${N} * xnn_simd_size_f32, vy_${N});
        output += ${BATCH_TILE};
      }
    for (; batch >= xnn_simd_bytes_f32; batch -= xnn_simd_bytes_f32) {
      xnn_simd_f32_t vx = xnn_loadu_f32(input);
      input += ${SIMD_SIZE};

      xnn_simd_f32_t vy = xnn_approx_reciprocal_sqrt_f32(vx);

      xnn_simd_f32_t vt1, vt2, vt3, vt4;
      $for i in range(NEWTON_RHAPSON_ITERATIONS):
        // Do a Newton-Raphson step as described above.
        vt1 = xnn_mul_f32(vy, vy);
        vt2 = xnn_mul_f32(vx, vt1);
        vt3 = xnn_sub_f32(vthree, vt2);
        vt4 = xnn_mul_f32(vhalf, vy);
        vy = xnn_mul_f32(vt3, vt4);
      xnn_storeu_f32(output, vy);
      output += ${SIMD_SIZE};
    }
    $if SIMD_SIZE > 1:
      if XNN_UNLIKELY(batch != 0) {
        xnn_simd_f32_t vx = xnn_load_tail_f32(input, batch >> XNN_LOG2_SIZEOF_FLOAT);

        xnn_simd_f32_t vy = xnn_approx_reciprocal_sqrt_f32(vx);

        xnn_simd_f32_t vt1, vt2, vt3, vt4;
        $for i in range(NEWTON_RHAPSON_ITERATIONS):
          // Do a Newton-Raphson step as described above.
          vt1 = xnn_mul_f32(vy, vy);
          vt2 = xnn_mul_f32(vx, vt1);
          vt3 = xnn_sub_f32(vthree, vt2);
          vt4 = xnn_mul_f32(vhalf, vy);
          vy = xnn_mul_f32(vt3, vt4);
        xnn_store_tail_f32(output, vy, batch >> XNN_LOG2_SIZEOF_FLOAT);
      }
  }
