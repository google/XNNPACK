// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$import math
$assert RR == 1 or RR == 2
$assert LOG2LUT in [0, 2, 3, 4, 5, 6]
$assert P == H + 1 or P == H + 2
$assert P == H + 1 or not PS
$assert not WASM or not FMA
$LUT = 1 << LOG2LUT
#include <assert.h>
#include <stddef.h>
#include <stdint.h>
#include <math.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/math-stubs.h"

$if LOG2LUT != 0:

  // Table of exp2(k / ${LUT}) values decremented (as integer) by (k << ${23-LOG2LUT}), k = 0..${LUT-1}
  extern XNN_INTERNAL const uint32_t xnn_table_exp2minus_k_over_${LUT}[${LUT}];

$if LOG2LUT == 0:
  $COEFFS = {6: ["0x1.FFFFFEp+0", "0x1.5554B0p+0", "0x1.555716p-1", "0x1.12278Ep-2", "0x1.6B7338p-4"]}[P]
  $MINUS_LN2 = ("-0x1.62E420p-1", "-0x1.FDF474p-22")
$elif LOG2LUT == 2:
  $COEFFS = {4: ["0x1.000002p+1", "0x1.557082p+0", "0x1.554F9Ap-1"]}[P]
  $MINUS_LN2 = ("-0x1.62E400p-1", "-0x1.7F7D1Cp-20")
$elif LOG2LUT == 3:
  $COEFFS = {3: ["0x1.0007ACp+1", "0x1.555862p+0"], 4: ["0x1.000000p+1", "0x1.555C20p+0", "0x1.5558ECp-1"]}[P]
  $MINUS_LN2 = ("-0x1.62E400p-1", "-0x1.7F7D1Cp-20")
$elif LOG2LUT == 4:
  $COEFFS = {3: ["0x1.0001ECp+1", "0x1.55561Cp+0"], 4: ["0x1.000000p+1", "0x1.555708p+0", "0x1.55563Ap-1"]}[P]
  $MINUS_LN2 = ("-0x1.62E400p-1", "-0x1.7F7D1Cp-20")
$elif LOG2LUT == 5:
  $COEFFS = {3: ["0x1.00007Ap+1", "0x1.555582p+0"]}[P]
  $MINUS_LN2 = ("-0x1.62E400p-1", "-0x1.7F7D1Cp-20")
$elif LOG2LUT == 6:
  $COEFFS = {3: ["0x1.00001Ep+1", "0x1.55555Ep+0"]}[P]
  $MINUS_LN2 = ("-0x1.62E800p-1", "0x1.E8082Ep-16")
$if FMA:
  $MINUS_LN2 = ("-0x1.62E430p-1", "0x1.05C610p-29")
$POLYNOMIAL = "c%d" % P
$for i in reversed(range(2, P)):
$  POLYNOMIAL = "(c%d + t * %s)" % (i, POLYNOMIAL)
$if P == H + 1:
  $POLYNOMIAL = "(2 + t * %s)" % POLYNOMIAL
$else:
  $COEFFS = [float.hex(0.5 * float.fromhex(c)).upper().replace("0X", "0x").replace("0000000P", "p") for c in COEFFS]
$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d%s_" % (P, H, "ps" if PS else "ts")
$DIV_SUFFIX = DIV.lower()
$ISA = "fma" if FMA else "wasm" if WASM else "scalar"
void xnn_math_f32_tanh__${ISA}_expm1plus_rr${RR}_${LUT_SUFFIX}${POLY_SUFFIX}${DIV_SUFFIX}(
    size_t n,
    const float* input,
    float* output)
{
  assert(n % sizeof(float) == 0);

  // The smallest z for which tanhf(z) is saturated at 1.0f.
  const float vsat_cutoff = 0x1.205968p+3f;
  const float vlog2e = 0x1.715476p+0f;
  $if LOG2LUT == 0:
    // Large number such that ulp(magic bias) == 0.5 and magic bias === 63.5 mod 2**21.
    const float vmagic_bias = 0x1.8000FEp+22f;
  $else:
    // Large number such that ulp(magic bias) == exp2(${-1-LOG2LUT})
    const float vmagic_bias = 0x1.800000p+${22-LOG2LUT}f;
  $if LOG2LUT != 0:
    // Mask for the lowest ${LOG2LUT} bits
    const uint32_t vindex_mask = UINT32_C(0x${"%X" % (LUT-1)});
  $if RR == 1:
    const float vminus_ln2 = -0x1.62E430p-1f;
  $else:
    $if not FMA:
      // Last ${4+LOG2LUT} bits are zeroes
    const float vminus_ln2_hi = ${MINUS_LN2[0]}f;
    const float vminus_ln2_lo = ${MINUS_LN2[1]}f;
  // Coefficients of polynomial approximation
  $if P == H + 1:
    //   exp(2t) - 1 ~ t * ${POLYNOMIAL}
  $else:
    //   exp(2t) - 1 ~ 2 * (t + t * (t * ${POLYNOMIAL}))
  // on [-log(2)/${4*LUT}, log(2)/${4*LUT}]
  $for i in reversed(range(len(COEFFS))):
    const float vc${i+P-len(COEFFS)+1} = ${COEFFS[i]}f;
  $if P == H + 1:
    const float vtwo = 2.0f;
  const float vone = 1.0f;
  $if P != H + 1:
    const float vtwo = 2.0f;

  for (; n != 0; n -= sizeof(float)) {
    const float vx = *input++;

    // General structure of the algorithm:
    //
    //           / expm1(2x) / (2 + expm1(2x)) if x >= 0
    //   f(x) :=
    //           \ -f(-x) if x <= 0
    //
    // First we compute y := expm1(2z) / (2 + expm1(2z)) where z = abs(x),
    // then set its sign according to the sign of x: f(x) := sign(x) * abs(y).
    float vz = fabsf(vx);

    // The function saturates at -1 for large positive inputs: tanhf(-z) == -1.0f for z >= sat_cutoff ~= 9.010913.
    // To guarantee this behaviour, we clip input z at sat_cutoff, and leverage the fact that for our implementation
    // tanhf(sat_cutoff) == -1.0f. NaN inputs are passed unchanged.
    vz = math_pmin_f32(vz, vsat_cutoff);

    // Compute reduced argument n := round(z / log(2), ${1+LOG2LUT}).
    // We do it by adding a large number (magic bias), which cause rounding of the result to ${1+LOG2LUT} fractional ${"bit" if LOG2LUT == 0 else "bits"},
    // then subtracing the large number back. The trick with adding large number is valid only within certain bounds
    // (|z / log(2)| <= 2**${21-LOG2LUT}, i.e. |z| <= 0x1.62E43p+${20-LOG2LUT} = ${math.ldexp(float.fromhex("0x1.62E43p+20"), -LOG2LUT)}), but that is acceptable, because inputs x
    // outside of [-9.010913, 9.010913] (i.e. z outsize [0, 9.010913]) saturate tanhf(x).
    $if LOG2LUT == 0:
      // Additionally, we fuse addition of the floating-point exponent bias (127) into the magic bias.
    // Note that addition-subtraction of the large number doesn't cause overflow for inputs in this range.
    $if FMA:
      float vn = fmaf(vz, vlog2e, vmagic_bias);
    $else:
      float vn = vz * vlog2e + vmagic_bias;

    $if LOG2LUT == 0:
      // Create a floating-point number s (scale) such that s == 2**(2n) for inputs which don't cause underflow, i.e.
      // 0 <= z <= 9.010913, and -13 <= n <= 0 accordingly.
      const float vs = uint32_as_float(float_as_uint32(vn) << 23);
    $else:
      // Create a floating-point number s (scale) such that s := 2**(2n) for valid inputs, i.e. 0 <= z <= 9.010913. As
      // n has ${1+LOG2LUT} fractional bits, we split s == 2**(2n) = 2**int(2n) * 2**frac(2n). We create s in two steps:
      // 1. Fetch 2**frac(2n) from the table using the ${LOG2LUT} low bits of n, as integer. Note that the fetched values are in
      //    the [1.0, 2.0) range, i.e. their unbiased floating-point exponent is 0.
      // 2. Adjust fetched value by addition of int(2n) to its floating-point exponent. The result is always a normalized
      //    number, because for 0 <= z <= 9.010913 we have 0 <= int(n) <= 13, and thus the adjusted exponent is not
      //    greater than 13.
      //
      // Shift bits ${LOG2LUT}:${LOG2LUT+8} into 23:31 (position of floating-point exponent).
      const uint32_t vb = float_as_uint32(vn);
      const uint32_t ve = vb << ${23-LOG2LUT};

      // Use bits 0:${LOG2LUT} bits of n, as integer, as an index for table lookup of l := 2**frac(n).
      const uint32_t vidx = vb & vindex_mask;
      const uint32_t vl = xnn_table_exp2minus_k_over_${LUT}[vidx];

      // Adjust exponent of the value l fetched from the table to get the final s value.
      const float vs = uint32_as_float(vl + ve);

    // Subtract the large number back to get final n := round(z / log(2), ${1+LOG2LUT}) as a floating-point number.
    vn -= vmagic_bias;

    // Compute reduced argument t := z - n * log(2).
    $if RR == 1:
      $if FMA:
        const float vt = fmaf(vn, vminus_ln2, vz);
      $else:
        const float vt = vn * vminus_ln2 + vz;
    $else:
      // Use Cody-Waite range reduction method (note two constants to represent log(2)) to improve accuracy.
      $if FMA:
        float vt = fmaf(vn, vminus_ln2_hi, vz);
        vt = fmaf(vn, vminus_ln2_lo, vt);
      $else:
        float vt = vn * vminus_ln2_hi + vz;
        vt = vn * vminus_ln2_lo + vt;

    // Compute degree-${P} polynomial approximation for exp(2t) - 1 on [-log(2)/${4*LUT}, log(2)/${4*LUT}].
    $if P == H + 1:
      //   P(t) = t * ${POLYNOMIAL}
      //        = t * p
    $else:
      //   P(t) = 2 * (t + t * (t * ${POLYNOMIAL}))
      //        = 2 * (t + t * p)
    $if FMA:
      float vp = fmaf(vc${P}, vt, vc${P-1});
    $else:
      float vp = vc${P} * vt + vc${P-1};
    $for i in reversed(range(2, P-1)):
      $if FMA:
        vp = fmaf(vp, vt, vc${i});
      $else:
        vp = vp * vt + vc${i};
    $if P == H + 1:
      $if FMA:
        vp = fmaf(vp, vt, vtwo);
      $else:
        vp = vp * vt + vtwo;
    $else:
      vp *= vt;

    // Reconstruct the exp(2z) - 1 value:
    $if P == H + 1:
      //   exp(2z) - 1 = s * (t * ${POLYNOMIAL} + 1) - 1
      //               = s * t * p + (s - 1)
      $if PS:
        //                = (s - 1) + (p * s) * t
      $else:
        //                = (s - 1) + (t * s) * p
    $else:
      //   exp(2z) - 1 = s * (2 * (t + t * (t * ${POLYNOMIAL})) + 1) - 1
      //               = s * (2 * (t + t * p) + 1) - 1
      //               = (s - 1) + 2 * ((t * s) + (t * s) * p)
    $if PS:
      const float vps = vp * vs;
    $else:
      const float vts = vt * vs;
    const float vsmo = vs - vone;
    $if P == H + 1:
      $if PS:
        $if FMA:
          const float vemo = fmaf(vt, vps, vsmo);
        $else:
          const float vemo = vt * vps + vsmo;
      $else:
        $if FMA:
          const float vemo = fmaf(vp, vts, vsmo);
        $else:
          const float vemo = vp * vts + vsmo;
    $else:
      $if FMA:
        vp = fmaf(vp, vts, vts);
        const float vemo = fmaf(vp, vtwo, vsmo);
      $else:
        vp = vp * vts + vts;
        const float vemo = vp * vtwo + vsmo;

    // Denominator of the tanh fraction: exp(2z) + 1 = expm1(2z) + 2
    const float vepo = vemo + vtwo;

    $if DIV == "DIV":
      // Reconstruct y = expm1(2z) / (expm1(2z) + 2)
      float vy = vemo / vepo;
    $else:
      // Compute reciprocal of denominator.
      const float vrepo = vone / vepo;

      // Reconstruct y = expm1(2z) / (expm1(2z) + 2)
      float vy = vemo * vrepo;

    // Reconstruct tanh(x) = copysign(y, x)
    vy = copysignf(vy, vx);

    *output++ = vy;
  }
}
