// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert (P, H) in [(17, 8), (19, 9)]
$assert FMA in [0, 3]
#include <assert.h>
#include <stddef.h>
#include <math.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/math-stubs.h"


$COEFFS = {
$  17: ["-0x1.41F3C8p-2", "0x1.7D516Ap-4", "-0x1.348432p-6", "0x1.3DD52Cp-9", "-0x1.964AECp-13", "0x1.3699B6p-17", "-0x1.036B86p-22", "0x1.6B90F0p-29"],
$  19: ["-0x1.499D08p-2", "0x1.ABC35Cp-4", "-0x1.967628p-6", "0x1.03CAEAp-8", "-0x1.B2782Ep-12", "0x1.D1AEA2p-16", "-0x1.332066p-20", "0x1.C4FC88p-26", "-0x1.1D841Cp-32"],
$}[P]
$CUTOFF = {17: "0x1.05C000p+2" if FMA else "0x1.058000p+2", 19: "0x1.1F0000p+2"}[P]
$POLYNOMIAL = "c%d" % P
$for i in reversed(range(3, P, 2)):
$  POLYNOMIAL = "(c%d + t * %s)" % (i, POLYNOMIAL)
$ISA = "fma3" if FMA else "f16c"
void xnn_math_f16_tanh__${ISA}_polynomial_p${P}h${H}t2(
    size_t n,
    const void* input,
    void* output)
{
  assert(n % (8 * sizeof(uint16_t)) == 0);

  // The smallest number x above -0x1.208p+2h (the largest number z for which tanhh(z) is saturated at -1.0h) for which
  // this implementation of tanh(x) produce -1.0h output.
  const __m256 vneg_sat_cutoff = _mm256_set1_ps(-${CUTOFF}f);
  // The largest number x below 0x1.208p+2h (the smallest number z for which tanhh(z) is saturated at 1.0h) for which
  // this implementation of tanh(x) produce 1.0h output.
  const __m256 vpos_sat_cutoff = _mm256_set1_ps(${CUTOFF}f);
  // Coefficient of polynomial approximation
  //   tanh(x) ~ x * (1 + t * ${POLYNOMIAL})
  // on [-0x1.208p+2h, 0x1.208p+2] where t = x * x
  $for i in reversed(range(len(COEFFS))):
    const __m256 vc${i*2+P-len(COEFFS)*2+2} = _mm256_set1_ps(${COEFFS[i]}f);

  const uint16_t* i = (const uint16_t*) input;
  uint16_t* o = (uint16_t*) output;
  for (; n != 0; n -= 8 * sizeof(uint16_t)) {
    __m256 vx = _mm256_cvtph_ps(_mm_load_si128((const __m128i*) i));
    i += 8;

    // tanhh(x) saturates at -1 for large negative inputs and at +1 for large positive inputs: tanhh(x) == -1.0h for
    // x <= -0x1.208p+2 ~= -4.5078125 and tanhh(x) == 1.0h for x >= 0x1.208p+2 ~= 4.5078125. To guarantee this
    // behaviour, we clip input x on [neg_sat_cutoff, pos_sat_cutoff] containing [-0x1.208p+2, 0x1.208p+2], and
    // leverage the fact that for our implementation tanhh(neg_sat_cutoff) == -1.0h and tanhh(pos_sat_cutoff) == 1.0h.
    // NaN inputs are passed unchanged.
    vx = _mm256_max_ps(vneg_sat_cutoff, vx);
    vx = _mm256_min_ps(vpos_sat_cutoff, vx);

    // Compute t = x * x to use for polynomial evaluation
    const __m256 vt = _mm256_mul_ps(vx, vx);

    // Compute degree-${P} polynomial approximation for tanh(x) on [-0x1.208p+2, 0x1.208p+2].
    //   P(t) = ${POLYNOMIAL[1:-1]}
    $if FMA == 3:
      __m256 vp = vc${P};
      $for i in reversed(range(3, P, 2)):
        vp = _mm256_fmadd_ps(vp, vt, vc${i});
    $else:
      __m256 vp = _mm256_add_ps(_mm256_mul_ps(vc${P}, vt), vc${P-2});
      $for i in reversed(range(3, P-2, 2)):
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vt), vc${i});

    // Reconstruct the tanh(x) value:
    //   tanh(x) ~ x * (1 + t * P(t))
    //           = x + (x * t) * P(t)
    const __m256 vxt = _mm256_mul_ps(vx, vt);
    $if FMA == 3:
      const __m256 vy = _mm256_fmadd_ps(vp, vxt, vx);
    $else:
      const __m256 vy = _mm256_add_ps(_mm256_mul_ps(vp, vxt), vx);

    _mm_storeu_si128((__m128i*) o, _mm256_cvtps_ph(vy, _MM_FROUND_TO_NEAREST_INT));
    o += 8;
  }
}
