// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR == 8
$assert NR % 8 == 0
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <immintrin.h>

#include "xnnpack/intrinsics-polyfill.h"
#include "xnnpack/packw.h"
$if PREFETCH:
  #include "xnnpack/prefetch.h"


void xnn_x32_packw_gemm_gio_ukernel_x${NR}__avx${"_u" if KBLOCK else ""}${KBLOCK if KBLOCK else ""}${"_prfm" if PREFETCH else ""}(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  size_t k_stride,
  const uint32_t* weights,
  const uint32_t* bias,
  const void* scale,
  uint32_t* packed_weights,
  size_t extra_bytes,
  const void* params)
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});   // This kernel is for NR=${NR}
  assert(kr == 1);
  assert(sr == 1);
  assert(k_stride != 0);
  assert(weights != NULL);
  assert(packed_weights != NULL);

  static const int32_t mask_table[${NR+8}] = {
    $for N in range(0,NR,8):
      -1, -1, -1, -1, -1, -1, -1, -1,
    0, 0, 0, 0, 0, 0, 0, 0};

  const float* b = (const float*) bias;
  float* packed_w = (float*) packed_weights;
  do {
    // NC main loop multiple of ${NR}
    const float* w = (const float*) weights;
    size_t n = nc;

    for (; n >= ${NR}; n -= ${NR}) {
      if XNN_LIKELY(b != NULL) {
        $for N in range(0,NR,8):
          const __m256 vb${N} = _mm256_loadu_ps(b + ${N});
        $for N in range(0,NR,8):
          _mm256_store_ps(packed_w + ${N}, vb${N});
        b += ${NR};
      } else {
        const __m256 vzero = _mm256_setzero_ps();
        $for N in range(0,NR,8):
          _mm256_store_ps(packed_w + ${N}, vzero);
      }
      packed_w += ${NR};

      // KC main loop
      size_t k = kc;
      $if KBLOCK:
        for (; k >= ${KBLOCK}; k -= ${KBLOCK}) {
          $for N in range(0,NR,8):
            $for K in range(0,KBLOCK):
              const __m256 v${N}_${K} = _mm256_loadu_ps(w + ${N} + ${K} * k_stride);
          $for N in range(0,NR,8):
            $for K in range(0,KBLOCK):
              _mm256_store_ps(packed_w + ${N} + ${K} * ${NR}, v${N}_${K});
          w += k_stride * ${KBLOCK};
          packed_w += ${NR} * ${KBLOCK};
        }

      for (; k > 0; --k) {
        $for N in range(0,NR,8):
          const __m256 v${N} = _mm256_loadu_ps(w + ${N});
        $for N in range(0,NR,8):
          _mm256_store_ps(packed_w + ${N}, v${N});
        w += k_stride;
        packed_w += ${NR};
      }
      w = w - kc * k_stride + 8;  // Advance to next column of 8 floats
    }

    // NC remainder (1..${NR-1})
    if XNN_UNLIKELY(n != 0) {
      assert(n >= 1);
      assert(n <= ${NR-1});
      if XNN_LIKELY(b != NULL) {
        size_t nb = n;
        do {
          *packed_w++  = *b++;
        } while (--nb != 0);
        packed_w += (${NR} - n);
      } else {
        const __m256 vzero = _mm256_setzero_ps();
        _mm256_store_ps(packed_w, vzero);
        $for N in range(8,NR,8):
          _mm256_store_ps(packed_w + ${N}, vzero);
        packed_w += ${NR};
      }

      $for N in range(0,NR,8):
        const __m256i vmask${N} = _mm256_loadu_si256((const __m256i*) &mask_table[${NR} -n]);

      // KC main loop
      for (size_t k = kc; k > 0; --k) {
        $for N in range(0,NR,8):
          const __m256 v${N} = _mm256_maskload_ps(w + ${N}, vmask${N});
        $for N in range(0,NR,8):
          _mm256_maskstore_ps(packed_w + ${N}, vmask${N}, v${N});
        w += k_stride;
        packed_w += ${NR};
      }
    }
    weights += nc * kc;
  } while (--g != 0);
}
