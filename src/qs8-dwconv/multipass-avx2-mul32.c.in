// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert REQUANTIZATION == "FP32"
$assert DATATYPE in ["QC8", "QS8", "QU8"]
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert CHANNEL_TILE % 8 == 0
$assert CHANNEL_TILE >= 8
$CHANNEL_SUBTILE = 8
$assert CHANNEL_TILE % CHANNEL_SUBTILE == 0
$CHANNEL_ROUND = 8
$assert MIDDLE_PASS_TILE <= LAST_PASS_TILE
$assert FIRST_PASS_TILE >= 1
$assert MIDDLE_PASS_TILE >= 1
$assert LAST_PASS_TILE >= 1
#include <assert.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/dwconv.h"
#include "xnnpack/math.h"
#include "xnnpack/unaligned.h"


$DATATYPE_SPEC = {"QS8": "qs8", "QC8": "qs8_qc8w", "QU8": "qu8"}[DATATYPE]
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_scalar"
$PARAMS_TYPE = "union xnn_qs8_qc8w_conv_minmax_params" if DATATYPE == "QC8" else "union xnn_%s_conv_minmax_params" % DATATYPE.lower()
$XINT8_T = "uint8_t" if DATATYPE == "QU8" else "int8_t"
$_MM256_CVTEPX8_EPI32 = "_mm256_cvtepu8_epi32" if DATATYPE == "QU8" else "_mm256_cvtepi8_epi32"
$_MM_PACKXS_EPI16 = "_mm_packus_epi16" if DATATYPE == "QU8" else "_mm_packs_epi16"
$_MM_MAX_EPX8 = "_mm_max_epu8" if DATATYPE == "QU8" else "_mm_max_epi8"
void xnn_${DATATYPE_SPEC}_dwconv_minmax_${REQUANTIZATION.lower()}_ukernel_${FIRST_PASS_TILE}f${MIDDLE_PASS_TILE}m${LAST_PASS_TILE}l${CHANNEL_TILE}c${CHANNEL_SUBTILE}s${CHANNEL_ROUND}r__avx2_mul32(
    size_t channels,
    size_t output_width,
    const ${XINT8_T}** input,
    const void* weights,
    ${XINT8_T}* output,
    intptr_t input_stride,
    size_t output_increment,
    size_t input_offset,
    const ${XINT8_T}* zero,
    size_t kernel_size,
    int32_t* buffer,
    const ${PARAMS_TYPE} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(channels != 0);
  assert(output_width != 0);
  assert(kernel_size > ${FIRST_PASS_TILE});

  $if DATATYPE == "QU8":
    const __m256i vk_zero_point = _mm256_set1_epi32(params->${PARAMS_STRUCT}.kernel_zero_point);
    XNN_FORCE_REALIZATION(vk_zero_point);

  $if DATATYPE != "QC8":
    const __m256 vscale = _mm256_set1_ps(params->${PARAMS_STRUCT}.scale);
    XNN_FORCE_REALIZATION(vscale);
  const __m256 voutput_max_less_zero_point = _mm256_set1_ps((int32_t) params->${PARAMS_STRUCT}.output_max - (int32_t) params->${PARAMS_STRUCT}.output_zero_point);
  $if CHANNEL_TILE > 8:
    const __m256i voutput_zero_point = _mm256_set1_epi16(params->${PARAMS_STRUCT}.output_zero_point);
  $else:
    const __m128i voutput_zero_point = _mm_set1_epi16(params->${PARAMS_STRUCT}.output_zero_point);
  const __m128i voutput_min = _mm_set1_epi8(params->${PARAMS_STRUCT}.output_min);
  XNN_FORCE_REALIZATION(voutput_max_less_zero_point);
  XNN_FORCE_REALIZATION(voutput_zero_point);
  XNN_FORCE_REALIZATION(voutput_min);

  do {
    const void* w = weights;

    // First pass to process ${FIRST_PASS_TILE} inputs.
    {
      int32_t* b = buffer;
      $for K in range(FIRST_PASS_TILE):
        const ${XINT8_T}* i${K} = input[${K}];
        assert(i${K} != NULL);
        if XNN_UNPREDICTABLE(i${K} != zero) {
          i${K} = (const ${XINT8_T}*) ((uintptr_t) i${K} + input_offset);
        }
      input += ${FIRST_PASS_TILE};

      size_t c = round_up_po2(channels, ${CHANNEL_ROUND});

      for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
        __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) w);
        $for C in range(8, CHANNEL_TILE, 8):
          __m256i vacc${ABC[C:C+8]} = _mm256_loadu_si256((const __m256i*) ((const int32_t*) w + ${C}));

        $for K in range(FIRST_PASS_TILE):

          $for C in range(0, CHANNEL_TILE, 8):
            $if C == 0:
              const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
            $else:
              const __m256i vi${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) (i${K} + ${C})));
            $if DATATYPE == "QU8":
              const __m256i vk${K}x${ABC[C:C+8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T})))), vk_zero_point);
            $else:
              const __m256i vk${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T}))));
          i${K} += ${CHANNEL_TILE};

          $for C in range(0, CHANNEL_TILE, 8):
            vacc${ABC[C:C+8]} = _mm256_add_epi32(vacc${ABC[C:C+8]}, _mm256_mullo_epi32(vi${K}x${ABC[C:C+8]}, vk${K}x${ABC[C:C+8]}));

        w = (const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${FIRST_PASS_TILE * CHANNEL_TILE} * sizeof(${XINT8_T}));

        _mm256_storeu_si256((__m256i*) b, vacc${ABC[0:8]});
        $for C in range(8, CHANNEL_TILE, 8):
          _mm256_storeu_si256((__m256i*) (b + ${C}), vacc${ABC[C:C+8]});
        b += ${CHANNEL_TILE};
      }

      $if CHANNEL_TILE == 8:
          assert(c == 0);
      $else:
        if XNN_UNLIKELY(c != 0) {
          ${"do " if CHANNEL_TILE > 8 else ""}{
            __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) w);
            $for K in range(FIRST_PASS_TILE):

              const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
              $if DATATYPE == "QU8":
                $if K == 0:
                  const __m256i vk${K}x${ABC[0:8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_SUBTILE} * sizeof(int32_t)))), vk_zero_point);
                $else:
                  const __m256i vk${K}x${ABC[0:8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_SUBTILE} * sizeof(int32_t) + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T})))), vk_zero_point);
              $else:
                $if K == 0:
                  const __m256i vk${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_SUBTILE} * sizeof(int32_t))));
                $else:
                  const __m256i vk${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${CHANNEL_SUBTILE} * sizeof(int32_t) + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T}))));
              $if CHANNEL_TILE > 8:
                i${K} += 8;

              vacc${ABC[0:8]} = _mm256_add_epi32(vacc${ABC[0:8]}, _mm256_mullo_epi32(vi${K}x${ABC[0:8]}, vk${K}x${ABC[0:8]}));

            w = (const void*) ((uintptr_t) w + ${CHANNEL_SUBTILE} * sizeof(int32_t) + ${FIRST_PASS_TILE * CHANNEL_SUBTILE} * sizeof(${XINT8_T}));

            _mm256_storeu_si256((__m256i*) b, vacc${ABC[0:8]});
            b += 8;
            c -= 8;
          }${" while (c != 0);" if CHANNEL_TILE > 8 else ""}
        }
    }

    // Middle pass to process ${MIDDLE_PASS_TILE} inputs in each iteration.
    for (size_t ks = kernel_size - ${FIRST_PASS_TILE}; ks > ${LAST_PASS_TILE}; ks -= ${MIDDLE_PASS_TILE}) {
      int32_t* b = buffer;
      $for K in range(MIDDLE_PASS_TILE):
        const ${XINT8_T}* i${K} = input[${K}];
        assert(i${K} != NULL);
        if XNN_UNPREDICTABLE(i${K} != zero) {
          i${K} = (const ${XINT8_T}*) ((uintptr_t) i${K} + input_offset);
        }
      input += ${MIDDLE_PASS_TILE};

      size_t c = round_up_po2(channels, ${CHANNEL_ROUND});

      for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
        __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) b);
        $for C in range(8, CHANNEL_TILE, 8):
          __m256i vacc${ABC[C:C+8]} = _mm256_loadu_si256((const __m256i*) (b + ${C}));

        $for K in range(MIDDLE_PASS_TILE):

          $for C in range(0, CHANNEL_TILE, 8):
            $if C == 0:
              const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
            $else:
              const __m256i vi${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) (i${K} + ${C})));
            $if DATATYPE == "QU8":
              const __m256i vk${K}x${ABC[C:C+8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T})))), vk_zero_point);
            $else:
              const __m256i vk${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T}))));
          i${K} += ${CHANNEL_TILE};

          $for C in range(0, CHANNEL_TILE, 8):
            vacc${ABC[C:C+8]} = _mm256_add_epi32(vacc${ABC[C:C+8]}, _mm256_mullo_epi32(vi${K}x${ABC[C:C+8]}, vk${K}x${ABC[C:C+8]}));

        w = (const void*) ((uintptr_t) w + ${MIDDLE_PASS_TILE * CHANNEL_TILE} * sizeof(${XINT8_T}));

        _mm256_storeu_si256((__m256i*) b, vacc${ABC[0:8]});
        $for C in range(8, CHANNEL_TILE, 8):
          _mm256_storeu_si256((__m256i*) (b + ${C}), vacc${ABC[C:C+8]});
        b += ${CHANNEL_TILE};
      }

      $if CHANNEL_TILE == 8:
          assert(c == 0);
      $else:
        if XNN_UNLIKELY(c != 0) {
          ${"do " if CHANNEL_TILE > 8 else ""}{
            __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) b);
            $for K in range(MIDDLE_PASS_TILE):

              const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
              $if DATATYPE == "QU8":
                $if K == 0:
                  const __m256i vk${K}x${ABC[0:8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w))), vk_zero_point);
                $else:
                  const __m256i vk${K}x${ABC[0:8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T})))), vk_zero_point);
              $else:
                $if K == 0:
                  const __m256i vk${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w)));
                $else:
                  const __m256i vk${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T}))));
              $if CHANNEL_TILE > 8:
                i${K} += 8;

              vacc${ABC[0:8]} = _mm256_add_epi32(vacc${ABC[0:8]}, _mm256_mullo_epi32(vi${K}x${ABC[0:8]}, vk${K}x${ABC[0:8]}));

            w = (const void*) ((uintptr_t) w + ${MIDDLE_PASS_TILE * CHANNEL_SUBTILE} * sizeof(${XINT8_T}));

            _mm256_storeu_si256((__m256i*) b, vacc${ABC[0:8]});
            b += 8;
            c -= 8;
          }${" while (c != 0);" if CHANNEL_TILE > 8 else ""}
        }
    }

    // Last pass to process up to ${LAST_PASS_TILE} inputs.
    {
      const int32_t* b = buffer;
      $for K in range(LAST_PASS_TILE):
        const ${XINT8_T}* i${K} = input[${K}];
        assert(i${K} != NULL);
        if XNN_UNPREDICTABLE(i${K} != zero) {
          i${K} = (const ${XINT8_T}*) ((uintptr_t) i${K} + input_offset);
        }

      size_t c = channels;

      for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
        __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) b);
        $for C in range(8, CHANNEL_TILE, 8):
          __m256i vacc${ABC[C:C+8]} = _mm256_loadu_si256((const __m256i*) (b + ${C}));
        b += ${CHANNEL_TILE};

        $for K in range(LAST_PASS_TILE):

          $for C in range(0, CHANNEL_TILE, 8):
            $if C == 0:
              const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
            $else:
              const __m256i vi${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) (i${K} + ${C})));
            $if DATATYPE == "QU8":
              const __m256i vk${K}x${ABC[C:C+8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T})))), vk_zero_point);
            $else:
              const __m256i vk${K}x${ABC[C:C+8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_TILE + C} * sizeof(${XINT8_T}))));
          i${K} += ${CHANNEL_TILE};

          $for C in range(0, CHANNEL_TILE, 8):
            vacc${ABC[C:C+8]} = _mm256_add_epi32(vacc${ABC[C:C+8]}, _mm256_mullo_epi32(vi${K}x${ABC[C:C+8]}, vk${K}x${ABC[C:C+8]}));

        w = (const void*) ((uintptr_t) w + ${LAST_PASS_TILE * CHANNEL_TILE} * sizeof(${XINT8_T}));

        $for C in range(0, CHANNEL_TILE, 8):
          __m256 vscaled${ABC[C:C+8]} = _mm256_cvtepi32_ps(vacc${ABC[C:C+8]});

        $if DATATYPE == "QC8":
          const __m256 vscale${ABC[0:8]} = _mm256_loadu_ps((const float*) w);
          $for C in range(8, CHANNEL_TILE, 8):
            const __m256 vscale${ABC[C:C+8]} = _mm256_loadu_ps((const float*) w + ${C});
          w = (const void*) ((const float*) w + ${CHANNEL_TILE});
          $for C in range(0, CHANNEL_TILE, 8):
            vscaled${ABC[C:C+8]} = _mm256_mul_ps(vscaled${ABC[C:C+8]}, vscale${ABC[C:C+8]});
        $else:
          $for C in range(0, CHANNEL_TILE, 8):
            vscaled${ABC[C:C+8]} = _mm256_mul_ps(vscaled${ABC[C:C+8]}, vscale);

        $for C in range(0, CHANNEL_TILE, 8):
          vscaled${ABC[C:C+8]} = _mm256_min_ps(vscaled${ABC[C:C+8]}, voutput_max_less_zero_point);

        $for C in range(0, CHANNEL_TILE, 8):
          vacc${ABC[C:C+8]} = _mm256_cvtps_epi32(vscaled${ABC[C:C+8]});

        $for C in range(0, CHANNEL_TILE, 16):
          $if C + 8 < CHANNEL_TILE:
            __m256i vout${ABC[C:C+4]}${ABC[C+8:C+12]}${ABC[C+4:C+8]}${ABC[C+12:C+16]} = _mm256_adds_epi16(_mm256_packs_epi32(vacc${ABC[C:C+8]}, vacc${ABC[C+8:C+16]}), voutput_zero_point);
          $elif CHANNEL_TILE > 8:
            __m128i vout${ABC[C:C+8]} = _mm_adds_epi16(_mm_packs_epi32(_mm256_castsi256_si128(vacc${ABC[C:C+8]}), _mm256_extracti128_si256(vacc${ABC[C:C+8]}, 1)), _mm256_castsi256_si128(voutput_zero_point));
          $else:
            __m128i vout${ABC[C:C+8]} = _mm_adds_epi16(_mm_packs_epi32(_mm256_castsi256_si128(vacc${ABC[C:C+8]}), _mm256_extracti128_si256(vacc${ABC[C:C+8]}, 1)), voutput_zero_point);

        $for C in range(0, CHANNEL_TILE, 16):
          $if C + 8 < CHANNEL_TILE:
            __m128i vout${ABC[C:C+16]} = _mm_shuffle_epi32(${_MM_PACKXS_EPI16}(_mm256_castsi256_si128(vout${ABC[C:C+4]}${ABC[C+8:C+12]}${ABC[C+4:C+8]}${ABC[C+12:C+16]}), _mm256_extracti128_si256(vout${ABC[C:C+4]}${ABC[C+8:C+12]}${ABC[C+4:C+8]}${ABC[C+12:C+16]}, 1)), _MM_SHUFFLE(3, 1, 2, 0));
          $else:
            __m128i vout${ABC[C:C+8]}${ABC[C:C+8]} = ${_MM_PACKXS_EPI16}(vout${ABC[C:C+8]}, vout${ABC[C:C+8]});

        $for C in range(0, CHANNEL_TILE, 16):
          $if C + 8 < CHANNEL_TILE:
            vout${ABC[C:C+16]} = ${_MM_MAX_EPX8}(vout${ABC[C:C+16]}, voutput_min);
          $else:
            vout${ABC[C:C+8]}${ABC[C:C+8]} = ${_MM_MAX_EPX8}(vout${ABC[C:C+8]}${ABC[C:C+8]}, voutput_min);

        $if CHANNEL_TILE > 8:
          _mm_storeu_si128((__m128i*) output, vout${ABC[0:16]});
        $else:
          _mm_storel_epi64((__m128i*) output, vout${ABC[0:8]}${ABC[C:C+8]});
        $for C in range(16, CHANNEL_TILE, 16):
          $if C + 8 < CHANNEL_TILE:
            _mm_storeu_si128((__m128i*) (output + ${C}), vout${ABC[C:C+16]});
          $else:
            _mm_storel_epi64((__m128i*) (output + ${C}), vout${ABC[C:C+8]}${ABC[C:C+8]});
        output += ${CHANNEL_TILE};
      }

      if XNN_UNLIKELY(c != 0) {
        ${"do " if CHANNEL_TILE > 8 else ""}{
          __m256i vacc${ABC[0:8]} = _mm256_loadu_si256((const __m256i*) b);
          b += 8;
          $for K in range(LAST_PASS_TILE):

            const __m256i vi${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) i${K}));
            $if DATATYPE == "QU8":
              const __m256i vk${K}x${ABC[0:8]} = _mm256_sub_epi32(${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T})))), vk_zero_point);
            $else:
              const __m256i vk${K}x${ABC[0:8]} = ${_MM256_CVTEPX8_EPI32}(_mm_loadl_epi64((const __m128i*) ((uintptr_t) w + ${K * CHANNEL_SUBTILE} * sizeof(${XINT8_T}))));
            $if CHANNEL_TILE > 8:
              i${K} += 8;

            vacc${ABC[0:8]} = _mm256_add_epi32(vacc${ABC[0:8]}, _mm256_mullo_epi32(vi${K}x${ABC[0:8]}, vk${K}x${ABC[0:8]}));

          __m256 vscaled${ABC[0:8]} = _mm256_cvtepi32_ps(vacc${ABC[0:8]});
          $if DATATYPE == "QC8":
            const __m256 vscale${ABC[0:8]} = _mm256_loadu_ps((const float*) ((uintptr_t) w + ${CHANNEL_SUBTILE * LAST_PASS_TILE} * sizeof(${XINT8_T})));
            vscaled${ABC[0:8]} = _mm256_mul_ps(vscaled${ABC[0:8]}, vscale${ABC[0:8]});
          $else:
            vscaled${ABC[0:8]} = _mm256_mul_ps(vscaled${ABC[0:8]}, vscale);
          vscaled${ABC[0:8]} = _mm256_min_ps(vscaled${ABC[0:8]}, voutput_max_less_zero_point);
          vacc${ABC[0:8]} = _mm256_cvtps_epi32(vscaled${ABC[0:8]});

          $if CHANNEL_TILE > 8:
            $if DATATYPE == "QC8":
              w = (void*) ((uintptr_t) w + ${LAST_PASS_TILE * CHANNEL_SUBTILE} * sizeof(${XINT8_T}) + 8 * sizeof(float));
            $else:
              w = (void*) ((uintptr_t) w + ${LAST_PASS_TILE * CHANNEL_SUBTILE} * sizeof(${XINT8_T}));

            __m128i vout${ABC[0:8]} = _mm_adds_epi16(_mm_packs_epi32(_mm256_castsi256_si128(vacc${ABC[0:8]}), _mm256_extracti128_si256(vacc${ABC[0:8]}, 1)), _mm256_castsi256_si128(voutput_zero_point));
          $else:
            __m128i vout${ABC[0:8]} = _mm_adds_epi16(_mm_packs_epi32(_mm256_castsi256_si128(vacc${ABC[0:8]}), _mm256_extracti128_si256(vacc${ABC[0:8]}, 1)), voutput_zero_point);

          __m128i vout${ABC[0:8]}${ABC[0:8]} = ${_MM_PACKXS_EPI16}(vout${ABC[0:8]}, vout${ABC[0:8]});

          vout${ABC[0:8]}${ABC[0:8]} = ${_MM_MAX_EPX8}(vout${ABC[0:8]}${ABC[0:8]}, voutput_min);

          $if CHANNEL_TILE > 8:
            if XNN_LIKELY(c >= 8) {
              _mm_storel_epi64((__m128i*) output, vout${ABC[0:8]}${ABC[0:8]});
              output += 8;
              c -= 8;
            } else {
              if (c & 4) {
                unaligned_store_u32(output, (uint32_t) _mm_cvtsi128_si32(vout${ABC[0:8]}${ABC[0:8]}));
                vout${ABC[0:8]}${ABC[0:8]} = _mm_srli_epi64(vout${ABC[0:8]}${ABC[0:8]}, 32);
                output += 4;
              }
              if (c & 2) {
                unaligned_store_u16(output, (uint16_t) _mm_extract_epi16(vout${ABC[0:8]}${ABC[0:8]}, 0));
                vout${ABC[0:8]}${ABC[0:8]} = _mm_srli_epi32(vout${ABC[0:8]}${ABC[0:8]}, 16);
                output += 2;
              }
              if (c & 1) {
                *output = (${XINT8_T}) _mm_extract_epi8(vout${ABC[0:8]}${ABC[0:8]}, 0);
                output += 1;
              }
              c = 0;
            }
          $else:
            if (c & 4) {
              unaligned_store_u32(output, (uint32_t) _mm_cvtsi128_si32(vout${ABC[0:8]}${ABC[0:8]}));
              vout${ABC[0:8]}${ABC[0:8]} = _mm_srli_epi64(vout${ABC[0:8]}${ABC[0:8]}, 32);
              output += 4;
            }
            if (c & 2) {
              unaligned_store_u16(output, (uint16_t) _mm_extract_epi16(vout${ABC[0:8]}${ABC[0:8]}, 0));
              vout${ABC[0:8]}${ABC[0:8]} = _mm_srli_epi32(vout${ABC[0:8]}${ABC[0:8]}, 16);
              output += 2;
            }
            if (c & 1) {
              *output = (${XINT8_T}) _mm_extract_epi8(vout${ABC[0:8]}${ABC[0:8]}, 0);
              output += 1;
            }
        }${" while (c != 0);" if CHANNEL_TILE > 8 else ""}
      }
    }

    input = (const ${XINT8_T}**) ((uintptr_t) input + input_stride);
    output = (${XINT8_T}*) ((uintptr_t) output + output_increment);
  } while (--output_width != 0);
}
