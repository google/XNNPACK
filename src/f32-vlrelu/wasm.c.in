// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include "xnnpack/common.h"
#include "xnnpack/vunary.h"


void xnn_f32_vlrelu_ukernel__wasm_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_lrelu_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const float vslope = params->scalar.slope;
  const float vzero = 0.0f;

  $if BATCH_TILE > 1:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      $for N in range(BATCH_TILE):
        const float vx${ABC[N]} = input[${N}];
      input += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        const float vnegx${ABC[N]} = __builtin_wasm_min_f32(vx${ABC[N]}, vzero);

      $for N in range(BATCH_TILE):
        float vacc${ABC[N]} = vnegx${ABC[N]} * vslope;
        const float vposx${ABC[N]} = __builtin_wasm_max_f32(vx${ABC[N]}, vzero);

      $for N in range(BATCH_TILE):
        vacc${ABC[N]} += vposx${ABC[N]};

      $for N in range(BATCH_TILE):
        output[${N}] = vacc${ABC[N]};
      output += ${BATCH_TILE};
    }
    if XNN_UNLIKELY(batch != 0) {
      $if BATCH_TILE > 2:
        do {
          const float vx = *input++;
          const float vnegx = __builtin_wasm_min_f32(vx, vzero);
          float vacc = vnegx * vslope;
          const float vposx = __builtin_wasm_max_f32(vx, vzero);
          vacc += vposx;
          *output++ = vacc;
          batch -= sizeof(float);
        } while (batch != 0);
      $else:
        const float vx = *input;
        const float vnegx = __builtin_wasm_min_f32(vx, vzero);
        float vacc = vnegx * vslope;
        const float vposx = __builtin_wasm_max_f32(vx, vzero);
        vacc += vposx;
        *output = vacc;
    }
  $else:
    do {
      const float vx = *input++;
      const float vnegx = __builtin_wasm_min_f32(vx, vzero);
      float vacc = vnegx * vslope;
      const float vposx = __builtin_wasm_max_f32(vx, vzero);
      vacc += vposx;
      *output++ = vacc;
      batch -= sizeof(float);
    } while (batch != 0);
}
