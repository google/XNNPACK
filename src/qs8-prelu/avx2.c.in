// Copyright (C) 2024 Intel Corporation
//  
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//  
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//  
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
// OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
// SPDX-License-Identifier: BSD-3-Clause

$assert DATATYPE in ["QS8", "QU8"]
$assert CHANNEL_TILE > 0
$assert ROW_TILE >= 2

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/intrinsics-polyfill.h"
#include "xnnpack/math.h"
#include "xnnpack/prelu.h"

$XINT8_T = {"QS8": "int8_t", "QU8": "uint8_t"}[DATATYPE]
$_MM256_CVTEPX8_EPI16 = {"QS8": "_mm256_cvtepi8_epi16", "QU8": "_mm256_cvtepu8_epi16"}[DATATYPE]
$_MM256_PACKXS_EPI16 = {"QS8": "_mm256_packs_epi16", "QU8": "_mm256_packus_epi16"}[DATATYPE]
$_MM_PACKXS_EPI16 = {"QS8": "_mm_packs_epi16", "QU8": "_mm_packus_epi16"}[DATATYPE]

void xnn_${DATATYPE.lower()}_prelu_ukernel__avx2_${ROW_TILE}x${CHANNEL_TILE}(
    size_t rows,
    size_t channels,
    const ${XINT8_T}* restrict input,
    size_t input_stride,
    const void* restrict weights,
    ${XINT8_T}* restrict output,
    size_t output_stride,
    const struct xnn_${DATATYPE.lower()}_prelu_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(rows != 0);
  assert(channels != 0);
  assert(channels % sizeof(${XINT8_T}) == 0);
  assert(input != NULL);
  assert(output != NULL);
  
  const ${XINT8_T}* i0 = (const ${XINT8_T}*) input;
  ${XINT8_T}* o0 = (${XINT8_T}*) output;
  const __m256i vinput_zero_point = _mm256_set1_epi16(params->scalar.input_zero_point);
  const __m256i vpositive_multiplier = _mm256_set1_epi16(params->scalar.positive_multiplier);
  const __m256i voutput_zero_point = _mm256_set1_epi16(params->scalar.output_zero_point);

  const ${XINT8_T}* i1 = (const ${XINT8_T}*) ((uintptr_t) i0 + input_stride);
  ${XINT8_T}* o1 = (${XINT8_T}*) ((uintptr_t) o0 + output_stride);

  const size_t input_increment = input_stride * 2 - channels;
  const size_t output_increment = output_stride * 2 - channels;

  do {
    $for M in range(1, ROW_TILE):
      $if M % 2 == 0:
        if XNN_UNPREDICTABLE(rows <= ${M}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }
      $else:
        if XNN_UNPREDICTABLE(rows < ${M+1}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }

    const int16_t* w = weights;
    size_t c = channels;

    for (; c >= ${CHANNEL_TILE} * sizeof(${XINT8_T}); c -= ${CHANNEL_TILE} * sizeof(${XINT8_T})) {
        $for M in range(ROW_TILE):
            __m256i vacc${M} = ${_MM256_CVTEPX8_EPI16}(_mm_loadu_si128((const __m128i*) i${M}));
            i${M} += ${CHANNEL_TILE};

        const __m256i vnegative_multiplier = _mm256_loadu_si256((const __m256i*) w);
        w += ${CHANNEL_TILE};

        $for M in range(ROW_TILE):
            __m256i vmultiplier${M} = _mm256_cmpgt_epi16(vacc${M}, vinput_zero_point);
            vacc${M} = _mm256_sub_epi16(vinput_zero_point, vacc${M});

        $for M in range(ROW_TILE):
            vmultiplier${M} = _mm256_blendv_epi8(vnegative_multiplier, vpositive_multiplier, vmultiplier${M});
            vacc${M} = _mm256_slli_epi16(vacc${M}, 7);

        $for M in range(ROW_TILE):
            vacc${M} = _mm256_mulhrs_epi16(vacc${M}, vmultiplier${M});

        $for M in range(ROW_TILE):
            vacc${M} = _mm256_adds_epi16(vacc${M}, voutput_zero_point);

        $for M in range(ROW_TILE):
            const __m128i vacc${M}_hi = _mm256_extracti128_si256(vacc${M}, 1);
            const __m128i vy${M} = ${_MM_PACKXS_EPI16}(_mm256_castsi256_si128(vacc${M}), vacc${M}_hi);
            _mm_storeu_si128((__m128i*) o${M}, vy${M});
            o${M} += ${CHANNEL_TILE};
    }
    if XNN_UNLIKELY(c != 0) {
        assert(c >= 1 * sizeof(${XINT8_T}));
        assert(c <= 15 * sizeof(${XINT8_T}));

        $for M in range(ROW_TILE):
            __m256i vacc${M} = ${_MM256_CVTEPX8_EPI16}(_mm_loadu_si128((const __m128i*) i${M}));

        const __m256i vnegative_multiplier = _mm256_loadu_si256((const __m256i*) w);

        $for M in range(ROW_TILE):
            __m256i vmultiplier${M} = _mm256_cmpgt_epi16(vacc${M}, vinput_zero_point);
            vacc${M} = _mm256_sub_epi16(vinput_zero_point, vacc${M});

        $for M in range(ROW_TILE):
            vmultiplier${M} = _mm256_blendv_epi8(vnegative_multiplier, vpositive_multiplier, vmultiplier${M});
            vacc${M} = _mm256_slli_epi16(vacc${M}, 7);

        $for M in range(ROW_TILE):
            vacc${M} = _mm256_mulhrs_epi16(vacc${M}, vmultiplier${M});

        $for M in range(ROW_TILE):
            vacc${M} = _mm256_adds_epi16(vacc${M}, voutput_zero_point);

        $for M in range(ROW_TILE):
           const __m128i vacc${M}_hi = _mm256_extracti128_si256(vacc${M}, 1);
           __m128i vy${M} = ${_MM_PACKXS_EPI16}(_mm256_castsi256_si128(vacc${M}), vacc${M}_hi);

        if (c & (8 * sizeof(${XINT8_T}))) {
            $for M in range(ROW_TILE):
                _mm_storel_epi64((__m128i*) o${M}, vy${M});
                vy${M} = _mm_unpackhi_epi64(vy${M}, vy${M});
                o${M} += 8;
        }
        if (c & (4 * sizeof(${XINT8_T}))) {
            $for M in range(ROW_TILE):
                _mm_storeu_si32(o${M}, vy${M});
                vy${M} = _mm_srli_epi64(vy${M}, 32);
                o${M} += 4;
        }
        if (c & (2 * sizeof(${XINT8_T}))) {
            $for M in range(ROW_TILE):
                _mm_storeu_si16(o${M}, vy${M});
                vy${M} = _mm_srli_epi32(vy${M}, 16);
                o${M} += 2;
        }

        if (c & (1 * sizeof(${XINT8_T}))) {
            $for M in range(ROW_TILE):
                *o${M} = (${XINT8_T}) _mm_extract_epi8(vy${M}, 0);
                o${M} += 1;
        }
    }
    i0 = (const ${XINT8_T}*) ((uintptr_t) i0 + input_increment);
    o0 = (${XINT8_T}*) ((uintptr_t) o0 + output_increment);
    i1 = (const ${XINT8_T}*) ((uintptr_t) i1 + input_increment);
    o1 = (${XINT8_T}*) ((uintptr_t) o1 + output_increment);
    rows = doz(rows, 2);
  }while (rows != 0);
}
