// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR == 8
$assert KR == 8
$assert TYPE in ["int8_t"]

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <immintrin.h>

#include "xnnpack/packw.h"

$BITS = {"int8_t": 8}[TYPE]
$BTYPE = {"int8_t": "uint32_t"}[TYPE]
$WTYPE = {"int8_t": "int8_t"}[TYPE]
void xnn_qs${BITS}_packw_gemm_goi_ukernel_x${NR}c${KR}__avxvnniint8(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  const ${WTYPE}* weights,
  $if BITS == 8:
    const int32_t* bias,
  $else:
    const ${WTYPE}* bias,
  const void* scale,
  ${WTYPE}* packed_weights,
  size_t extra_bytes,
  const void* params)
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});
  assert(kr == ${KR});
  assert(sr == 1);
  assert(weights != NULL);
  assert(packed_weights != NULL);

// TODO: immintrin.h only provide _mm256_insert_epi64 for __x86_64__
#if defined(__x86_64__)
  ${TYPE}* out = (${TYPE}*) packed_weights;
  const ${BTYPE}* b = (const ${BTYPE}*) bias;
  $if BITS == 8:
    const int8_t izp = params ? ((const struct xnn_qs8_packw_params*) params)->input_zero_point : 0;
    __m256i vzeropoint = _mm256_set1_epi8(izp);

  do {
    // NC main loop multiple of ${NR}
    const ${TYPE}* w0 = (const ${TYPE}*) weights;
    size_t n = nc;
    for (;n >= ${NR}; n -= ${NR}) {
      __m256i vacc0124x8 = _mm256_setzero_si256();
      __m256i vacc4567x8 = _mm256_setzero_si256();

      $if BITS == 8:
        int32_t* packed_b = (int32_t*) out;
      if XNN_LIKELY(b != NULL) {
        const __m256i vb = _mm256_loadu_si256((const __m256i*) b);
        _mm256_storeu_si256((__m256i*) out, vb);
        b += ${NR};
      } else {
        _mm256_storeu_si256((__m256i*) out, _mm256_setzero_si256());
      }
      $if BTYPE == TYPE:
        out += ${NR};
      $else:
        out += ${NR} * sizeof(${BTYPE});

      $for N in range(1, NR):
        const ${TYPE}* w${N} = w${N-1} + kc;

      // KC main loop multiple of ${NR}x${KR}
      size_t k = kc;
      for (; k >= ${KR}; k -= ${KR}) {
        __m256i v0123x8 = _mm256_castsi128_si256(_mm_loadl_epi64((const __m128i *)w0));
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w1, 1);
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w2, 2);
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w3, 3);

        __m256i v4567x8 = _mm256_castsi128_si256(_mm_loadl_epi64((const __m128i *)w4));
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w5, 1);
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w6, 2);
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w7, 3);

        $if BITS == 8:
          vacc0124x8 = _mm256_dpbssd_epi32(vacc0124x8, v0123x8, vzeropoint);
          vacc4567x8 = _mm256_dpbssd_epi32(vacc4567x8, v4567x8, vzeropoint);

        _mm256_storeu_si256((__m256i *)&out[0],  v0123x8);
        _mm256_storeu_si256((__m256i *)&out[${4 * KR}],  v4567x8);

        $for N in range(NR):
          w${N} += ${KR};
        out += ${NR*KR};
      }

      // KC remainder 1..KR-1
      if (k != 0) {
        __m256i v0123x8 = vzeropoint;
        __m256i v4567x8 = vzeropoint;

        if (k & 4) {
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w0, 0);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w1, 2);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w2, 4);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w3, 6);

          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w4, 0);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w5, 2);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w6, 4);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w7, 6);
          $for N in range(NR):
            w${N} += 4;
        }
        if (k & 2) {
          if (k & 4) {
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w0, 2);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w1, 6);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w2, 10);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w3, 14);

            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w4, 2);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w5, 6);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w6, 10);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w7, 14);
          } else {
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w0, 0);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w1, 4);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w2, 8);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w3, 12);

            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w4, 0);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w5, 4);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w6, 8);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w7, 12);
          }

          $for N in range(NR):
            w${N} += 2;
        }
        if (k & 1) {
          if ((k & 4) && (k & 2)) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 6);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 14);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 22);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 30);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 6);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 14);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 22);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 30);
          }
          else if (k & 4) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 4);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 12);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 20);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 28);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 4);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 12);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 20);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 28);
          }
          else if (k & 2) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 2);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 10);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 18);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 26);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 2);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 10);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 18);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 26);
          }
          else {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 0);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 8);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 16);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 24);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 0);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 8);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 16);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 24);
          }

          $for N in range(NR):
            w${N} += 1;
        }

        $if BITS == 8:
          vacc0124x8 = _mm256_dpbssd_epi32(vacc0124x8, v0123x8, vzeropoint);
          vacc4567x8 = _mm256_dpbssd_epi32(vacc4567x8, v4567x8, vzeropoint);

        _mm256_storeu_si256((__m256i *)&out[0],  v0123x8);
        _mm256_storeu_si256((__m256i *)&out[${4 * KR}],  v4567x8);

        out += ${NR*KR};
      }

      $if BITS == 8:
        __m256i vksum = _mm256_hadd_epi32(vacc0124x8, vacc4567x8);
        vksum = _mm256_permute4x64_epi64(vksum, _MM_SHUFFLE(3, 1, 2, 0));
        __m256i vpack =  _mm256_loadu_si256((const __m256i*) packed_b);
        _mm256_storeu_si256((__m256i *)packed_b, _mm256_sub_epi32(vpack, vksum));
      out = (${TYPE}*) ((uintptr_t) out + extra_bytes);
      w0 = w${NR-1};
    }

    // NC remainder (1..${NR-1})
    if XNN_UNLIKELY(n != 0) {
      $if BITS == 8:
        int32_t* packed_b = (int32_t*) out;
      if XNN_LIKELY(b != NULL) {
        size_t nb = n;
        do {
          $if BTYPE == TYPE:
            *out++ = *b++;
          $else:
            *((${BTYPE}*) out) = *b++;
            out += sizeof(${BTYPE});
        } while (--nb != 0);
      } else {
        size_t nb = n;
        do {
          $if BTYPE == TYPE:
            *out++ = 0;
          $else:
            *((${BTYPE}*) out) = 0;
            out += sizeof(${BTYPE});
        } while (--nb != 0);
      }
      $if BTYPE == TYPE:
        out += (${NR} - n);
      $else:
        out += (${NR} - n) * sizeof(${BTYPE});

     $if NR > 2:
      $for N in range(1, NR):
        const ${TYPE}* w${N} = w${N-1} + kc;
        $if N % 2 == 0:
          if XNN_UNPREDICTABLE(n <= ${N}) {
            w${N} = w${N-1};
          }
        $else:
          if XNN_UNPREDICTABLE(n < ${N+1}) {
            w${N} = w${N-1};
          }

      $if BITS == 8:
        __m256i vacc0124x8 = _mm256_setzero_si256();
        __m256i vacc4567x8 = _mm256_setzero_si256();

      // KC main loop multiple of ${NR}x${KR}
      size_t k = kc;
      for (; k >= ${KR}; k -= ${KR}) {
        __m256i v0123x8 = _mm256_castsi128_si256(_mm_loadl_epi64((const __m128i *)w0));
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w1, 1);
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w2, 2);
        v0123x8 = _mm256_insert_epi64(v0123x8, *(const int64_t *)w3, 3);

        __m256i v4567x8 = _mm256_castsi128_si256(_mm_loadl_epi64((const __m128i *)w4));
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w5, 1);
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w6, 2);
        v4567x8 = _mm256_insert_epi64(v4567x8, *(const int64_t *)w7, 3);

        $if BITS == 8:
          vacc0124x8 = _mm256_dpbssd_epi32(vacc0124x8, v0123x8, vzeropoint);
          vacc4567x8 = _mm256_dpbssd_epi32(vacc4567x8, v4567x8, vzeropoint);

        _mm256_storeu_si256((__m256i *)&out[0],  v0123x8);
        _mm256_storeu_si256((__m256i *)&out[${4 * KR}],  v4567x8);

        $for N in range(NR):
          w${N} += ${KR};
        out += ${NR*KR};
      }

      // KC remainder of 1..${KR-1}
      if (k != 0) {
        __m256i v0123x8 = vzeropoint;
        __m256i v4567x8 = vzeropoint;

        if (k & 4) {
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w0, 0);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w1, 2);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w2, 4);
          v0123x8 = _mm256_insert_epi32(v0123x8, *(const int32_t *)w3, 6);

          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w4, 0);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w5, 2);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w6, 4);
          v4567x8 = _mm256_insert_epi32(v4567x8, *(const int32_t *)w7, 6);
          $for N in range(NR):
            w${N} += 4;
        }
        if (k & 2) {
          if (k & 4) {
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w0, 2);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w1, 6);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w2, 10);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w3, 14);

            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w4, 2);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w5, 6);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w6, 10);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w7, 14);
          } else {
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w0, 0);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w1, 4);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w2, 8);
            v0123x8 = _mm256_insert_epi16(v0123x8, *(const int16_t *)w3, 12);

            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w4, 0);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w5, 4);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w6, 8);
            v4567x8 = _mm256_insert_epi16(v4567x8, *(const int16_t *)w7, 12);
          }

          $for N in range(NR):
            w${N} += 2;
        }
        if (k & 1) {
          if ((k & 4) && (k & 2)) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 6);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 14);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 22);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 30);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 6);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 14);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 22);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 30);
          }
          else if (k & 4) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 4);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 12);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 20);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 28);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 4);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 12);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 20);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 28);
          }
          else if (k & 2) {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 2);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 10);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 18);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 26);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 2);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 10);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 18);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 26);
          }
          else {
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w0, 0);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w1, 8);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w2, 16);
            v0123x8 = _mm256_insert_epi8(v0123x8, *(const int8_t *)w3, 24);

            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w4, 0);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w5, 8);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w6, 16);
            v4567x8 = _mm256_insert_epi8(v4567x8, *(const int8_t *)w7, 24);
          }

          $for N in range(NR):
            w${N} += 1;
        }

        $if BITS == 8:
          vacc0124x8 = _mm256_dpbssd_epi32(vacc0124x8, v0123x8, vzeropoint);
          vacc4567x8 = _mm256_dpbssd_epi32(vacc4567x8, v4567x8, vzeropoint);

        _mm256_storeu_si256((__m256i *)&out[0],  v0123x8);
        _mm256_storeu_si256((__m256i *)&out[${4 * KR}],  v4567x8);

        out += ${NR*KR};
      }

      $if BITS == 8:
        __m256i vksum = _mm256_hadd_epi32(vacc0124x8, vacc4567x8);
        vksum = _mm256_permute4x64_epi64(vksum, _MM_SHUFFLE(3, 1, 2, 0));
        __m256i vpack =  _mm256_loadu_si256((const __m256i*) packed_b);
        _mm256_storeu_si256((__m256i *)packed_b, _mm256_sub_epi32(vpack, vksum));
      out = (${TYPE}*) ((uintptr_t) out + extra_bytes);
    }
    weights += nc * kc;
  } while (--g != 0);
#endif  // defined(__x86_64__)
}
