// Copyright 2025 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert OP in ["MAX", "MIN"]
$assert DATATYPE in ["S8", "U8"]
#include <assert.h>

#include "src/xnnpack/common.h"
#include "src/xnnpack/reduce.h"

$if DATATYPE == "S8":
  #include "src/xnnpack/simd/s8-${ARCH}.h"
  $MIN = "xnn_min_s8"
  $MAX = "xnn_max_s8"
  $xnn_simd_X8_t = "xnn_simd_s8_t"
  $xnn_set1_X8 = "xnn_set1_s8"
  $xnn_loadu_X8 = "xnn_loadu_s8"
  $xnn_load_tail_safe_X8 = "xnn_load_tail_safe_s8"
  $xnn_storeu_X8 = "xnn_storeu_s8"
  $xnn_store_tail_X8 = "xnn_store_tail_s8"
  $xnn_simd_size_X8 = "xnn_simd_size_s8"
  $xnn_simd_bytes_X8 = "xnn_simd_bytes_s8"
$elif DATATYPE == "U8":
  #include "src/xnnpack/simd/u8-${ARCH}.h"
  $MIN = "xnn_min_u8"
  $MAX = "xnn_max_u8"
  $xnn_simd_X8_t = "xnn_simd_u8_t"
  $xnn_set1_X8 = "xnn_set1_u8"
  $xnn_loadu_X8 = "xnn_loadu_u8"
  $xnn_load_tail_safe_X8 = "xnn_load_tail_safe_u8"
  $xnn_storeu_X8 = "xnn_storeu_u8"
  $xnn_store_tail_X8 = "xnn_store_tail_u8"
  $xnn_simd_size_X8 = "xnn_simd_size_u8"
  $xnn_simd_bytes_X8 = "xnn_simd_bytes_u8"

$EMIT_MIN = "MIN" in OP
$EMIT_MAX = "MAX" in OP
$XINT8_T = {"S8": "int8_t", "U8": "uint8_t"}[DATATYPE]
$SIMD_SIZE = {"scalar": 1, "sse41": 16, "neon": 16, "wasmsimd": 16, "sse2": 16, "hvx": 128}[ARCH]

void xnn_${DATATYPE.lower()}_rd${OP.lower()}_ukernel_${ACCUMULATORS}p${ACCUMULATORS}x__${ARCH}_c${CHANNELS}(
    size_t rows,
    size_t channels,
    const ${XINT8_T}* input,
    size_t input_stride,
    const ${XINT8_T}* zero,
    ${XINT8_T}* output,
    const void* params)
{
  assert(rows != 0);
  assert(channels != 0);
  assert(input != NULL);
  assert(output != NULL);

  size_t input_increment = ${ACCUMULATORS} * input_stride;
  for (; channels >= ${CHANNELS}; channels -= ${CHANNELS}) {
    const ${XINT8_T}* i0 = input;
    $for ACC in range(1, ACCUMULATORS):
      const ${XINT8_T}* i${ACC} = (const ${XINT8_T}*) ((uintptr_t) input + ${ACC} * input_stride);

    $if EMIT_MIN:
      ${xnn_simd_X8_t} vmin0 = ${xnn_loadu_X8}(output);
    $if EMIT_MAX:
      ${xnn_simd_X8_t} vmax0 = ${xnn_loadu_X8}(output);
    $for C in range(SIMD_SIZE, CHANNELS, SIMD_SIZE):
      $if EMIT_MIN:
        ${xnn_simd_X8_t} vmin${C} = ${xnn_loadu_X8}(output + ${C} * sizeof(${XINT8_T}));;
      $if EMIT_MAX:
        ${xnn_simd_X8_t} vmax${C} = ${xnn_loadu_X8}(output + ${C} * sizeof(${XINT8_T}));;

    for (int r = rows; r > 0; r -= ${ACCUMULATORS}) {
      $for ACC in range(1, ACCUMULATORS):
        if XNN_UNPREDICTABLE(r < ${ACC+1}) {
          i${ACC} = i${ACC - 1};
        }
      $for ACC in range(ACCUMULATORS):
        $for C in range(0, CHANNELS, SIMD_SIZE):
          ${xnn_simd_X8_t} vin_${ACC}_${C} = ${xnn_loadu_X8}(&i${ACC}[${C}]);
      $for ACC in range(ACCUMULATORS):
        $for C in range(0, CHANNELS, SIMD_SIZE):
          $if EMIT_MIN:
            vmin${C} = ${MIN}(vmin${C}, vin_${ACC}_${C});
          $if EMIT_MAX:
            vmax${C} = ${MAX}(vmax${C}, vin_${ACC}_${C});

      $for ACC in range(0, ACCUMULATORS):
        i${ACC} += input_increment;
    }

    $for C in range(0, CHANNELS, SIMD_SIZE):
      $if EMIT_MIN:
        ${xnn_storeu_X8}(output, vmin${C});
      $if EMIT_MAX:
        ${xnn_storeu_X8}(output, vmax${C});
      output += ${xnn_simd_bytes_X8};

    input += ${CHANNELS} * sizeof(${XINT8_T});
  }
  if (channels != 0) {
    input_increment = ${ACCUMULATORS} * input_stride;
    do {
      const ${XINT8_T}* i0 = input;
      $for ACC in range(1, ACCUMULATORS):
        const ${XINT8_T}* i${ACC} = (const ${XINT8_T}*) ((uintptr_t) input + ${ACC} * input_stride);

      $if EMIT_MIN:
        ${xnn_simd_X8_t} vmin;
      $if EMIT_MAX:
        ${xnn_simd_X8_t} vmax;

      if (channels >= ${xnn_simd_size_X8}) {
        $if EMIT_MIN:
          vmin = ${xnn_loadu_X8}(output);
        $if EMIT_MAX:
          vmax = ${xnn_loadu_X8}(output);
      } else {
        $if EMIT_MIN:
          vmin = ${xnn_load_tail_safe_X8}(output, channels);
        $if EMIT_MAX:
          vmax = ${xnn_load_tail_safe_X8}(output, channels);
      }

      for (int r = rows; r > 0; r -= ${ACCUMULATORS}) {
        $for ACC in range(1, ACCUMULATORS):
          if XNN_UNPREDICTABLE(r < ${ACC+1}) {
            i${ACC} = i${ACC - 1};
          }
        $for ACC in range(ACCUMULATORS):
          ${xnn_simd_X8_t} vin${ACC} = ${xnn_loadu_X8}(&i${ACC}[0]);
        $for ACC in range(ACCUMULATORS):
          $if EMIT_MIN:
            vmin = ${MIN}(vmin, vin${ACC});
          $if EMIT_MAX:
            vmax = ${MAX}(vmax, vin${ACC});
        $for ACC in range(ACCUMULATORS):
          i${ACC} += input_increment;
      }

      if (channels >= ${xnn_simd_size_X8}) {
        $if EMIT_MIN:
          ${xnn_storeu_X8}(output, vmin);
        $if EMIT_MAX:
          ${xnn_storeu_X8}(output, vmax);
        output += ${xnn_simd_bytes_X8};
        input += ${xnn_simd_bytes_X8};
        channels -= ${xnn_simd_size_X8};
      } else {
        $if EMIT_MIN:
          ${xnn_store_tail_X8}(output, vmin, channels);
        $if EMIT_MAX:
          ${xnn_store_tail_X8}(output, vmax, channels);

        channels = 0;
      }
    } while (channels != 0);
  }
}
