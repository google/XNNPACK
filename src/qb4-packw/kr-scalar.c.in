// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR > 1
$assert KR > 1
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include "src/xnnpack/common.h"
#include "src/xnnpack/packw.h"

static XNN_INTRINSIC void xnn_packed2planar(
  int32_t* ksum,
  const uint8_t* weights,
  int8_t* out,
  int32_t vkernel_zero_point)
{
  $for K_I in range(0, KR, 4):
    const uint32_t s_v${K_I//4} = (((const uint32_t*)weights)[${K_I//4}] ^ vkernel_zero_point);
    $for K in range(0, 4):
      const int8_t v${2*(K_I+K)} = (((const int8_t*)&s_v${K_I//4}))[${K}] << 4;
      const int8_t v${2*(K_I+K)+1} = (((const int8_t*)&s_v${K_I//4}))[${K}] & 0xF0;

  $for K in range(0, 2*KR):
    (*ksum) += (int32_t) (v${K});

  $for K in range(0, KR):
    out[${K}] = (((uint8_t) v${K}) >> 4 | (v${K+KR}));
}

void xnn_qb4_packw_gemm_goi_ukernel_x${NR}c${KR}__scalar(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  size_t bl,
  const uint8_t* weights,
  const int32_t* bias,
  const void* scale,
  int8_t* packed_weights,
  size_t extra_bytes_bl,
  size_t extra_bytes_n,
  const void* params) XNN_OOB_READS
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});
  assert(kr == ${KR});
  assert(sr == 1);
  assert(weights != NULL);
  assert(packed_weights != NULL);
  assert(extra_bytes_bl == nr * sizeof(uint16_t));
  assert(extra_bytes_n == nr * sizeof(float));
  assert(params != NULL);
  assert(kc % bl == 0);
  size_t num_blocks = kc / bl;
  size_t weight_stride = (kc >> 1);

  int8_t* out = (int8_t*) packed_weights;
  const int32_t* b = (const int32_t*) bias;
  const uint32_t izp = (uint32_t) (((const struct xnn_qs8_qc4w_packing_params*) params)->input_zero_point + 0);
  const uint32_t kernel_zero_point = (uint32_t) (((const struct xnn_qs8_qc4w_packing_params*) params)->kernel_zero_point);
  assert(kernel_zero_point == 0 || kernel_zero_point == 8);
  const int32_t vkernel_zero_point = (uint32_t) kernel_zero_point * 0x11111111;

  do {
    // NC main loop multiple of ${NR}
    const uint8_t* w0 = (const uint8_t*) weights;
    const uint16_t* s0 = (const uint16_t*) scale;
    int n = nc;
    for (;n > 0; n -= ${NR}) {
      float* packed_k_scaled_sum = (float*) out;
      $for N in range(NR):
        ((float*) out)[${N}] = 0;
      out += ${NR} * sizeof(float);

      // KC/2 bytes is KC Nibbles
      $for N in range(1, NR):
        const uint8_t* w${N} = w${N-1} + weight_stride;

      // scales
      $for N in range(1, NR):
        const uint16_t* s${N} = s${N-1} + num_blocks;

      if XNN_UNLIKELY(n < ${NR}){
        $for N in range(1, NR):
          $if $N % 2 == 0:
            if XNN_UNPREDICTABLE(n <= ${N}) {
              w${N} = w${N-1};
              s${N} = s${N-1};
            }
          $else:
            if XNN_UNPREDICTABLE(n < ${N+1}) {
              w${N} = w${N-1};
              s${N} = s${N-1};
            }
      }

      size_t kb = kc;
      // Process k by blocks (bl)
      for (; kb >= bl; kb-=bl) {
        // Initialize KSum as subtracting bl zero points (8)
        $for N in range(0, NR):
          int32_t ksum${N} = 0;
        size_t k = bl;
        for(; k >= ${2 * KR}; k-=${2*KR}) {
          $for N in range(NR):
            xnn_packed2planar(&ksum${N}, w${N}, out + ${N*KR}, vkernel_zero_point); w${N} += ${KR};

          out += ${NR*KR};
        }
        $for N in range(NR):
          float scale${N} = math_cvt_fp32_bf16(s${N}[0]) / 16.0f;
        $for N in range(NR):
          s${N} += 1;

        $for N in range(NR):
          packed_k_scaled_sum[${N}] -= (float)ksum${N} * izp * scale${N};

        $for N in range(NR):
          ((uint16_t*) out)[${N}] = math_cvt_bf16_fp32(scale${N});

        out += ${NR} * sizeof(uint16_t);
      }

      if XNN_LIKELY(b != NULL){
        $for N in range(NR):
          ((uint32_t*) out)[${N}] = b[${N}];
        b += ${NR};
      } else {
        $for N in range(NR):
          ((uint32_t*) out)[${N}] = 0;
      }
      out += ${NR} * sizeof(uint32_t);
      w0 = w15;
      s0 = s15;
    }
  } while (--g != 0);
}
