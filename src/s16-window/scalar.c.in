// Copyright 2022 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE >= 1
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include "xnnpack/math.h"
#include "xnnpack/window.h"


void xnn_s16_window_ukernel__scalar_u${CHANNEL_TILE}(
    size_t rows,
    size_t channels,
    const int16_t* input,
    const int16_t* weights,
    int16_t* output,
    uint32_t shift)
{
  assert(rows > 0);
  assert(channels != 0);
  assert(input != NULL);
  assert(weights != NULL);
  assert(output != NULL);
  assert(shift < 32);

  do {
    size_t c = channels;
    const int16_t* w = weights;
    $if CHANNEL_TILE == 1:
      do {
        const int32_t vi = (int32_t) *input++;
        const int32_t vw = (int32_t) *w++;
        int32_t vout = vi * vw;
        vout = math_asr_s32(vout, shift);
        vout = math_max_s32(vout, INT16_MIN);
        vout = math_min_s32(vout, INT16_MAX);
        *output++ = (int16_t) vout;
        c -= sizeof(int16_t);
      } while (c != 0);
    $else:
      for (; c >= ${CHANNEL_TILE} * sizeof(int16_t); c -= ${CHANNEL_TILE} * sizeof(int16_t)) {
        $for C in range(CHANNEL_TILE):
          const int16_t vi${C} = input[${C}];
        input += ${CHANNEL_TILE};

        $for C in range(CHANNEL_TILE):
          const int16_t w${C} = w[${C}];
        w += ${CHANNEL_TILE};

        $for C in range(CHANNEL_TILE):
          int32_t vout${C} = (int32_t) vi${C} * (int32_t) w${C};

        $for C in range(CHANNEL_TILE):
          vout${C} = math_asr_s32(vout${C}, shift);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_max_s32(vout${C}, INT16_MIN);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_min_s32(vout${C}, INT16_MAX);

        $for C in range(CHANNEL_TILE):
          output[${C}] = (int16_t) vout${C};

        output += ${CHANNEL_TILE};
      }
      $if CHANNEL_TILE == 2:
        if XNN_UNLIKELY(c != 0) {
          assert(c == sizeof(int16_t));
          const int32_t vi = (int32_t) *input++;
          const int32_t vw = (int32_t) *w;
          int32_t vout = vi * vw;
          vout = math_asr_s32(vout, shift);
          vout = math_max_s32(vout, INT16_MIN);
          vout = math_min_s32(vout, INT16_MAX);
          *output++ = (int16_t) vout;
        }
      $else:
        if XNN_UNLIKELY(c != 0) {
          do {
            const int32_t vi = (int32_t) *input++;
            const int32_t vw = (int32_t) *w++;
            int32_t vout = vi * vw;
            vout = math_asr_s32(vout, shift);
            vout = math_max_s32(vout, INT16_MIN);
            vout = math_min_s32(vout, INT16_MAX);
            *output++ = (int16_t) vout;
            c -= sizeof(int16_t);
          } while (c != 0);
        }
  } while (--rows != 0);
}
