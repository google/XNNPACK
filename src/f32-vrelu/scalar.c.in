// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include "xnnpack/vunary.h"
#include "xnnpack/common.h"
#include "xnnpack/math.h"

void xnn_f32_vrelu_ukernel__scalar_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_relu_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const uint32_t* i = (const uint32_t*) input;
  uint32_t* o = (uint32_t*) output;

  $if BATCH_TILE > 1:
    for (; batch >= ${BATCH_TILE} * sizeof(uint32_t); batch -= ${BATCH_TILE} * sizeof(uint32_t)) {
      $for N in range(BATCH_TILE):
        uint32_t vacc${ABC[N]} = i[${N}];
      i += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        vacc${ABC[N]} = ((vacc${ABC[N]} >> 31) - 1) & vacc${ABC[N]};

      $for N in range(BATCH_TILE):
        o[${N}] = vacc${ABC[N]};
      o += ${BATCH_TILE};
    }
    if XNN_UNLIKELY(batch != 0) {
      $if BATCH_TILE > 2:
        do {
          uint32_t vacc = *i++;
          vacc =  ((vacc >> 31) - 1) & vacc;
          *o++ = vacc;
          batch -= sizeof(uint32_t);
        } while (batch != 0);
      $else:
        uint32_t vacc = *i;
        vacc =  ((vacc >> 31) - 1) & vacc;
        *o = vacc;
    }
  $else:
    for (; batch >= sizeof(uint32_t); batch -= sizeof(uint32_t)) {
      uint32_t vacc = *i++;
      vacc =  ((vacc >> 31) - 1) & vacc;
      *o++ = vacc;
    }
}
