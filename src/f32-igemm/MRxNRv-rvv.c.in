// Copyright 2024 SiFive, Inc.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert ACTIVATION in ["LINEAR", "RELU", "MINMAX"]
$assert MR >= 1
$assert NR in ["m1", "m2", "m4", "m8"]
$LMUL = int(NR[1])
#include <assert.h>

#include <riscv_vector.h>

#include "xnnpack/igemm.h"


$SUFFIX = {"LINEAR": "", "RELU": "_relu", "MINMAX": "_minmax"}[ACTIVATION]
$PARAMS = {"LINEAR": "struct xnn_f32_default_params", "RELU": "struct xnn_f32_relu_params", "MINMAX": "union xnn_f32_minmax_params"}[ACTIVATION]
void xnn_f32_igemm${SUFFIX}_ukernel_${MR}x${LMUL}v__rvv(
    size_t mr,
    size_t nc,
    size_t kc,
    size_t ks,
    const float** restrict a,
    const float* restrict w,
    float* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    size_t a_offset,
    const float* zero,
    const ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(float) == 0);
  assert(ks != 0);
  assert(ks % (${MR} * sizeof(void*)) == 0);
  assert(a_offset % sizeof(float) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  $if ACTIVATION == "MINMAX":
    const float vmin = params->scalar.min;
    const float vmax = params->scalar.max;
  $elif ACTIVATION == "RELU":
    const float vmin = 0.0f;
  float* c0 = c;
  $for M in range(1, MR):
    float* c${M} = (float*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        c${M} = c${M-1};
      }

  const size_t nr = __riscv_vsetvlmax_e32m${LMUL}();
  size_t vl = nr;
  do {
    if XNN_UNLIKELY(nc < nr) {
      vl = __riscv_vsetvl_e32m${LMUL}(nc);
    }
    nc = nc - vl;
    vfloat32m${LMUL}_t vacc0 =  __riscv_vle32_v_f32m${LMUL}(w, vl);
    w = w + nr;
    $for M in range(1, MR):  
      vfloat32m${LMUL}_t vacc${M} =  __riscv_vmv_v_v_f32m${LMUL}(vacc0, vl);

    size_t p = ks;
    do {
      $for M in range(MR):
        const float* restrict a${M} = a[${M}];
        assert(a${M} != NULL);
        if XNN_UNPREDICTABLE(a${M} != zero) {
          a${M} = (const float*) ((uintptr_t) a${M} + a_offset);
        }
      a += ${MR};

      size_t k = kc;
      do {
        $for M in range(MR):
          const float va${M} = *a${M}++;
        vfloat32m${LMUL}_t vb = __riscv_vle32_v_f32m${LMUL}(w, vl);
        w = w + nr;
        $for M in range(MR):
          vacc${M} = __riscv_vfmacc_vf_f32m${LMUL}(vacc${M}, va${M}, vb, vl);

        k -= sizeof(float);
      } while (k != 0);
      p -= ${MR} * sizeof(void*);
    } while (p != 0);
    $if ACTIVATION == "MINMAX":
      // clamp results with min & max
      $for M in range(MR):
        vacc${M} = __riscv_vfmax_vf_f32m${LMUL}(vacc${M}, vmin, vl);

      $for M in range(MR):
        vacc${M} = __riscv_vfmin_vf_f32m${LMUL}(vacc${M}, vmax, vl);
    $elif ACTIVATION == "RELU":
      // apply ReLU to results
      $for M in range(MR):
        vacc${M} = __riscv_vfmax_vf_f32m${LMUL}(vacc${M}, vmin, vl);
    // store ${MR} x vl results to c
    $for M in reversed(range(MR)):
      __riscv_vse32_v_f32m${LMUL}(c${M}, vacc${M}, vl);
      c${M} = (float*) ((uintptr_t) c${M} + cn_stride);

    a = (const float**restrict) ((uintptr_t) a - ks);
  } while (nc != 0);
}
