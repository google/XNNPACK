// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert REQUANTIZATION == "FP32" or not REQUANTIZATION
$assert DATATYPE in ["QC8", "QD8", "QS8", "QU8"]
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/gemm.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/math.h>
#include <xnnpack/unaligned.h>

$DATATYPE_SPEC = {"QC8": "qs8_qc8w", "QD8": "qd8_f32_qc8w", "QS8": "qs8", "QU8": "qu8"}[DATATYPE]
$REQUANTIZATION_SPEC = "" if DATATYPE == "QD8" else "_" + REQUANTIZATION.lower()
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_avx512vnni"
$PARAMS_UNION = {"QC8": "xnn_qs8_qc8w_conv_minmax_params", "QD8": "xnn_f32_minmax_params", "QS8": "xnn_qs8_conv_minmax_params", "QU8": "xnn_qu8_conv_minmax_params"}[DATATYPE]
$XINT8_T = "uint8_t" if DATATYPE == "QU8" else "int8_t"
$OUT_T = "float" if DATATYPE == "QD8" else XINT8_T

void xnn_${DATATYPE_SPEC}_gemm_minmax${REQUANTIZATION_SPEC}_ukernel_${MR}x16c4__avx512vnni(
    size_t mr,
    size_t nc,
    size_t kc,
    const ${XINT8_T}* restrict a,
    size_t a_stride,
    const void* restrict w,
    ${OUT_T}* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if DATATYPE == "QD8":
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)],
      const struct xnn_qd8_quantization_params quantization_params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(${XINT8_T}) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 4 * sizeof(${XINT8_T}));
  const ${XINT8_T}* a0 = a;
  ${OUT_T}* c0 = c;
  $for M in range(1, MR):
    const ${XINT8_T}* a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M-1} + a_stride);
    ${OUT_T}* c${M} = (${OUT_T}*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  $if DATATYPE == "QD8":
    $for M in range(MR):
      const __m512i vinput_zero_point${M} = _mm512_set1_epi32((int) quantization_params[${M}].zero_point);
    const __m512 voutput_min = _mm512_set1_ps(params->scalar.min);
    const __m512 voutput_max = _mm512_set1_ps(params->scalar.max);
  $else:
    const __m512i vsign_mask = _mm512_load_si512(params->${PARAMS_STRUCT}.sign_mask);
    $if DATATYPE != "QC8":
      const __m512 vscale = _mm512_load_ps(params->${PARAMS_STRUCT}.scale);
    const __m512 voutput_max_less_zero_point = _mm512_load_ps(params->${PARAMS_STRUCT}.output_max_less_zero_point);
    const __m256i voutput_zero_point = _mm256_load_si256((const __m256i*) params->${PARAMS_STRUCT}.output_zero_point);
    const __m128i voutput_min = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min);
  do {
    $if DATATYPE == "QD8":
      const __m512i vksum0123 = _mm512_load_epi32(vbias_mask, w);
      $for M in range(MR):
          __m512i vacc${M}x0123456789ABCDEF = _mm512_mullo_epi32(vksum${M}x123, vinput_zero_point${M});
    $else:
      __m512i vacc0x0123456789ABCDEF = _mm512_load_epi32(w);
      $for M in range(1, MR):
        __m512i vacc${M}x0123456789ABCDEF = vacc0x0123456789ABCDEF;
    w = (const int32_t*) w + 16;

    size_t k = kc;
    $if DATATYPE == "QU8":
      const __m512i vb_zero_point = _mm512_load_si512(params->${PARAMS_STRUCT}.kernel_zero_point);
    do {
      $for M in range(MR):
        __m512i va${M}x0123 = _mm512_set1_epi32((int) unaligned_load_u32(a${M}));

      $for M in range(MR):
        a${M} += 4;

      $for M in range(MR):
        va${M}x0123 = _mm512_xor_epi32(va${M}x0123, vsign_mask);

      const __m512i vb0123456789ABCDEF = _mm512_load_si512(w);

      $for M in range(MR):
        vacc${M}x0123456789ABCDEF = _mm512_dpbusd_epi32(vacc${M}x0123456789ABCDEF, va${M}x0123, vb0123456789ABCDEF);

      w = (const ${XINT8_T}*) w + 64;
      k -= 4 * sizeof(${XINT8_T});
    } while (k != 0);

    $for M in range(MR):
      __m512 vscaled${M}x0123456789ABCDEF = _mm512_cvtepi32_ps(vacc${M}x0123456789ABCDEF);

    $for M in range(MR):
      vscaled${M}x0123456789ABCDEF = _mm512_mul_ps(vscaled${M}x0123456789ABCDEF, vscale);

    $for M in range(MR):
      vscaled${M}x0123456789ABCDEF = _mm512_min_ps(vscaled${M}x0123456789ABCDEF, voutput_max_less_zero_point);

    $for M in range(MR):
      vacc${M}x0123456789ABCDEF = _mm512_cvtps_epi32(vscaled${M}x0123456789ABCDEF);

    $for M in range(MR):
      __m256i vacc${M}x012389AB4567CDEF = _mm256_packs_epi32(_mm512_castsi512_si256(vacc${M}x0123456789ABCDEF), _mm512_extracti32x8_epi32(vacc${M}x0123456789ABCDEF, 1));

    $for M in range(MR):
      vacc${M}x012389AB4567CDEF = _mm256_adds_epi16(vacc${M}x012389AB4567CDEF, voutput_zero_point);

    $for M in range(MR):
      const __m128i vout${M}x012389AB4567CDEF = _mm_packs_epi16(_mm256_castsi256_si128(vacc${M}x012389AB4567CDEF), _mm256_extracti128_si256(vacc${M}x012389AB4567CDEF, 1));

    $for M in range(MR):
      __m128i vout${M}x0123456789ABCDEF = _mm_shuffle_epi8(vout${M}x012389AB4567CDEF, _mm_loadu_epi8(params->${PARAMS_STRUCT}.shuffle_control_mask));

    $for M in range(MR):
      vout${M}x0123456789ABCDEF = _mm_max_epi8(vout${M}x0123456789ABCDEF, voutput_min);

    if (nc >= 16) {
      $for M in range(MR):
        _mm_storeu_si128((__m128i*) c${M}, vout${M}x0123456789ABCDEF);

      $for M in range(MR):
        a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - kc);

      $for M in range(MR):
        c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

      nc -= 16;
    } else {
      // Prepare mask for valid 8-bit elements (depends on nc).
      const __mmask16 vmask = _cvtu32_mask16((UINT32_C(1) << nc) - UINT32_C(1));

      $for M in range(MR):
        _mm_mask_storeu_epi8(c${M}, vmask, vout${M}x0123456789ABCDEF);

      nc = 0;
    }
  } while (nc != 0);
}
