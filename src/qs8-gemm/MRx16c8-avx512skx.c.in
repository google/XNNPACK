// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert REQUANTIZATION == "FP32" or not REQUANTIZATION
$assert DATATYPE in ["QC8", "QD8", "QS8", "QU8"]
$assert VARIANT in ["LD256", "EXTENDED"]
$assert MR <= 4
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/gemm.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/math.h>


$DATATYPE_SPEC = {"QC8": "qs8_qc8w", "QD8": "qd8_f32_qc8w", "QS8": "qs8", "QU8": "qu8"}[DATATYPE]
$REQUANTIZATION_SPEC = "" if DATATYPE == "QD8" else "_" + REQUANTIZATION.lower()
$GEMM_SUFFIX = "_xw" if VARIANT == "EXTENDED" else ""
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_avx512"
$PARAMS_UNION = {"QC8": "xnn_qs8_qc8w_conv_minmax_params", "QD8": "xnn_f32_minmax_params", "QS8": "xnn_qs8_conv_minmax_params", "QU8": "xnn_qu8_conv_minmax_params"}[DATATYPE]
$XINT8_T = "uint8_t" if DATATYPE == "QU8" else "int8_t"
$OUT_T = "float" if DATATYPE == "QD8" else XINT8_T
$_MM512_PACKXS_EPI16 = "_mm512_packus_epi16" if DATATYPE == "QU8" else "_mm512_packs_epi16"
$_MM256_PACKXS_EPI16 = "_mm256_packus_epi16" if DATATYPE == "QU8" else "_mm256_packs_epi16"
$_MM_PACKXS_EPI16 = "_mm_packus_epi16" if DATATYPE == "QU8" else "_mm_packs_epi16"
$_MM512_MAX_EPX8 = "_mm512_max_epu8" if DATATYPE == "QU8" else "_mm512_max_epi8"
$_MM256_MAX_EPX8 = "_mm256_max_epu8" if DATATYPE == "QU8" else "_mm256_max_epi8"
$_MM_MAX_EPX8 = "_mm_max_epu8" if DATATYPE == "QU8" else "_mm_max_epi8"
$_MM_CVTEPX8_EPI16 = "_mm_cvtepu8_epi16" if DATATYPE == "QU8" else "_mm_cvtepi8_epi16"
void xnn_${DATATYPE_SPEC}_gemm${GEMM_SUFFIX}_minmax${REQUANTIZATION_SPEC}_ukernel_${MR}x16c8__avx512skx(
    size_t mr,
    size_t nc,
    size_t kc,
    const ${XINT8_T}* restrict a,
    size_t a_stride,
    const void* restrict w,
    ${OUT_T}* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if DATATYPE == "QD8":
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)],
      const struct xnn_qd8_quantization_params quantization_params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(${XINT8_T}) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 8 * sizeof(${XINT8_T}));
  const ${XINT8_T}* a0 = a;
  ${OUT_T}* c0 = c;
  $for M in range(1, MR):
    const ${XINT8_T}* a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M-1} + a_stride);
    ${OUT_T}* c${M} = (${OUT_T}*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  const __mmask16 vbias_mask = _cvtu32_mask16(0x1111);
  $if DATATYPE == "QD8":
    $for M in range(MR):
      const __m512i vinput_zero_point${M} = _mm512_set1_epi32((int) quantization_params[${M}].zero_point);
    const __m512 voutput_min = _mm512_set1_ps(params->scalar.min);
    const __m512 voutput_max = _mm512_set1_ps(params->scalar.max);
  $else:
    $if DATATYPE != "QC8":
      const __m512 vscale = _mm512_load_ps(params->${PARAMS_STRUCT}.scale);
    const __m512 voutput_max_less_zero_point = _mm512_load_ps(params->${PARAMS_STRUCT}.output_max_less_zero_point);
    $if MR > 1:
      const __m512i voutput_zero_point = _mm512_load_si512(params->${PARAMS_STRUCT}.output_zero_point);
    $else:
      const __m256i voutput_zero_point = _mm256_load_si256((const __m256i*) params->${PARAMS_STRUCT}.output_zero_point);
    $if MR > 2:
      const __m512i voutput_min = _mm512_load_si512(params->${PARAMS_STRUCT}.output_min);
    $elif MR == 2:
      const __m256i voutput_min = _mm256_load_si256((const __m256i*) params->${PARAMS_STRUCT}.output_min);
    $else:
      const __m128i voutput_min = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min);
  do {
    $if DATATYPE == "QD8":
      const __m512i vksum0123 = _mm512_maskz_expandloadu_epi32(vbias_mask, w);
      $for N in range(4, 16, 4):
        const __m512i vksum${ABC[N:N+4]} = _mm512_maskz_expandloadu_epi32(vbias_mask, (const int32_t*) w + ${N});

      $for M in range(MR):
        $for N in range(0, 16, 4):
          __m512i vacc${M}x${ABC[N:N+4]} = _mm512_mullo_epi32(vksum${ABC[N:N+4]}, vinput_zero_point${M});
    $else:
      __m512i vacc0x0123 = _mm512_maskz_expandloadu_epi32(vbias_mask, w);
      $for N in range(4, 16, 4):
        __m512i vacc0x${ABC[N:N+4]} = _mm512_maskz_expandloadu_epi32(vbias_mask, (const int32_t*) w + ${N});
      $for M in range(1, MR):
        $for N in range(0, 16, 4):
          __m512i vacc${M}x${ABC[N:N+4]} = vacc0x${ABC[N:N+4]};
    w = (const int32_t*) w + 16;

    size_t k = 0;
    $if DATATYPE == "QU8":
      const __m512i vb_zero_point = _mm512_load_si512(params->${PARAMS_STRUCT}.kernel_zero_point);
    $if DATATYPE == "QD8":
      // Accumulate blocks multiplication for each row.
    while (k < kc) {
      $for M in range(MR):
        const __m512i va${M} = _mm512_broadcast_i32x4(${_MM_CVTEPX8_EPI16}(_mm_loadl_epi64((const __m128i*) a${M})));
        a${M} += 8;

      $for N in range(0, 16, 4):
        $if VARIANT == "EXTENDED":
          $if N == 0:
            const __m512i vb${ABC[N:N+4]} = _mm512_load_si512(w);
          $else:
            const __m512i vb${ABC[N:N+4]} = _mm512_load_si512((const int16_t*) w + ${N * 8});
        $else:
          $if DATATYPE == "QU8":
            $if N == 0:
              const __m512i vb${ABC[N:N+4]} = _mm512_sub_epi16(_mm512_cvtepu8_epi16(_mm256_load_si256((const __m256i*) w)), vb_zero_point);
            $else:
              const __m512i vb${ABC[N:N+4]} = _mm512_sub_epi16(_mm512_cvtepu8_epi16(_mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + ${N * 8}))), vb_zero_point);
          $else:
            $if N == 0:
              const __m512i vb${ABC[N:N+4]} = _mm512_cvtepi8_epi16(_mm256_load_si256((const __m256i*) w));
            $else:
              const __m512i vb${ABC[N:N+4]} = _mm512_cvtepi8_epi16(_mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + ${N * 8})));

        $for M in range(MR):
          vacc${M}x${ABC[N:N+4]} = _mm512_add_epi32(vacc${M}x${ABC[N:N+4]}, _mm512_madd_epi16(va${M}, vb${ABC[N:N+4]}));

      $if VARIANT == "EXTENDED":
        w = (const int16_t*) w + 128;
      $else:
        w = (const ${XINT8_T}*) w + 128;
      k += 8 * sizeof(${XINT8_T});
    }

    $for M in range(MR):
      const __m512i vacc${M}x04152637 = _mm512_add_epi32(_mm512_unpacklo_epi32(vacc${M}x0123, vacc${M}x4567), _mm512_unpackhi_epi32(vacc${M}x0123, vacc${M}x4567));
      const __m512i vacc${M}x8C9DAEBF = _mm512_add_epi32(_mm512_unpacklo_epi32(vacc${M}x89AB, vacc${M}xCDEF), _mm512_unpackhi_epi32(vacc${M}x89AB, vacc${M}xCDEF));

    $for M in range(MR):
      __m512i vacc${M}x084C195D2A6E3B7F = _mm512_add_epi32(_mm512_unpacklo_epi32(vacc${M}x04152637, vacc${M}x8C9DAEBF), _mm512_unpackhi_epi32(vacc${M}x04152637, vacc${M}x8C9DAEBF));

    $for M in range(MR):
      __m512 vscaled${M}x084C195D2A6E3B7F = _mm512_cvtepi32_ps(vacc${M}x084C195D2A6E3B7F);

    $if DATATYPE == "QD8":
      $for M in range(MR):
        __m512 vout${M}x0123456789ABCDEF = _mm512_permutexvar_ps(_mm512_set_epi32(15, 11, 7, 3, 13, 9, 5, 1, 14, 10, 6, 2, 12, 8, 4, 0), vscaled${M}x084C195D2A6E3B7F);

      $for M in range(MR):
        vout${M}x0123456789ABCDEF = _mm512_mul_ps(vout${M}x0123456789ABCDEF, _mm512_set1_ps(quantization_params[${M}].inv_scale));

      const __m512 vfilter_output_scale0123456789ABCDEF = _mm512_load_ps((const float*) w);
      const __m512 vbias0123456789ABCDEF = _mm512_load_ps((const float*) w + 16);
      w = (const float*) w + 32;
      $for M in range(MR):
        vout${M}x0123456789ABCDEF = _mm512_fmadd_ps(vout${M}x0123456789ABCDEF, vfilter_output_scale0123456789ABCDEF, vbias0123456789ABCDEF);

      $for M in range(MR):
        vout${M}x0123456789ABCDEF = _mm512_max_ps(vout${M}x0123456789ABCDEF, voutput_min);

      $for M in range(MR):
        vout${M}x0123456789ABCDEF = _mm512_min_ps(vout${M}x0123456789ABCDEF, voutput_max);
    $else:
      $if DATATYPE == "QC8":
        const __m512 vscale012345678ABCDEF = _mm512_load_ps(w);
        w = (const float*) w + 16;
        const __m512 vscale084C195D2A6E3B7F = _mm512_permutexvar_ps(_mm512_set_epi32(15, 7, 11, 3, 14, 6, 10, 2, 13, 5, 9, 1, 12, 4, 8, 0), vscale012345678ABCDEF);
        $for M in range(MR):
          vscaled${M}x084C195D2A6E3B7F = _mm512_mul_ps(vscaled${M}x084C195D2A6E3B7F, vscale084C195D2A6E3B7F);
      $else:
        $for M in range(MR):
          vscaled${M}x084C195D2A6E3B7F = _mm512_mul_ps(vscaled${M}x084C195D2A6E3B7F, vscale);

      $for M in range(MR):
        vscaled${M}x084C195D2A6E3B7F = _mm512_min_ps(vscaled${M}x084C195D2A6E3B7F, voutput_max_less_zero_point);

      $for M in range(MR):
        vacc${M}x084C195D2A6E3B7F = _mm512_cvtps_epi32(vscaled${M}x084C195D2A6E3B7F);

      $if MR == 1:
        const __m256i vacc0x084C2A6E195D3B7F = _mm256_adds_epi16(_mm256_packs_epi32(_mm512_castsi512_si256(vacc0x084C195D2A6E3B7F), _mm512_extracti32x8_epi32(vacc0x084C195D2A6E3B7F, 1)), voutput_zero_point);
      $else:
        $for M in range(0, MR, 2):
          const __m512i vacc${M}${min(M+1, MR-1)}x084Cx195Dx2A6Ex3B7F = _mm512_adds_epi16(_mm512_packs_epi32(vacc${M}x084C195D2A6E3B7F, vacc${min(M+1, MR-1)}x084C195D2A6E3B7F), voutput_zero_point);

      $if MR > 2:
        __m512i vout012${min(3, MR-1)}x084Cx195Dx2A6Ex3B7F = ${_MM512_PACKXS_EPI16}(vacc01x084Cx195Dx2A6Ex3B7F, vacc2${min(3, MR-1)}x084Cx195Dx2A6Ex3B7F);
        vout012${min(M+3, MR-1)}x084Cx195Dx2A6Ex3B7F = _mm512_permutexvar_epi32(_mm512_set_epi32(15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0), vout012${min(3, MR-1)}x084Cx195Dx2A6Ex3B7F);
        __m512i vout012${min(3, MR-1)}x0123456789ABCDEF = _mm512_shuffle_epi8(vout012${min(3, MR-1)}x084Cx195Dx2A6Ex3B7F, _mm512_set_epi8(15, 11, 7, 3, 13, 9, 5, 1, 14, 10, 6, 2, 12, 8, 4, 0, 15, 11, 7, 3, 13, 9, 5, 1, 14, 10, 6, 2, 12, 8, 4, 0, 15, 11, 7, 3, 13, 9, 5, 1, 14, 10, 6, 2, 12, 8, 4, 0, 15, 11, 7, 3, 13, 9, 5, 1, 14, 10, 6, 2, 12, 8, 4, 0));
        $if DATATYPE != "QD8":
          vout012${min(3, MR-1)}x0123456789ABCDEF = ${_MM512_MAX_EPX8}(vout012${min(3, MR-1)}x0123456789ABCDEF, voutput_min);
      $elif MR == 2:
        const __m256i vout01x084Cx2A6Ex195Dx3B7F = ${_MM256_PACKXS_EPI16}(_mm512_castsi512_si256(vacc01x084Cx195Dx2A6Ex3B7F), _mm512_extracti32x8_epi32(vacc01x084Cx195Dx2A6Ex3B7F, 1));
        const __m256i vout01x084C2A6E195D3B7F = _mm256_permutevar8x32_epi32(vout01x084Cx2A6Ex195Dx3B7F, _mm256_set_epi32(7, 5, 3, 1, 6, 4, 2, 0));
        __m256i vout01x0123456789ABCDEF = _mm256_shuffle_epi8(vout01x084C2A6E195D3B7F, _mm256_set_epi8(15, 7, 11, 3, 13, 5, 9, 1, 14, 6, 10, 2, 12, 4, 8, 0, 15, 7, 11, 3, 13, 5, 9, 1, 14, 6, 10, 2, 12, 4, 8, 0));
        vout01x0123456789ABCDEF = ${_MM256_MAX_EPX8}(vout01x0123456789ABCDEF, voutput_min);
      $elif MR == 1:
        const __m128i vout0x084C2A6E195D3B7F = ${_MM_PACKXS_EPI16}(_mm256_castsi256_si128(vacc0x084C2A6E195D3B7F), _mm256_extracti128_si256(vacc0x084C2A6E195D3B7F, 1));
        __m128i vout0x0123456789ABCDEF = _mm_shuffle_epi8(vout0x084C2A6E195D3B7F, _mm_set_epi8(15, 7, 11, 3, 13, 5, 9, 1, 14, 6, 10, 2, 12, 4, 8, 0));
        vout0x0123456789ABCDEF = ${_MM_MAX_EPX8}(vout0x0123456789ABCDEF, voutput_min);

    $if DATATYPE == "QD8":
      if (nc >= 16) {
        $for M in reversed(range(MR)):
          _mm512_storeu_ps(c${M}, vout${M}x0123456789ABCDEF);

        $for M in range(MR):
          a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - k);

        $for M in range(MR):
          c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

        nc -= 16;
      } else {
        // Prepare mask for valid 32-bit elements (depends on nc).
        const __mmask16 vmask = _cvtu32_mask16((UINT32_C(1) << nc) - 1);
        $for M in reversed(range(MR)):
          _mm512_mask_storeu_ps(c${M}, vmask, vout${M}x0123456789ABCDEF);

        nc = 0;
      }
    $else:
      $if MR > 2:
        if (nc >= 16) {
          _mm_storeu_si128((__m128i*) c0, _mm512_castsi512_si128(vout012${min(M+3, MR-1)}x0123456789ABCDEF));
          $for M in range(1, MR):
            _mm_storeu_si128((__m128i*) c${M}, _mm512_extracti32x4_epi32(vout012${min(M+3, MR-1)}x0123456789ABCDEF, ${M}));

          $for M in range(MR):
            a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - k);

          $for M in range(MR):
            c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

          nc -= 16;
        } else {
          // Prepare mask for valid 8-bit elements (depends on nc).
          __mmask64 vmask = _cvtu64_mask64((uint64_t) ((UINT32_C(1) << nc) - UINT32_C(1)));

          _mm512_mask_storeu_epi8(c0, vmask, vout012${min(M+3, MR-1)}x0123456789ABCDEF);
          $for M in range(1, MR):
            vmask = _kshiftli_mask64(vmask, 16);
            _mm512_mask_storeu_epi8(c${M} - ${M * 16}, vmask, vout012${min(3, MR-1)}x0123456789ABCDEF);

          nc = 0;
        }
      $elif MR == 2:
        if (nc >= 16) {
          _mm_storeu_si128((__m128i*) c0, _mm256_castsi256_si128(vout01x0123456789ABCDEF));
          _mm_storeu_si128((__m128i*) c1, _mm256_extracti128_si256(vout01x0123456789ABCDEF, 1));

          $for M in range(MR):
            c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

          $for M in range(MR):
            a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - kc);

          nc -= 16;
        } else {
          // Prepare mask for valid 8-bit elements (depends on nc).
          __mmask32 vmask = _cvtu32_mask32((UINT32_C(1) << nc) - UINT32_C(1));

          _mm256_mask_storeu_epi8(c0, vmask, vout01x0123456789ABCDEF);
          vmask = _kshiftli_mask32(vmask, 16);
          _mm256_mask_storeu_epi8(c1 - 16, vmask, vout01x0123456789ABCDEF);

          nc = 0;
        }
      $elif MR == 1:
        if (nc >= 16) {
          _mm_storeu_si128((__m128i*) c0, vout0x0123456789ABCDEF);

          $for M in range(MR):
            a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - k);

          $for M in range(MR):
            c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

          nc -= 16;
        } else {
          // Prepare mask for valid 8-bit elements (depends on nc).
          const __mmask16 vmask = _cvtu32_mask16((UINT32_C(1) << nc) - UINT32_C(1));

          _mm_mask_storeu_epi8(c0, vmask, vout0x0123456789ABCDEF);

          nc = 0;
        }
  } while (nc != 0);
}
