// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

#include <assert.h>

#include "xnnpack/dwconv.h"
#include "xnnpack/math.h"


void xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_${ROW_TILE}x1${"_acc%d" % ACCUMULATORS if ACCUMULATORS > 1 else ""}(
    size_t input_height,
    size_t input_width,
    const float* input,
    const float* weights,
    const float* zero,
    float* output,
    uint32_t padding_top,
    const union xnn_f32_minmax_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(input_height != 0);
  assert(input_width != 0);
  assert(input_width % sizeof(float) == 0);
  assert(padding_top >= 1);
  assert(padding_top <= 2);

  const float vmax = params->scalar.max;
  const float vmin = params->scalar.min;

  const float vbias = weights[0];
  $for R in range(5):
    $for S in range(5):
      const float vk${R}${S} = weights[${R*5+S+1}];

  const uint32_t padding_top_less_1 = padding_top - 1;

  const float* i0 = zero;
  const float* i1 = (const float*) ((uintptr_t) input - ((-padding_top_less_1) & input_width));
  const float* i2 = (const float*) ((uintptr_t) i1 + input_width);
  if XNN_UNPREDICTABLE(padding_top_less_1 != 0) {
    i1 = zero;
  }
  $for M in range(3, 3 + 2 * ROW_TILE):
    const float* i${M} = (const float*) ((uintptr_t) i${M-1} + input_width);

  $if ROW_TILE > 1:
    const size_t output_width = round_down_po2((input_width + (2 /* padding */ - 3 /* kernel size */ + 2 /* subsampling */) * sizeof(float)) / 2, sizeof(float));

  float* o0 = output;
  $for M in range(1, ROW_TILE):
    float* o${M} = (float*) ((uintptr_t) o${M-1} + output_width);

  size_t padded_input_height = input_height + (padding_top_less_1 + 1) + 2 /* padding bottom */;
  size_t output_height = (padded_input_height - 5 /* kernel size */ + 2 /* subsampling */) / 2;
  do {
    $for M in range(3, 3 + 2 * ROW_TILE):
      if XNN_UNPREDICTABLE(padded_input_height < ${3 + M}) {
        i${M} = zero;
        $if M % 2 == 0 and M <= 2 * ROW_TILE + 1:
          o${M // 2 - 1} = o${M // 2 - 2};
      }

    $for M in range(3 + 2 * ROW_TILE):
      float vi${M}x0 = 0.0f;

    $for M in range(3 + 2 * ROW_TILE):
      float vi${M}x1 = 0.0f;

    $for M in range(3 + 2 * ROW_TILE):
      float vi${M}x2 = *i${M}++;

    size_t w = input_width;
    for (; w > 2 * sizeof(float); w -= 2 * sizeof(float)) {
      $for M in range(3 + 2 * ROW_TILE):
        const float vi${M}x3 = i${M}[0];

      $for M in range(3 + 2 * ROW_TILE):
        const float vi${M}x4 = i${M}[1];
        i${M} += 2;

      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K == 0:
            float vo${M}p0 = vbias + vi${2*M+K}x0 * vk${K}0;
          $elif K < ACCUMULATORS:
            float vo${M}p${K} = vi${2*M+K}x0 * vk${K}0;
          $else:
            vo${M}p${K % ACCUMULATORS} += vi${2*M+K}x0 * vk${K}0;

      $for M in range(3 + 2 * ROW_TILE):
        vi${M}x0 = vi${M}x2;

      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K+5 < ACCUMULATORS:
            float vo${M}p${K+5} = vi${2*M+K}x1 * vk${K}1;
          $else:
            vo${M}p${(K+5) % ACCUMULATORS} += vi${2*M+K}x1 * vk${K}1;

      $for M in range(3 + 2 * ROW_TILE):
        vi${M}x1 = vi${M}x3;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+10) % ACCUMULATORS} += vi${2*M+K}x2 * vk${K}2;

      $for M in range(3 + 2 * ROW_TILE):
        vi${M}x2 = vi${M}x4;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+15) % ACCUMULATORS} += vi${2*M+K}x3 * vk${K}3;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+20) % ACCUMULATORS} += vi${2*M+K}x4 * vk${K}4;

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} += vo${M}p${A + ACC_SLICE};
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float vo${M} = math_max_f32(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = math_min_f32(vo${M}, vmax);

      $for M in reversed(range(ROW_TILE)):
        *o${M}++ = vo${M};
    }
    if XNN_LIKELY(w == 2 * sizeof(float)) {
      $for M in range(3 + 2 * ROW_TILE):
        const float vi${M}x3 = *i${M}++;

      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K == 0:
            float vo${M}p0 = vbias + vi${2*M+K}x0 * vk${K}0;
          $elif K < ACCUMULATORS:
            float vo${M}p${K} = vi${2*M+K}x0 * vk${K}0;
          $else:
            vo${M}p${K % ACCUMULATORS} += vi${2*M+K}x0 * vk${K}0;

      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K+5 < ACCUMULATORS:
            float vo${M}p${K+5} = vi${2*M+K}x1 * vk${K}1;
          $else:
            vo${M}p${(K+5) % ACCUMULATORS} += vi${2*M+K}x1 * vk${K}1;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+10) % ACCUMULATORS} += vi${2*M+K}x2 * vk${K}2;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+15) % ACCUMULATORS} += vi${2*M+K}x3 * vk${K}3;

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} += vo${M}p${A + ACC_SLICE};
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float vo${M} = math_max_f32(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = math_min_f32(vo${M}, vmax);

      $for M in reversed(range(ROW_TILE)):
        *o${M}++ = vo${M};
    } else {
      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K == 0:
            float vo${M}p0 = vbias + vi${2*M+K}x0 * vk${K}0;
          $elif K < ACCUMULATORS:
            float vo${M}p${K} = vi${2*M+K}x0 * vk${K}0;
          $else:
            vo${M}p${K % ACCUMULATORS} += vi${2*M+K}x0 * vk${K}0;

      $for K in range(5):
        $for M in range(ROW_TILE):
          $if K+5 < ACCUMULATORS:
            float vo${M}p${K+5} = vi${2*M+K}x1 * vk${K}1;
          $else:
            vo${M}p${(K+5) % ACCUMULATORS} += vi${2*M+K}x1 * vk${K}1;

      $for K in range(5):
        $for M in range(ROW_TILE):
          vo${M}p${(K+10) % ACCUMULATORS} += vi${2*M+K}x2 * vk${K}2;

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} += vo${M}p${A + ACC_SLICE};
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float vo${M} = math_max_f32(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = math_min_f32(vo${M}, vmax);

      $for M in reversed(range(ROW_TILE)):
        *o${M}++ = vo${M};
    }

    $if ROW_TILE == 1:
      i0 = (const float*) ((uintptr_t) i${2 * ROW_TILE} - input_width);
    $else:
      i0 = (const float*) ((uintptr_t) i${2 * ROW_TILE - 1});
    i1 = (const float*) ((uintptr_t) i${2 * ROW_TILE});
    i2 = (const float*) ((uintptr_t) i${2 * ROW_TILE + 1});
    i3 = (const float*) ((uintptr_t) i${2 * ROW_TILE + 2});
    $for M in range(4, 3 + 2 * ROW_TILE):
      i${M} = (const float*) ((uintptr_t) i${M-1} + input_width);

    $if ROW_TILE > 1:
      o0 = o${ROW_TILE - 1};
      $for M in range(1, ROW_TILE):
        o${M} = (float*) ((uintptr_t) o${M-1} + output_width);

    $if ROW_TILE > 1:
      output_height = doz(output_height, ${ROW_TILE});
      padded_input_height = doz(padded_input_height, ${ROW_TILE * 2});
    $else:
      output_height -= 1;
      padded_input_height -= 2;
  } while (output_height != 0);
}
