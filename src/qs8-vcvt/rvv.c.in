// Copyright 2025 Microchip
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE in ["QS8", "QU8"]
#include <assert.h>

#include <riscv_vector.h>
#include "src/xnnpack/vcvt.h"

$XINT8_T = {"QS8": "int8_t", "QU8": "uint8_t"}[DATATYPE]
$XINT16_T = {"QS8": "int16_t", "QU8": "uint16_t"}[DATATYPE]
void xnn_${DATATYPE.lower()}_vcvt_ukernel__rvv_u${LMUL}v(
    size_t batch,
    const ${XINT8_T}* input,
    ${XINT8_T}* output,
    const struct xnn_${DATATYPE.lower()}_cvt_params* restrict params)
{
  assert(batch != 0);
  assert(batch % sizeof(${XINT8_T}) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const int16_t input_zero_point = params->scalar.input_zero_point;
  const int16_t multiplier = params->scalar.multiplier;
  const int16_t output_zero_point = params->scalar.output_zero_point;

  do {
    size_t vl = __riscv_vsetvl_e8m${LMUL}(batch); batch -= vl;

    $if DATATYPE == "QS8":
      vint8m${LMUL}_t in_i8v = __riscv_vle8_v_i8m${LMUL}(input, vl); input += vl;
      vint16m${LMUL*2}_t acc_i16v = __riscv_vwsub_vx_i16m${LMUL*2}(in_i8v, input_zero_point, vl);
      acc_i16v = __riscv_vsmul_vx_i16m${LMUL*2}(acc_i16v, multiplier, __RISCV_VXRM_RNU, vl);
      acc_i16v = __riscv_vsadd_vx_i16m${LMUL*2}(acc_i16v, output_zero_point, vl);
      vint8m${LMUL}_t out_i8v = __riscv_vnclip_wx_i8m${LMUL}(acc_i16v, 8, __RISCV_VXRM_RNU, vl);
      __riscv_vse8_v_i8m${LMUL}(output, out_i8v, vl); output += vl;
    $else:
      vuint8m${LMUL}_t in_u8v = __riscv_vle8_v_u8m${LMUL}(input, vl); input += vl;
      vint16m${LMUL*2}_t acc_i16v = __riscv_vreinterpret_i16m${LMUL*2}(__riscv_vwsubu_vx_u16m${LMUL*2}(in_u8v, input_zero_point, vl));
      acc_i16v = __riscv_vsmul_vx_i16m${LMUL*2}(acc_i16v, multiplier, __RISCV_VXRM_RNU, vl);
      acc_i16v = __riscv_vsadd_vx_i16m${LMUL*2}(acc_i16v, output_zero_point, vl);
      acc_i16v = __riscv_vmax_vx_i16m${LMUL*2}(acc_i16v, 0, vl);
      vuint8m${LMUL}_t out_u8v = __riscv_vnclipu_wx_u8m${LMUL}(__riscv_vreinterpret_u16m${LMUL*2}(acc_i16v), 8, __RISCV_VXRM_RNU, vl);
      __riscv_vse8_v_u8m${LMUL}(output, out_u8v, vl); output += vl;
  } while (batch != 0);
}