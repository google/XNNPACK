# Copyright 2023 Google LLC
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# LINT.IfChange

- name: xnn_node_type_invalid
  string: "Invalid"
- name: xnn_node_type_abs
  string: "Abs"
- name: xnn_node_type_add2
  string: "Add2"
- name: xnn_node_type_argmax_pooling_2d
  string: "ArgMax Pooling 2D"
- name: xnn_node_type_average_pooling_2d
  string: "Average Pooling 2D"
- name: xnn_node_type_bankers_rounding
  string: "Bankers Rounding"
- name: xnn_node_type_batch_matrix_multiply
  string: "Batch Matrix Multiply"
- name: xnn_node_type_ceiling
  string: "Ceiling"
- name: xnn_node_type_clamp
  string: "Clamp"
- name: xnn_node_type_concatenate2
  string: "Concatenate2"
- name: xnn_node_type_concatenate3
  string: "Concatenate3"
- name: xnn_node_type_concatenate4
  string: "Concatenate4"
- name: xnn_node_type_concatenate5
  string: "Concatenate5"
- name: xnn_node_type_convert
  string: "Convert"
- name: xnn_node_type_convolution_2d
  string: "Convolution 2D"
- name: xnn_node_type_copy
  string: "Copy"
- name: xnn_node_type_copysign
  string: "Copy Sign"
- name: xnn_node_type_deconvolution_2d
  string: "Deconvolution 2D"
- name: xnn_node_type_depth_to_space_2d
  string: "Depth To Space 2D"
- name: xnn_node_type_depthwise_convolution_2d
  string: "Depthwise Convolution 2D"
- name: xnn_node_type_divide
  string: "Divide"
- name: xnn_node_type_elu
  string: "ELU"
- name: xnn_node_type_exp
  string: "Exp"
- name: xnn_node_type_even_split2
  string: "Even Split2"
- name: xnn_node_type_even_split3
  string: "Even Split3"
- name: xnn_node_type_even_split4
  string: "Even Split4"
- name: xnn_node_type_floor
  string: "Floor"
- name: xnn_node_type_fully_connected
  string: "Fully Connected"
- name: xnn_node_type_fully_connected_sparse
  string: "Fully Connected Sparse"
- name: xnn_node_type_gelu
  string: "GELU"
- name: xnn_node_type_global_average_pooling_1d
  string: "Global Average Pooling 1D"
- name: xnn_node_type_global_average_pooling_2d
  string: "Global Average Pooling 2D"
- name: xnn_node_type_global_sum_pooling_1d
  string: "Global Sum Pooling 1D"
- name: xnn_node_type_global_sum_pooling_2d
  string: "Global Sum Pooling 2D"
- name: xnn_node_type_hardswish
  string: "HardSwish"
- name: xnn_node_type_log
  string: "Log"
- name: xnn_node_type_leaky_relu
  string: "Leaky ReLU"
- name: xnn_node_type_max_pooling_2d
  string: "Max Pooling 2D"
- name: xnn_node_type_maximum2
  string: "Maximum2"
- name: xnn_node_type_minimum2
  string: "Minimum2"
- name: xnn_node_type_multiply2
  string: "Multiply2"
- name: xnn_node_type_negate
  string: "Negate"
- name: xnn_node_type_prelu
  string: "PReLU"
- name: xnn_node_type_reciprocal_square_root
  string: "Reciprocal Square Root"
- name: xnn_node_type_reshape_2d
  string: "Reshape 2D"
- name: xnn_node_type_rope
  string: "RoPE"
- name: xnn_node_type_scaled_dot_product_attention
  string: "Scaled Dot Product Attention"
- name: xnn_node_type_sigmoid
  string: "Sigmoid"
- name: xnn_node_type_softmax
  string: "Softmax"
- name: xnn_node_type_space_to_depth_2d
  string: "Space To Depth 2D"
- name: xnn_node_type_square
  string: "Square"
- name: xnn_node_type_square_root
  string: "Square Root"
- name: xnn_node_type_squared_difference
  string: "Squared Difference"
- name: xnn_node_type_static_constant_pad
  string: "Static Constant Pad"
- name: xnn_node_type_static_mean
  string: "Static Mean"
- name: xnn_node_type_static_reshape
  string: "Static Reshape"
- name: xnn_node_type_static_resize_bilinear_2d
  string: "Static Resize Bilinear 2D"
- name: xnn_node_type_static_slice
  string: "Static Slice"
- name: xnn_node_type_static_transpose
  string: "Static Transpose"
- name: xnn_node_type_subtract
  string: "Subtract"
- name: xnn_node_type_tanh
  string: "Tanh"
- name: xnn_node_type_unpooling_2d
  string: "Unpooling 2D"

# LINT.ThenChange(node-type.c, ../xnnpack/node-type.h)
