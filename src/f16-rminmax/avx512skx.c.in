// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 16 == 0
$assert BATCH_TILE >= 16
$SIMD_TILE = BATCH_TILE // 16
$assert ACCUMULATORS <= SIMD_TILE
$assert OP in ["MAX", "MIN", "MINMAX"]
#include <assert.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/reduce.h"


$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
$EMIT_MIN = "MIN" in OP
$EMIT_MAX = "MAX" in OP
void xnn_f16_r${OP.lower()}_ukernel__avx512skx_u${BATCH_TILE}${ACC_SUFFIX}(
    size_t batch,
    const void* input,
    void* output,
    const union xnn_f16_default_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(uint16_t) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const uint16_t* i = (const uint16_t*) input;
  $if EMIT_MIN:
    __m512 vmin0 = _mm512_cvtph_ps(_mm256_set1_epi16(*i));
    $if EMIT_MAX:
      __m512 vmax0 = vmin0;
  $elif EMIT_MAX:
    __m512 vmax0 = _mm512_cvtph_ps(_mm256_set1_epi16(*i));
  $for A in range(1, ACCUMULATORS):
    $if EMIT_MIN:
      __m512 vmin${A} = vmin0;
    $if EMIT_MAX:
      __m512 vmax${A} = vmax0;
  $if BATCH_TILE > 16:
    for (; batch >= ${BATCH_TILE} * sizeof(uint16_t); batch -= ${BATCH_TILE} * sizeof(uint16_t)) {
      const __m512 vt0 = _mm512_cvtph_ps(_mm256_loadu_si256((const __m256i*) i));
      $for N in range(1, SIMD_TILE):
        const __m512 vt${N} = _mm512_cvtph_ps(_mm256_loadu_si256((const __m256i*) (i + ${N * 16})));
      i += ${BATCH_TILE};

      $for N in range(SIMD_TILE):
        $if EMIT_MIN:
          vmin${N % ACCUMULATORS} = _mm512_min_ps(vmin${N % ACCUMULATORS}, vt${N});
        $if EMIT_MAX:
          vmax${N % ACCUMULATORS} = _mm512_max_ps(vmax${N % ACCUMULATORS}, vt${N});
    }
    $if ACCUMULATORS > 1:
      $ACC_SLICE = 1
      $while ACC_SLICE < ACCUMULATORS:
        $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
          $if A + ACC_SLICE < ACCUMULATORS:
            $if EMIT_MIN:
              vmin${A} = _mm512_min_ps(vmin${A}, vmin${A + ACC_SLICE});
            $if EMIT_MAX:
              vmax${A} = _mm512_max_ps(vmax${A}, vmax${A + ACC_SLICE});
        $ACC_SLICE *= 2
  for (; batch >= 16 * sizeof(uint16_t); batch -= 16 * sizeof(uint16_t)) {
    const __m512 vt = _mm512_cvtph_ps(_mm256_loadu_si256((const __m256i*) i));
    i += 16;

    $if EMIT_MIN:
      vmin0 = _mm512_min_ps(vmin0, vt);
    $if EMIT_MAX:
      vmax0 = _mm512_max_ps(vmax0, vt);
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(uint16_t));
    assert(batch <= 15 * sizeof(uint16_t));

    // Prepare mask for valid elements (depends on batch).
    batch >>= XNN_LOG2_SIZEOF_HALF;
    const __mmask16 vmask = _cvtu32_mask16((uint32_t) ((UINT32_C(1) << batch) - UINT32_C(1)));

    const __m512 vt = _mm512_cvtph_ps(_mm256_maskz_loadu_epi16(vmask, i));

    $if EMIT_MIN:
      vmin0 = _mm512_mask_min_ps(vmin0, vmask, vmin0, vt);
    $if EMIT_MAX:
      vmax0 = _mm512_mask_max_ps(vmax0, vmask, vmax0, vt);
  }
  $if EMIT_MIN:
    __m256 vmin256 = _mm256_min_ps(_mm512_castps512_ps256(vmin0), _mm256_castpd_ps(_mm512_extractf64x4_pd(_mm512_castps_pd(vmin0), 1)));
  $if EMIT_MAX:
    __m256 vmax256 = _mm256_max_ps(_mm512_castps512_ps256(vmax0), _mm256_castpd_ps(_mm512_extractf64x4_pd(_mm512_castps_pd(vmax0), 1)));
  $if EMIT_MIN:
    __m128 vmin = _mm_min_ps(_mm256_castps256_ps128(vmin256), _mm256_extractf128_ps(vmin256, 1));
  $if EMIT_MAX:
    __m128 vmax = _mm_max_ps(_mm256_castps256_ps128(vmax256), _mm256_extractf128_ps(vmax256, 1));
  $if EMIT_MIN:
    vmin = _mm_min_ps(vmin, _mm_movehl_ps(vmin, vmin));
  $if EMIT_MAX:
    vmax = _mm_max_ps(vmax, _mm_movehl_ps(vmax, vmax));
  $if EMIT_MIN:
    vmin = _mm_min_ss(vmin, _mm_movehdup_ps(vmin));
  $if EMIT_MAX:
    vmax = _mm_max_ss(vmax, _mm_movehdup_ps(vmax));
  $if EMIT_MIN:
    *((uint16_t*) output) = (uint16_t) _mm_extract_epi16(_mm_cvtps_ph(vmin, _MM_FROUND_TO_NEAREST_INT), 0);
    $if EMIT_MAX:
      *((uint16_t*) output + 1) = (uint16_t) _mm_extract_epi16(_mm_cvtps_ph(vmax, _MM_FROUND_TO_NEAREST_INT), 0);
  $elif EMIT_MAX:
    *((uint16_t*) output) = (uint16_t) _mm_extract_epi16(_mm_cvtps_ph(vmax, _MM_FROUND_TO_NEAREST_INT), 0);
}
