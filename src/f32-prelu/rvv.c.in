// Copyright 2024 Imagination Technologies, Inc.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert ROW_TILE >= 1
$assert LMUL in [1, 2, 4, 8]
#include <assert.h>

#include <xnnpack/math.h>
#include <xnnpack/prelu.h>
#include <riscv_vector.h>

void xnn_f32_prelu_ukernel__rvv_${ROW_TILE}x${LMUL}v(
    size_t rows,
    size_t channels,
    const float* restrict input,
    size_t input_stride,
    const float* restrict weights,
    float* restrict output,
    size_t output_stride) XNN_OOB_READS
{
  assert(rows != 0);
  assert(channels != 0);
  assert(channels % sizeof(float) == 0);

  channels >>= XNN_LOG2_SIZEOF_FLOAT;
  input_stride >>= XNN_LOG2_SIZEOF_FLOAT;
  output_stride >>= XNN_LOG2_SIZEOF_FLOAT;

  const float* i0 = input;
  float* o0 = output;
  float zero = 0.0f;

  $for M in range(1, ROW_TILE):
    const float* i${M} = i${M-1} + input_stride;
    float* o${M} = o${M-1} + output_stride;

  const size_t input_increment = input_stride * ${ROW_TILE} - channels;
  const size_t output_increment = output_stride * ${ROW_TILE} - channels;

  do {
    $for M in range(1, ROW_TILE):
      $if M % 2 == 0:
        if XNN_UNPREDICTABLE(rows <= ${M}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }
      $else:
        if XNN_UNPREDICTABLE(rows < ${M+1}) {
          i${M} = i${M-1};
          o${M} = o${M-1};
        }

    const float* w = weights;
    size_t c = channels;

    for (; c > 0;) {
      size_t n = __riscv_vsetvl_e32m${LMUL}(c); c -= n;
      vfloat32m${LMUL}_t w_f32v = __riscv_vle32_v_f32m${LMUL}(w, n); w += n;

      $for M in range(ROW_TILE):
        vfloat32m${LMUL}_t in${M}_f32v = __riscv_vle32_v_f32m${LMUL}(i${M}, n); i${M} += n;
      $for M in range(ROW_TILE):
        vbool${32//LMUL}_t mask${M}_f32v = __riscv_vmflt_vf_f32m${LMUL}_b${32//LMUL}(in${M}_f32v, zero, n);
      $for M in range(ROW_TILE):
        vfloat32m${LMUL}_t out${M}_f32v = __riscv_vfmul_vv_f32m${LMUL}_mu(mask${M}_f32v, in${M}_f32v, w_f32v, in${M}_f32v, n);
      $for M in range(ROW_TILE):
        __riscv_vse32_v_f32m${LMUL}(o${M}, out${M}_f32v, n); o${M} += n;
    }

    $for M in range(ROW_TILE):
      i${M} = i${M} + input_increment;
      o${M} = o${M} + output_increment;
    rows = doz(rows, ${ROW_TILE});
  } while (rows != 0);
}
