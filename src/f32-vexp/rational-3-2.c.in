// Copyright 2025 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DIV in ("DIV", "NR")
$BATCH_TILES = tuple(int(bt) for bt in BATCH_TILES.split(","))
$SIMD_SIZE = BATCH_TILES[0]
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include "src/xnnpack/simd/f32-${ARCH}.h"

#include "src/xnnpack/common.h"
#include "src/xnnpack/microparams.h"


static XNN_INLINE xnn_simd_f32_t xnn_setexp_f32(xnn_simd_f32_t vx) {
  // If `x` is an floating point value in the range [-127, 128], then
  // `(x + magic) << 23` will generate the floating point value corresponding
  // to `2^round(x)` (2^-127 and 2^128 will flush to zero and infinity,
  // respectively).
  XNN_SIMD_CONST_F32(vmagic, 8388735.0f);  // 2^23 + 127.
  return xnn_sll_f32(xnn_add_f32(vx, vmagic), 23);
}

// Quick-and-dirty round to nearest, only works for floats in the range
// `[2^-22, 2^22)`.
static XNN_INLINE xnn_simd_f32_t xnn_qd_round_f32(xnn_simd_f32_t vx) {
  // If `x` is an floating point value in the range `[2^-22, 2^22)`, then
  // `(x + magic) - magic`` will generate the floating point value corresponding
  // to `round(x)`.
  XNN_SIMD_CONST_F32(vmagic, 12582912.0f);  // 2^23 + 2^22.
  return xnn_sub_f32(xnn_add_f32(vmagic, vx), vmagic);
}

$for BATCH_TILE in BATCH_TILES:
  $assert BATCH_TILE % SIMD_SIZE == 0
  $assert BATCH_TILE >= SIMD_SIZE
  $SIMD_TILE = BATCH_TILE // SIMD_SIZE
  void xnn_f32_vexp_ukernel__${ARCH}_rational_3_2_${DIV.lower()}_u${BATCH_TILE}(
      size_t batch,
      const float* input,
      float* output,
      const struct xnn_f32_default_params* unused_params)
  {
    assert(batch != 0);
    assert(batch % sizeof(float) == 0);
    assert(input != NULL);
    assert(output != NULL);
    assert(xnn_simd_size_f32 == ${SIMD_SIZE});

    // The monomial coefficients of the numerator polynomial (`valpha_0` = 1.0).
    XNN_SIMD_CONST_F32(valpha_1, 4.1594290733e-01f);
    XNN_SIMD_CONST_F32(valpha_2, 7.2068706155e-02f);
    XNN_SIMD_CONST_F32(valpha_3, 5.5380910635e-03f);

    // The monomial coefficients of the denominator polynomial (`vbeta_01 = 1.0).
    XNN_SIMD_CONST_F32(vbeta_1, -2.7720427513e-01f);
    XNN_SIMD_CONST_F32(vbeta_2, 2.3986088112e-02f);

    // Some useful constants.
    XNN_SIMD_CONST_F32(vlog2e, 1.44269504089f);
    XNN_SIMD_CONST_F32(v128, 128.0f);
    XNN_SIMD_CONST_F32(vm127, -127.0f);
    XNN_SIMD_CONST_F32(vone, 1.0f);
    $if DIV == "NR":
      XNN_SIMD_CONST_F32(vtwo, 2.0f);

    $if SIMD_TILE > 1:
      for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
        $for N in range(SIMD_TILE):
          xnn_simd_f32_t vx_${N} = xnn_loadu_f32(input + ${N} * xnn_simd_size_f32);
        input += ${BATCH_TILE};

        // Clamp `vz_prime = x * log2(e)` to the maximum exponents [-127, 128].
        $for N in range(0, SIMD_TILE):
          xnn_simd_f32_t vz_prime_${N} = xnn_mul_f32(vx_${N}, vlog2e);
        $for N in range(0, SIMD_TILE):
          vz_prime_${N} = xnn_min_f32(xnn_max_f32(vz_prime_${N}, vm127), v128);

        // Decompose x * log2e into `z` (integer part) and `r` (remainder).
        $for N in range(0, SIMD_TILE):
          const xnn_simd_f32_t vz_${N} = xnn_qd_round_f32(vz_prime_${N});
        $for N in range(0, SIMD_TILE):
          const xnn_simd_f32_t vr_${N} = xnn_sub_f32(vz_prime_${N}, vz_${N});

        // Compute 2^z.
        $for N in range(0, SIMD_TILE):
          const xnn_simd_f32_t v2z_${N} = xnn_setexp_f32(vz_${N});

        // Evaluate the numerator polynomial p(f).
        $for N in range(0, SIMD_TILE):
          xnn_simd_f32_t vp_${N} = xnn_fmadd_f32(vr_${N}, valpha_3, valpha_2);
        $for N in range(0, SIMD_TILE):
          vp_${N} = xnn_fmadd_f32(vr_${N}, vp_${N}, valpha_1);
        $for N in range(0, SIMD_TILE):
          vp_${N} = xnn_fmadd_f32(vr_${N}, vp_${N}, vone);

        // Evaluate the denominator polynomial q(r).
        $for N in range(0, SIMD_TILE):
          xnn_simd_f32_t vq_${N} = xnn_fmadd_f32(vr_${N}, vbeta_2, vbeta_1);
        $for N in range(0, SIMD_TILE):
          vq_${N} = xnn_fmadd_f32(vr_${N}, vq_${N}, vone);

        // Divide the numerator by the denominator, obtaining 2^r.
        $if DIV == "DIV":
          $for N in range(0, SIMD_TILE):
            const xnn_simd_f32_t v2r_${N} =  xnn_div_f32(vp_${N}, vq_${N});
        $else:
          $for N in range(0, SIMD_TILE):
            xnn_simd_f32_t vrq_${N} = xnn_rcp_f32(vq_${N});
          for (size_t iter = 0; iter < XNN_SIMD_NUM_RCP_ITER_F32; iter++) {
            $for N in range(0, SIMD_TILE):
              vrq_${N} = xnn_mul_f32(vrq_${N}, xnn_fnmadd_f32(vrq_${N}, vq_${N}, vtwo));
          }
          $for N in range(0, SIMD_TILE):
            const xnn_simd_f32_t v2r_${N} = xnn_mul_f32(vp_${N}, vrq_${N});

        // Compute 2^z * 2^r.
        $for N in range(0, SIMD_TILE):
          const xnn_simd_f32_t vy_${N} = xnn_mul_f32(v2z_${N}, v2r_${N});

        $for N in range(SIMD_TILE):
          xnn_storeu_f32(output + ${N} * xnn_simd_size_f32, vy_${N});
        output += ${BATCH_TILE};
      }
    for (; batch >= xnn_simd_bytes_f32; batch -= xnn_simd_bytes_f32) {
      xnn_simd_f32_t vx = xnn_loadu_f32(input);
      input += xnn_simd_size_f32;

      // Clamp `vz_prime = x * log2(e)` to the maximum exponents [-127, 128].
      xnn_simd_f32_t vz_prime = xnn_mul_f32(vx, vlog2e);
      vz_prime = xnn_min_f32(xnn_max_f32(vz_prime, vm127), v128);

      // Decompose x * log2e into `z` (integer part) and `r` (remainder).
      const xnn_simd_f32_t vz = xnn_qd_round_f32(vz_prime);
      const xnn_simd_f32_t vr = xnn_sub_f32(vz_prime, vz);

      // Compute 2^z.
      const xnn_simd_f32_t v2z = xnn_setexp_f32(vz);

      // Evaluate the numerator polynomial p(f).
      xnn_simd_f32_t vp = xnn_fmadd_f32(vr, valpha_3, valpha_2);
      vp = xnn_fmadd_f32(vr, vp, valpha_1);
      vp = xnn_fmadd_f32(vr, vp, vone);

      // Evaluate the denominator polynomial q(r).
      xnn_simd_f32_t vq = xnn_fmadd_f32(vr, vbeta_2, vbeta_1);
      vq = xnn_fmadd_f32(vr, vq, vone);

      // Divide the numerator by the denominator, obtaining 2^r.
      $if DIV == "DIV":
        const xnn_simd_f32_t v2r =  xnn_div_f32(vp, vq);
      $else:
        xnn_simd_f32_t vrq = xnn_rcp_f32(vq);
        for (size_t iter = 0; iter < XNN_SIMD_NUM_RCP_ITER_F32; iter++) {
          vrq = xnn_mul_f32(vrq, xnn_fnmadd_f32(vrq, vq, vtwo));
        }
        const xnn_simd_f32_t v2r = xnn_mul_f32(vp, vrq);

      // Compute 2^z * 2^r.
      const xnn_simd_f32_t vy = xnn_mul_f32(v2z, v2r);

      xnn_storeu_f32(output, vy);
      output += xnn_simd_size_f32;
    }
    $if SIMD_SIZE > 1:
      if XNN_UNLIKELY(batch != 0) {
        xnn_simd_f32_t vx = xnn_load_tail_f32(input, batch >> XNN_LOG2_SIZEOF_FLOAT);

        // Clamp `vz_prime = x * log2(e)` to the maximum exponents [-127, 128].
        xnn_simd_f32_t vz_prime = xnn_mul_f32(vx, vlog2e);
        vz_prime = xnn_min_f32(xnn_max_f32(vz_prime, vm127), v128);

        // Decompose x * log2e into `z` (integer part) and `r` (remainder).
        const xnn_simd_f32_t vz = xnn_qd_round_f32(vz_prime);
        const xnn_simd_f32_t vr = xnn_sub_f32(vz_prime, vz);

        // Compute 2^z.
        const xnn_simd_f32_t v2z = xnn_setexp_f32(vz);

        // Evaluate the numerator polynomial p(f).
        xnn_simd_f32_t vp = xnn_fmadd_f32(vr, valpha_3, valpha_2);
        vp = xnn_fmadd_f32(vr, vp, valpha_1);
        vp = xnn_fmadd_f32(vr, vp, vone);

        // Evaluate the denominator polynomial q(r).
        xnn_simd_f32_t vq = xnn_fmadd_f32(vr, vbeta_2, vbeta_1);
        vq = xnn_fmadd_f32(vr, vq, vone);

        // Divide the numerator by the denominator, obtaining 2^r.
        $if DIV == "DIV":
          const xnn_simd_f32_t v2r =  xnn_div_f32(vp, vq);
        $else:
          xnn_simd_f32_t vrq = xnn_rcp_f32(vq);
          for (size_t iter = 0; iter < XNN_SIMD_NUM_RCP_ITER_F32; iter++) {
            vrq = xnn_mul_f32(vrq, xnn_fnmadd_f32(vrq, vq, vtwo));
          }
          const xnn_simd_f32_t v2r = xnn_mul_f32(vp, vrq);

        // Compute 2^z * 2^r.
        const xnn_simd_f32_t vy = xnn_mul_f32(v2z, v2r);

        xnn_store_tail_f32(output, vy, batch >> XNN_LOG2_SIZEOF_FLOAT);
      }
  }

