// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 4
$assert BATCH_TILE % 4 == 0
$SIMD_TILE = BATCH_TILE // 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/intrinsics-polyfill.h"
#include "xnnpack/vcvt.h"

$ISA = "avx" if AVX else "sse41"
void xnn_qs16_qs8_vcvt_ukernel__${ISA}_u${BATCH_TILE}(
    size_t batch,
    const int16_t* input,
    int8_t* output,
    const union xnn_qs16_qs8_cvt_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(int16_t) == 0);
  assert(input != NULL);
  assert(output != NULL);
  XNN_ALIGN(16) static const uint8_t shuffle01[16] = {
    0x80, 0x80, 0, 1, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 2, 3, 0x80, 0x80, 0x80, 0x80,
  };
  XNN_ALIGN(16) static const uint8_t shuffle23[16] = {
    0x80, 0x80, 4, 5, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 6, 7, 0x80, 0x80, 0x80, 0x80,
  };
  $if BATCH_TILE > 4:
    XNN_ALIGN(16) static const uint8_t shuffle45[16] = {
      0x80, 0x80, 8, 9, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 10, 11, 0x80, 0x80, 0x80, 0x80,
    };
    XNN_ALIGN(16) static const uint8_t shuffle67[16] = {
      0x80, 0x80, 12, 13, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 14, 15, 0x80, 0x80, 0x80, 0x80,
    };

  const __m128i vmultiplier = _mm_set1_epi32(params->scalar.multiplier);
  const __m128i vbias = _mm_set1_epi64x((int64_t) ((uint64_t) params->scalar.output_zero_point << 32) + INT64_C(0x80000000));
  XNN_FORCE_REALIZATION(vmultiplier);
  XNN_FORCE_REALIZATION(vbias);
  const __m128i vshuffle01 = _mm_load_si128((const __m128i*) shuffle01);
  const __m128i vshuffle23 = _mm_load_si128((const __m128i*) shuffle23);

  $if BATCH_TILE > 4:
    const __m128i vshuffle45 = _mm_load_si128((const __m128i*) shuffle45);
    const __m128i vshuffle67 = _mm_load_si128((const __m128i*) shuffle67);
    for (; batch >= ${BATCH_TILE} * sizeof(int16_t); batch -= ${BATCH_TILE} * sizeof(int16_t)) {
      $for N in range(0, SIMD_TILE, 2):
        const __m128i vx${ABC[N]} = _mm_loadu_si128((const __m128i*) input); input += 8;

      // Move int16 to upper part of int32
      $for N in range(0, SIMD_TILE, 2):
        __m128i vacc${ABC[N]}lo   = _mm_shuffle_epi8(vx${ABC[N]}, vshuffle01);
        __m128i vacc${ABC[N]}hi   = _mm_shuffle_epi8(vx${ABC[N]}, vshuffle23);
        __m128i vacc${ABC[N+1]}lo = _mm_shuffle_epi8(vx${ABC[N]}, vshuffle45);
        __m128i vacc${ABC[N+1]}hi = _mm_shuffle_epi8(vx${ABC[N]}, vshuffle67);

      $for N in range(SIMD_TILE):
        vacc${ABC[N]}lo = _mm_mul_epi32(vacc${ABC[N]}lo, vmultiplier);
        vacc${ABC[N]}hi = _mm_mul_epi32(vacc${ABC[N]}hi, vmultiplier);

      $for N in range(SIMD_TILE):
        vacc${ABC[N]}lo = _mm_add_epi64(vacc${ABC[N]}lo, vbias);
        vacc${ABC[N]}hi = _mm_add_epi64(vacc${ABC[N]}hi, vbias);

      $for N in range(SIMD_TILE):
        __m128i vacc${ABC[N]} = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacc${ABC[N]}lo), _mm_castsi128_ps(vacc${ABC[N]}hi), _MM_SHUFFLE(3, 1, 3, 1)));

      // Pack 8 ints into 8 shorts
      $for N in range(0, SIMD_TILE, 2):
        vacc${ABC[N]} = _mm_packs_epi32(vacc${ABC[N]}, vacc${ABC[N+1]});

      $if SIMD_TILE >= 4:
        // Pack 16 shorts into 16 bytes
        $for N in range(0, SIMD_TILE, 4):
          const __m128i vy${ABC[N]} = _mm_packs_epi16(vacc${ABC[N]}, vacc${ABC[N+2]});

        $for N in range(0, SIMD_TILE, 4):
          _mm_storeu_si128((__m128i*) output, vy${ABC[N]}); output += 16;
      $else:
        // Pack 8 shorts into 8 bytes
        $for N in range(0, SIMD_TILE, 2):
          const __m128i vy${ABC[N]} = _mm_packs_epi16(vacc${ABC[N]}, vacc${ABC[N]});

        $for N in range(0, SIMD_TILE, 2):
          _mm_storel_epi64((__m128i*) output, vy${ABC[N]}); output += 8;
    }

  for (; batch >= 4 * sizeof(int16_t); batch -= 4 * sizeof(int16_t)) {
    const __m128i vx = _mm_loadu_si128((const __m128i*) input); input += 4;
    __m128i vacclo = _mm_shuffle_epi8(vx, vshuffle01);
    __m128i vacchi = _mm_shuffle_epi8(vx, vshuffle23);
    vacclo = _mm_mul_epi32(vacclo, vmultiplier);
    vacchi = _mm_mul_epi32(vacchi, vmultiplier);
    vacclo = _mm_add_epi64(vacclo, vbias);
    vacchi = _mm_add_epi64(vacchi, vbias);
    __m128i vacc = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacclo), _mm_castsi128_ps(vacchi), _MM_SHUFFLE(3, 1, 3, 1)));
    vacc = _mm_packs_epi32(vacc, vacc);
    const __m128i vy = _mm_packs_epi16(vacc, vacc);

    _mm_storeu_si32(output, vy);
    output += 4;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(int16_t));
    assert(batch <= 3 * sizeof(int16_t));

    const __m128i vx = _mm_loadu_si128((const __m128i*) input);
    __m128i vacclo = _mm_shuffle_epi8(vx, vshuffle01);
    __m128i vacchi = _mm_shuffle_epi8(vx, vshuffle23);
    vacclo = _mm_mul_epi32(vacclo, vmultiplier);
    vacchi = _mm_mul_epi32(vacchi, vmultiplier);
    vacclo = _mm_add_epi64(vacclo, vbias);
    vacchi = _mm_add_epi64(vacchi, vbias);
    __m128i vacc = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacclo), _mm_castsi128_ps(vacchi), _MM_SHUFFLE(3, 1, 3, 1)));
    vacc = _mm_packs_epi32(vacc, vacc);
    __m128i vy = _mm_packs_epi16(vacc, vacc);

    if (batch & (2 * sizeof(int16_t))) {
      _mm_storeu_si16(output, vy);
      vy = _mm_srli_epi32(vy, 16);
      output += 2;
    }
    if (batch & (1 * sizeof(int16_t))) {
      *output = (int8_t) _mm_extract_epi8(vy, 0);
    }
  }
}
