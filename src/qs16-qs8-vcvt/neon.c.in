// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 8
$assert BATCH_TILE % 8 == 0
$SIMD_TILE = BATCH_TILE // 8
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <arm_neon.h>

#include "xnnpack/common.h"
#include "xnnpack/vcvt.h"

void xnn_qs16_qs8_vcvt_ukernel__neon_u${BATCH_TILE}(
    size_t batch,
    const int16_t* input,
    int8_t* output,
    const union xnn_qs16_qs8_cvt_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(int16_t) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const int32x4_t vmultiplier = vld1q_dup_s32(&params->scalar.multiplier);
  const int16x8_t voutput_zero_point = vld1q_dup_s16(&params->scalar.output_zero_point);
  $if BATCH_TILE > 8:
    for (; batch >= ${BATCH_TILE} * sizeof(int16_t); batch -= ${BATCH_TILE} * sizeof(int16_t)) {
      $for N in range(SIMD_TILE):
        const int16x8_t vx${ABC[N]} = vld1q_s16(input); input += 8;

      $for N in range(SIMD_TILE):
        int32x4_t vacc_lo${ABC[N]} = vshll_n_s16(vget_low_s16(vx${ABC[N]}), 15);
        int32x4_t vacc_hi${ABC[N]} = vshll_n_s16(vget_high_s16(vx${ABC[N]}), 15);

      $for N in range(SIMD_TILE):
        vacc_lo${ABC[N]} = vqrdmulhq_s32(vacc_lo${ABC[N]}, vmultiplier);
        vacc_hi${ABC[N]} = vqrdmulhq_s32(vacc_hi${ABC[N]}, vmultiplier);

      $for N in range(SIMD_TILE):
        int16x8_t vacc${ABC[N]} = vcombine_s16(vqmovn_s32(vacc_lo${ABC[N]}), vqmovn_s32(vacc_hi${ABC[N]}));

      $for N in range(SIMD_TILE):
        vacc${ABC[N]} = vqaddq_s16(vacc${ABC[N]}, voutput_zero_point);

      $for N in range(SIMD_TILE):
        const int8x8_t vy${ABC[N]} = vqmovn_s16(vacc${ABC[N]});

      $for N in range(SIMD_TILE):
        vst1_s8(output, vy${ABC[N]}); output += 8;
    }
  for (; batch >= 8 * sizeof(int16_t); batch -= 8 * sizeof(int16_t)) {
    const int16x8_t vx = vld1q_s16(input); input += 8;
    int32x4_t vacc_lo = vshll_n_s16(vget_low_s16(vx), 15);
    int32x4_t vacc_hi = vshll_n_s16(vget_high_s16(vx), 15);
    vacc_lo = vqrdmulhq_s32(vacc_lo, vmultiplier);
    vacc_hi = vqrdmulhq_s32(vacc_hi, vmultiplier);
    int16x8_t vacc = vcombine_s16(vqmovn_s32(vacc_lo), vqmovn_s32(vacc_hi));
    vacc = vqaddq_s16(vacc, voutput_zero_point);
    const int8x8_t vy = vqmovn_s16(vacc);
    vst1_s8(output, vy); output += 8;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(int16_t));
    assert(batch <= 7 * sizeof(int16_t));

    const int16x8_t vx = vld1q_s16(input);
    int32x4_t vacc_lo = vshll_n_s16(vget_low_s16(vx), 15);
    int32x4_t vacc_hi = vshll_n_s16(vget_high_s16(vx), 15);
    vacc_lo = vqrdmulhq_s32(vacc_lo, vmultiplier);
    vacc_hi = vqrdmulhq_s32(vacc_hi, vmultiplier);
    int16x8_t vacc = vcombine_s16(vqmovn_s32(vacc_lo), vqmovn_s32(vacc_hi));
    vacc = vqaddq_s16(vacc, voutput_zero_point);
    int8x8_t vy = vqmovn_s16(vacc);

    if (batch & (4 * sizeof(int16_t))) {
      vst1_lane_u32((void*) output, vreinterpret_u32_s8(vy), 0); output += 4;
      vy = vext_s8(vy, vy, 4);
    }
    if (batch & (2 * sizeof(int16_t))) {
      vst1_lane_u16((void*) output, vreinterpret_u16_s8(vy), 0); output += 2;
      vy = vext_s8(vy, vy, 2);
    }
    if (batch & (1 * sizeof(int16_t))) {
      vst1_lane_s8((void*) output, vy, 0);
    }
  }
}
