// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 4
$assert BATCH_TILE % 4 == 0
$SIMD_TILE = BATCH_TILE // 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/vcvt.h>

void xnn_qs16_qs8_vcvt_ukernel__sse2_x${BATCH_TILE}(
    size_t batch,
    const int16_t* input,
    int8_t* output,
    const union xnn_qs16_qs8_cvt_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(int16_t) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const __m128i vinput_bias = _mm_load_si128((const __m128i*) params->sse2.input_bias);
  const __m128i vmultiplier = _mm_load_si128((const __m128i*) params->sse2.multiplier);
  const __m128i vbias = _mm_load_si128((const __m128i*) params->sse2.bias);
  const __m128i vzero = _mm_setzero_si128();

  $if BATCH_TILE > 4:
    for (; batch >= ${BATCH_TILE} * sizeof(int16_t); batch -= ${BATCH_TILE} * sizeof(int16_t)) {
      $for N in range(0, SIMD_TILE, 2):
        __m128i vx${ABC[N]} = _mm_loadu_si128((const __m128i*) input); input += 8;

      // Add 0x8000 to convert signed inputs to unsigned.
      $for N in range(0, SIMD_TILE, 2):
        vx${ABC[N]} = _mm_xor_si128(vx${ABC[N]}, vinput_bias);

      $for N in range(0, SIMD_TILE, 2):
       const __m128i vu${ABC[N]} = _mm_unpacklo_epi16(vx${ABC[N]}, vzero);
       const __m128i vu${ABC[N+1]} = _mm_unpackhi_epi16(vx${ABC[N]}, vzero);

      $for N in range(SIMD_TILE):
        __m128i vacc${ABC[N]}lo = _mm_unpacklo_epi32(vu${ABC[N]}, vzero);  // low
        __m128i vacc${ABC[N]}hi = _mm_unpackhi_epi32(vu${ABC[N]}, vzero);  // high

      $for N in range(SIMD_TILE):
        vacc${ABC[N]}lo = _mm_mul_epu32(vacc${ABC[N]}lo, vmultiplier);
        vacc${ABC[N]}hi = _mm_mul_epu32(vacc${ABC[N]}hi, vmultiplier);

      $for N in range(SIMD_TILE):
        vacc${ABC[N]}lo = _mm_add_epi64(vacc${ABC[N]}lo, vbias);
        vacc${ABC[N]}hi = _mm_add_epi64(vacc${ABC[N]}hi, vbias);

      $for N in range(SIMD_TILE):
        vacc${ABC[N]}lo = _mm_srli_epi64(vacc${ABC[N]}lo, 16);
        vacc${ABC[N]}hi = _mm_srli_epi64(vacc${ABC[N]}hi, 16);

      $for N in range(SIMD_TILE):
        __m128i vacc${ABC[N]} = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacc${ABC[N]}lo),
                                                                _mm_castsi128_ps(vacc${ABC[N]}hi),
                                                                _MM_SHUFFLE(2, 0, 2, 0)));

      // Pack 8 ints into 8 shorts
      $for N in range(0, SIMD_TILE, 2):
        vacc${ABC[N]} = _mm_packs_epi32(vacc${ABC[N]}, vacc${ABC[N+1]});

      $if SIMD_TILE >= 4:
        // Pack 16 shorts into 16 bytes
        $for N in range(0, SIMD_TILE, 4):
          const __m128i vy${ABC[N]} = _mm_packs_epi16(vacc${ABC[N]}, vacc${ABC[N+2]});

        $for N in range(0, SIMD_TILE, 4):
          _mm_storeu_si128((__m128i*) output, vy${ABC[N]}); output += 16;
      $else:
        // Pack 8 shorts into 8 bytes
        $for N in range(0, SIMD_TILE, 2):
          const __m128i vy${ABC[N]} = _mm_packs_epi16(vacc${ABC[N]}, vacc${ABC[N]});

        $for N in range(0, SIMD_TILE, 2):
          _mm_storel_epi64((__m128i*) output, vy${ABC[N]}); output += 8;
    }

  for (; batch >= 4 * sizeof(int16_t); batch -= 4 * sizeof(int16_t)) {
    __m128i vx = _mm_loadl_epi64((const __m128i*) input); input += 4;
    vx = _mm_xor_si128(vx, vinput_bias);  // Convert signed inputs to unsigned.
    const __m128i vu = _mm_unpacklo_epi16(vx, vzero);
    __m128i vacclo = _mm_unpacklo_epi32(vu, vzero);
    __m128i vacchi = _mm_unpackhi_epi32(vu, vzero);
    vacclo = _mm_mul_epu32(vacclo, vmultiplier);
    vacchi = _mm_mul_epu32(vacchi, vmultiplier);
    vacclo = _mm_add_epi64(vacclo, vbias);
    vacchi = _mm_add_epi64(vacchi, vbias);
    vacclo = _mm_srli_epi64(vacclo, 16);
    vacchi = _mm_srli_epi64(vacchi, 16);
    __m128i vacc = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacclo),
                                                   _mm_castsi128_ps(vacchi), _MM_SHUFFLE(2, 0, 2, 0)));
    vacc = _mm_packs_epi32(vacc, vacc);
    const __m128i vy = _mm_packs_epi16(vacc, vacc);
    _mm_storeu_si32(output, vy);
    output += 4;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(int16_t));
    assert(batch <= 3 * sizeof(int16_t));

    __m128i vx = _mm_loadl_epi64((const __m128i*) input);
    vx = _mm_xor_si128(vx, vinput_bias);
    const __m128i vu = _mm_unpacklo_epi16(vx, vzero);
    __m128i vacclo = _mm_unpacklo_epi32(vu, vzero);
    __m128i vacchi = _mm_unpackhi_epi32(vu, vzero);
    vacclo = _mm_mul_epu32(vacclo, vmultiplier);
    vacchi = _mm_mul_epu32(vacchi, vmultiplier);
    vacclo = _mm_add_epi64(vacclo, vbias);
    vacchi = _mm_add_epi64(vacchi, vbias);
    vacclo = _mm_srli_epi64(vacclo, 16);
    vacchi = _mm_srli_epi64(vacchi, 16);
    __m128i vacc = _mm_castps_si128(_mm_shuffle_ps(_mm_castsi128_ps(vacclo),
                                                   _mm_castsi128_ps(vacchi), _MM_SHUFFLE(2, 0, 2, 0)));
    vacc = _mm_packs_epi32(vacc, vacc);
    __m128i vy = _mm_packs_epi16(vacc, vacc);

    if (batch & (2 * sizeof(int16_t))) {
      _mm_storeu_si16(output, vy);
      vy = _mm_srli_epi32(vy, 16);
      output += 2;
    }
    if (batch & (1 * sizeof(int16_t))) {
      *output = (int8_t) _mm_cvtsi128_si32(vy);
    }
  }
}
