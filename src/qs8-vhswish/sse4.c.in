// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 8
$assert BATCH_TILE == 8 or BATCH_TILE % 16 == 0
$SIMD_TILE = BATCH_TILE // 16
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/intrinsics-polyfill.h"
#include "xnnpack/vhswish.h"


$XINT8_T = {"QS8": "int8_t", "QU8": "uint8_t"}[DATATYPE]
$_MM_CVTEPX8_EPI16 = {"QS8": "_mm_cvtepi8_epi16", "QU8": "_mm_cvtepu8_epi16"}[DATATYPE]
$_MM_PACKXS_EPI16 = {"QS8": "_mm_packs_epi16", "QU8": "_mm_packus_epi16"}[DATATYPE]
$ISA = "avx" if AVX else "sse41"
void xnn_${DATATYPE.lower()}_vhswish_ukernel__${ISA}_u${BATCH_TILE}(
    size_t batch,
    const ${XINT8_T}* input,
    ${XINT8_T}* output,
    const union xnn_${DATATYPE.lower()}_hswish_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(${XINT8_T}) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const __m128i vinput_zero_point = _mm_set1_epi16(params->sse2.input_zero_point);
  const __m128i voutput_zero_point = _mm_set1_epi16(params->sse2.output_zero_point);
  const __m128i vinput_scale_div = _mm_set1_epi16(params->sse2.input_scale_div);
  const __m128i vscale_ratio = _mm_set1_epi16(params->sse2.scale_ratio);
  const __m128i vhalf = _mm_set1_epi32(0x4000);
  const __m128i vzero = _mm_setzero_si128();
  XNN_FORCE_REALIZATION(vinput_zero_point);
  XNN_FORCE_REALIZATION(voutput_zero_point);
  XNN_FORCE_REALIZATION(vinput_scale_div);
  XNN_FORCE_REALIZATION(vscale_ratio);
  $if BATCH_TILE > 8:
    for (; batch >= ${BATCH_TILE} * sizeof(${XINT8_T}); batch -= ${BATCH_TILE} * sizeof(${XINT8_T})) {
      __m128i vextx${ABC[0]} = ${_MM_CVTEPX8_EPI16}(_mm_loadl_epi64((const __m128i*) input));
      $for N in range(1, 2*SIMD_TILE):
        __m128i vextx${ABC[N]} = ${_MM_CVTEPX8_EPI16}(_mm_loadl_epi64((const __m128i*) (input + ${N * 8})));
      input += ${BATCH_TILE};

      $for N in range(2*SIMD_TILE):
        vextx${ABC[N]} = _mm_sub_epi16(vextx${ABC[N]}, vinput_zero_point);

      $for N in range(2*SIMD_TILE):
        vextx${ABC[N]} = _mm_slli_epi16(vextx${ABC[N]}, 7);

      $for N in range(2*SIMD_TILE):
        const __m128i vprodlo${ABC[N]} = _mm_mullo_epi16(vextx${ABC[N]}, vinput_scale_div);

      $for N in range(2*SIMD_TILE):
        const __m128i vprodhi${ABC[N]} = _mm_mulhi_epi16(vextx${ABC[N]}, vinput_scale_div);

      $for N in range(2*SIMD_TILE):
        __m128i vprod32firstfour${ABC[N]} = _mm_unpacklo_epi16(vprodlo${ABC[N]}, vprodhi${ABC[N]});
        vprod32firstfour${ABC[N]} = _mm_sub_epi32(vprod32firstfour${ABC[N]}, vhalf);

      $for N in range(2*SIMD_TILE):
        __m128i vprod32lastfour${ABC[N]} = _mm_unpackhi_epi16(vprodlo${ABC[N]}, vprodhi${ABC[N]});
        vprod32lastfour${ABC[N]} = _mm_sub_epi32(vprod32lastfour${ABC[N]}, vhalf);

      $for N in range(2*SIMD_TILE):
        __m128i vin${ABC[N]} = _mm_packs_epi32(vprod32firstfour${ABC[N]}, vprod32lastfour${ABC[N]});

      $for N in range(2*SIMD_TILE):
        vin${ABC[N]} = _mm_min_epi16(vin${ABC[N]}, vzero);

      $for N in range(2*SIMD_TILE):
        const __m128i vout${ABC[N]} = _mm_mulhrs_epi16(vextx${ABC[N]}, vscale_ratio);

      $for N in range(2*SIMD_TILE):
        __m128i vacc${ABC[N]} = _mm_mulhrs_epi16(vout${ABC[N]}, vin${ABC[N]});

      $for N in range(2*SIMD_TILE):
        vacc${ABC[N]} = _mm_adds_epi16(vacc${ABC[N]}, voutput_zero_point);

      $for N in range(SIMD_TILE):
        const __m128i vy${ABC[N]} = ${_MM_PACKXS_EPI16}(vacc${ABC[2*N]}, vacc${ABC[2*N+1]});

      _mm_storeu_si128((__m128i*) output, vy${ABC[0]});
      $for N in range(1, SIMD_TILE):
        _mm_storeu_si128((__m128i*) (output + ${N * 16}), vy${ABC[N]});
      output += ${BATCH_TILE};
    }
  for (; batch >= 8 * sizeof(${XINT8_T}); batch -= 8 * sizeof(${XINT8_T})) {
    __m128i vextx = ${_MM_CVTEPX8_EPI16}(_mm_loadl_epi64((const __m128i*) input));
    vextx = _mm_sub_epi16(vextx, vinput_zero_point);
    vextx = _mm_slli_epi16(vextx, 7);
    const __m128i vprodlo = _mm_mullo_epi16(vextx, vinput_scale_div);
    const __m128i vprodhi = _mm_mulhi_epi16(vextx, vinput_scale_div);
    __m128i vprod32firstfour = _mm_unpacklo_epi16(vprodlo, vprodhi);
    vprod32firstfour = _mm_sub_epi32(vprod32firstfour, vhalf);
    __m128i vprod32lastfour = _mm_unpackhi_epi16(vprodlo, vprodhi);
    vprod32lastfour = _mm_sub_epi32(vprod32lastfour, vhalf);
    __m128i vin = _mm_packs_epi32(vprod32firstfour, vprod32lastfour);
    vin = _mm_min_epi16(vin, vzero);
    const __m128i vout = _mm_mulhrs_epi16(vextx, vscale_ratio);
    __m128i vacc = _mm_mulhrs_epi16(vout, vin);
    vacc = _mm_adds_epi16(vacc, voutput_zero_point);
    input += 8;

    const __m128i vy = ${_MM_PACKXS_EPI16}(vacc, vacc);
    _mm_storel_epi64((__m128i*) output, vy);
    output += 8;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(${XINT8_T}));
    assert(batch <= 7 * sizeof(${XINT8_T}));

    __m128i vextx = ${_MM_CVTEPX8_EPI16}(_mm_loadl_epi64((const __m128i*) input));

    vextx = _mm_sub_epi16(vextx, vinput_zero_point);
    vextx = _mm_slli_epi16(vextx, 7);
    const __m128i vprodlo = _mm_mullo_epi16(vextx, vinput_scale_div);
    const __m128i vprodhi = _mm_mulhi_epi16(vextx, vinput_scale_div);
    __m128i vprod32firstfour = _mm_unpacklo_epi16(vprodlo, vprodhi);
    vprod32firstfour = _mm_sub_epi32(vprod32firstfour, vhalf);
    __m128i vprod32lastfour = _mm_unpackhi_epi16(vprodlo, vprodhi);
    vprod32lastfour = _mm_sub_epi32(vprod32lastfour, vhalf);
    __m128i vin = _mm_packs_epi32(vprod32firstfour, vprod32lastfour);
    vin = _mm_min_epi16(vin, vzero);
    const __m128i vout = _mm_mulhrs_epi16(vextx, vscale_ratio);
    __m128i vacc = _mm_mulhrs_epi16(vout, vin);
    vacc = _mm_adds_epi16(vacc, voutput_zero_point);

    __m128i vy = ${_MM_PACKXS_EPI16}(vacc, vacc);
    if (batch & (4 * sizeof(${XINT8_T}))) {
      _mm_storeu_si32(output, vy);
      vy = _mm_srli_epi64(vy, 32);
      output += 4;
    }
    if (batch & (2 * sizeof(${XINT8_T}))) {
      _mm_storeu_si16(output, vy);
      vy = _mm_srli_epi32(vy, 16);
      output += 2;
    }
    if (batch & (1 * sizeof(${XINT8_T}))) {
      *output = (${XINT8_T}) _mm_extract_epi8(vy, 0);
    }
  }
}