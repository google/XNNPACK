// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 16
$assert BATCH_TILE % 16 == 0
$SIMD_TILE = BATCH_TILE // 16
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <emmintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/vhswish.h"
#include "xnnpack/unaligned.h"


$XINT8_T = {"QS8": "int8_t", "QU8": "uint8_t"}[DATATYPE]
$_MM_PACKXS_EPI16 = {"QS8": "_mm_packs_epi16", "QU8": "_mm_packus_epi16"}[DATATYPE]
void xnn_${DATATYPE.lower()}_vhswish_ukernel__sse2_u${BATCH_TILE}(
    size_t batch,
    const ${XINT8_T}* input,
    ${XINT8_T}* output,
    const union xnn_${DATATYPE.lower()}_hswish_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(${XINT8_T}) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const __m128i vinput_zero_point = _mm_set1_epi16(params->sse2.input_zero_point);
  const __m128i voutput_zero_point = _mm_set1_epi16(params->sse2.output_zero_point);
  const __m128i vinput_scale_div = _mm_set1_epi16(params->sse2.input_scale_div);
  const __m128i vscale_ratio = _mm_set1_epi16(params->sse2.scale_ratio);
  const __m128i vhalf = _mm_set1_epi32(0x4000);
  const __m128i vzero = _mm_setzero_si128();
  XNN_FORCE_REALIZATION(vinput_zero_point);
  XNN_FORCE_REALIZATION(voutput_zero_point);
  XNN_FORCE_REALIZATION(vinput_scale_div);
  XNN_FORCE_REALIZATION(vscale_ratio);
  $if BATCH_TILE > 16:
    for (; batch >= ${BATCH_TILE} * sizeof(${XINT8_T}); batch -= ${BATCH_TILE} * sizeof(${XINT8_T})) {
      const __m128i vx${ABC[0]} = _mm_loadu_si128((const __m128i*) input);
      $for N in range(1, SIMD_TILE):
        const __m128i vx${ABC[N]} = _mm_loadu_si128((const __m128i*) (input + ${N * 16}));
      input += ${BATCH_TILE};

      $for N in range(SIMD_TILE):
        $if DATATYPE == "QU8":
          __m128i vextx${ABC[2*N]} = _mm_unpacklo_epi8(vx${ABC[N]}, vzero);
          __m128i vextx${ABC[2*N+1]} = _mm_unpackhi_epi8(vx${ABC[N]}, vzero);
        $else:
          const __m128i vm${ABC[N]} = _mm_cmpgt_epi8(_mm_setzero_si128(), vx${ABC[N]});
          __m128i vextx${ABC[2*N]} = _mm_unpacklo_epi8(vx${ABC[N]}, vm${ABC[N]});
          __m128i vextx${ABC[2*N+1]} = _mm_unpackhi_epi8(vx${ABC[N]}, vm${ABC[N]});

      $for N in range(2*SIMD_TILE):
        vextx${ABC[N]} = _mm_sub_epi16(vextx${ABC[N]}, vinput_zero_point);

      $for N in range(2*SIMD_TILE):
        vextx${ABC[N]} = _mm_slli_epi16(vextx${ABC[N]}, 7);

      $for N in range(2*SIMD_TILE):
        const __m128i vprodlo${ABC[N]} = _mm_mullo_epi16(vextx${ABC[N]}, vinput_scale_div);

      $for N in range(2*SIMD_TILE):
        const __m128i vprodhi${ABC[N]} = _mm_mulhi_epi16(vextx${ABC[N]}, vinput_scale_div);

      $for N in range(2*SIMD_TILE):
        __m128i vprod32firstfour${ABC[N]} = _mm_unpacklo_epi16(vprodlo${ABC[N]}, vprodhi${ABC[N]});
        vprod32firstfour${ABC[N]} = _mm_sub_epi32(vprod32firstfour${ABC[N]}, vhalf);

      $for N in range(2*SIMD_TILE):
        __m128i vprod32lastfour${ABC[N]} = _mm_unpackhi_epi16(vprodlo${ABC[N]}, vprodhi${ABC[N]});
        vprod32lastfour${ABC[N]} = _mm_sub_epi32(vprod32lastfour${ABC[N]}, vhalf);

      $for N in range(2*SIMD_TILE):
        __m128i vin${ABC[N]} = _mm_packs_epi32(vprod32firstfour${ABC[N]}, vprod32lastfour${ABC[N]});

      $for N in range(2*SIMD_TILE):
        vin${ABC[N]} = _mm_min_epi16(vin${ABC[N]}, vzero);

      $for N in range(2*SIMD_TILE):
        const __m128i vouthi${ABC[N]} =  _mm_mulhi_epi16(vextx${ABC[N]}, vscale_ratio);

      $for N in range(2*SIMD_TILE):
        const __m128i voutlo${ABC[N]} =  _mm_mullo_epi16(vextx${ABC[N]}, vscale_ratio);

      $for N in range(2*SIMD_TILE):
        __m128i voutfirstfour${ABC[N]} = _mm_unpacklo_epi16(voutlo${ABC[N]}, vouthi${ABC[N]});
        __m128i voutlastfour${ABC[N]} = _mm_unpackhi_epi16(voutlo${ABC[N]}, vouthi${ABC[N]});

      $for N in range(2*SIMD_TILE):
        voutfirstfour${ABC[N]} = _mm_add_epi32(voutfirstfour${ABC[N]}, vhalf);
        voutlastfour${ABC[N]} = _mm_add_epi32(voutlastfour${ABC[N]}, vhalf);

      $for N in range(2*SIMD_TILE):
        voutfirstfour${ABC[N]} = _mm_srai_epi32(voutfirstfour${ABC[N]}, 15);
        voutlastfour${ABC[N]} = _mm_srai_epi32(voutlastfour${ABC[N]}, 15);

      $for N in range(2*SIMD_TILE):
        const __m128i vout${ABC[N]} = _mm_packs_epi32(voutfirstfour${ABC[N]}, voutlastfour${ABC[N]});

      $for N in range(2*SIMD_TILE):
        const __m128i vacclo${ABC[N]} = _mm_mullo_epi16(vout${ABC[N]}, vin${ABC[N]});

      $for N in range(2*SIMD_TILE):
        const __m128i vacchi${ABC[N]} = _mm_mulhi_epi16(vout${ABC[N]}, vin${ABC[N]});

      $for N in range(2*SIMD_TILE):
        __m128i vaccfirst${ABC[N]} = _mm_unpacklo_epi16(vacclo${ABC[N]}, vacchi${ABC[N]});
        vaccfirst${ABC[N]} = _mm_add_epi32(vaccfirst${ABC[N]}, vhalf);
        vaccfirst${ABC[N]} = _mm_srai_epi32(vaccfirst${ABC[N]}, 15);

      $for N in range(2*SIMD_TILE):
        __m128i vaccsec${ABC[N]} = _mm_unpackhi_epi16(vacclo${ABC[N]}, vacchi${ABC[N]});
        vaccsec${ABC[N]} = _mm_add_epi32(vaccsec${ABC[N]}, vhalf);
        vaccsec${ABC[N]} = _mm_srai_epi32(vaccsec${ABC[N]}, 15);

      $for N in range(2*SIMD_TILE):
        __m128i vacc${ABC[N]} = _mm_packs_epi32(vaccfirst${ABC[N]}, vaccsec${ABC[N]});

      $for N in range(2*SIMD_TILE):
        vacc${ABC[N]} = _mm_adds_epi16(vacc${ABC[N]}, voutput_zero_point);

      $for N in range(SIMD_TILE):
        const __m128i vy${ABC[N]} = ${_MM_PACKXS_EPI16}(vacc${ABC[2*N]}, vacc${ABC[2*N+1]});

      _mm_storeu_si128((__m128i*) output, vy${ABC[0]});
      $for N in range(1, SIMD_TILE):
        _mm_storeu_si128((__m128i*) (output + ${N * 16}), vy${ABC[N]});
      output += ${BATCH_TILE};
    }
  for (; batch >= 16 * sizeof(${XINT8_T}); batch -= 16 * sizeof(${XINT8_T})) {
    const __m128i vx = _mm_loadu_si128((const __m128i*) input);
    input += 16;

    $if DATATYPE == "QU8":
      __m128i vextx0 = _mm_unpacklo_epi8(vx, vzero);
      __m128i vextx1 = _mm_unpackhi_epi8(vx, vzero);
    $else:
      const __m128i vm = _mm_cmpgt_epi8(_mm_setzero_si128(), vx);
      __m128i vextx0 = _mm_unpacklo_epi8(vx, vm);
      __m128i vextx1 = _mm_unpackhi_epi8(vx, vm);

    vextx0 = _mm_sub_epi16(vextx0, vinput_zero_point);
    vextx1 = _mm_sub_epi16(vextx1, vinput_zero_point);

    vextx0 = _mm_slli_epi16(vextx0, 7);
    vextx1 = _mm_slli_epi16(vextx1, 7);

    const __m128i vprodlo0 = _mm_mullo_epi16(vextx0, vinput_scale_div);
    const __m128i vprodlo1 = _mm_mullo_epi16(vextx1, vinput_scale_div);
    const __m128i vprodhi0 = _mm_mulhi_epi16(vextx0, vinput_scale_div);
    const __m128i vprodhi1 = _mm_mulhi_epi16(vextx1, vinput_scale_div);

    __m128i vprod32firstfour0 = _mm_unpacklo_epi16(vprodlo0, vprodhi0);
    __m128i vprod32firstfour1 = _mm_unpacklo_epi16(vprodlo1, vprodhi1);
    vprod32firstfour0 = _mm_sub_epi32(vprod32firstfour0, vhalf);
    vprod32firstfour1 = _mm_sub_epi32(vprod32firstfour1, vhalf);

    __m128i vprod32lastfour0 = _mm_unpackhi_epi16(vprodlo0, vprodhi0);
    __m128i vprod32lastfour1 = _mm_unpackhi_epi16(vprodlo1, vprodhi1);
    vprod32lastfour0 = _mm_sub_epi32(vprod32lastfour0, vhalf);
    vprod32lastfour1 = _mm_sub_epi32(vprod32lastfour1, vhalf);

    __m128i vin0 = _mm_packs_epi32(vprod32firstfour0, vprod32lastfour0);
    __m128i vin1 = _mm_packs_epi32(vprod32firstfour1, vprod32lastfour1);

    vin0 = _mm_min_epi16(vin0, vzero);
    vin1 = _mm_min_epi16(vin1, vzero);

    const __m128i voutlo0 =  _mm_mullo_epi16(vextx0, vscale_ratio);
    const __m128i voutlo1 =  _mm_mullo_epi16(vextx1, vscale_ratio);

    const __m128i vouthi0 =  _mm_mulhi_epi16(vextx0, vscale_ratio);
    const __m128i vouthi1 =  _mm_mulhi_epi16(vextx1, vscale_ratio);

    __m128i voutfirstfour0 = _mm_unpacklo_epi16(voutlo0, vouthi0);
    __m128i voutlastfour0 = _mm_unpackhi_epi16(voutlo0, vouthi0);
    __m128i voutfirstfour1 = _mm_unpacklo_epi16(voutlo1, vouthi1);
    __m128i voutlastfour1 = _mm_unpackhi_epi16(voutlo1, vouthi1);

    voutfirstfour0 = _mm_add_epi32(voutfirstfour0, vhalf);
    voutlastfour0 = _mm_add_epi32(voutlastfour0, vhalf);
    voutfirstfour1 = _mm_add_epi32(voutfirstfour1, vhalf);
    voutlastfour1 = _mm_add_epi32(voutlastfour1, vhalf);

    voutfirstfour0 = _mm_srai_epi32(voutfirstfour0, 15);
    voutlastfour0 = _mm_srai_epi32(voutlastfour0, 15);
    voutfirstfour1 = _mm_srai_epi32(voutfirstfour1, 15);
    voutlastfour1 = _mm_srai_epi32(voutlastfour1, 15);

    const __m128i vout0 = _mm_packs_epi32(voutfirstfour0, voutlastfour0);
    const __m128i vout1 = _mm_packs_epi32(voutfirstfour1, voutlastfour1);

    const __m128i vacclo0 = _mm_mullo_epi16(vout0, vin0);
    const __m128i vacclo1 = _mm_mullo_epi16(vout1, vin1);
    const __m128i vacchi0 = _mm_mulhi_epi16(vout0, vin0);
    const __m128i vacchi1 = _mm_mulhi_epi16(vout1, vin1);

    __m128i vaccfirst0 = _mm_unpacklo_epi16(vacclo0, vacchi0);
    __m128i vaccfirst1 = _mm_unpacklo_epi16(vacclo1, vacchi1);
    vaccfirst0 = _mm_add_epi32(vaccfirst0, vhalf);
    vaccfirst1 = _mm_add_epi32(vaccfirst1, vhalf);
    vaccfirst0 = _mm_srai_epi32(vaccfirst0, 15);
    vaccfirst1 = _mm_srai_epi32(vaccfirst1, 15);

    __m128i vaccsec0 = _mm_unpackhi_epi16(vacclo0, vacchi0);
    __m128i vaccsec1 = _mm_unpackhi_epi16(vacclo1, vacchi1);
    vaccsec0 = _mm_add_epi32(vaccsec0, vhalf);
    vaccsec1 = _mm_add_epi32(vaccsec1, vhalf);
    vaccsec0 = _mm_srai_epi32(vaccsec0, 15);
    vaccsec1 = _mm_srai_epi32(vaccsec1, 15);

    __m128i vacc0 = _mm_packs_epi32(vaccfirst0, vaccsec0);
    __m128i vacc1 = _mm_packs_epi32(vaccfirst1, vaccsec1);

    vacc0 = _mm_adds_epi16(vacc0, voutput_zero_point);
    vacc1 = _mm_adds_epi16(vacc1, voutput_zero_point);

    const __m128i vy = ${_MM_PACKXS_EPI16}(vacc0, vacc1);
    _mm_storeu_si128((__m128i*) output, vy);
    output += 16;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(${XINT8_T}));
    assert(batch <= 15 * sizeof(${XINT8_T}));

    const __m128i vx = _mm_loadu_si128((const __m128i*) input);

    $if DATATYPE == "QU8":
      __m128i vextx0 = _mm_unpacklo_epi8(vx, vzero);
      __m128i vextx1 = _mm_unpackhi_epi8(vx, vzero);
    $else:
      const __m128i vm = _mm_cmpgt_epi8(_mm_setzero_si128(), vx);
      __m128i vextx0 = _mm_unpacklo_epi8(vx, vm);
      __m128i vextx1 = _mm_unpackhi_epi8(vx, vm);

    vextx0 = _mm_sub_epi16(vextx0, vinput_zero_point);
    vextx1 = _mm_sub_epi16(vextx1, vinput_zero_point);

    vextx0 = _mm_slli_epi16(vextx0, 7);
    vextx1 = _mm_slli_epi16(vextx1, 7);

    const __m128i vprodlo0 = _mm_mullo_epi16(vextx0, vinput_scale_div);
    const __m128i vprodlo1 = _mm_mullo_epi16(vextx1, vinput_scale_div);
    const __m128i vprodhi0 = _mm_mulhi_epi16(vextx0, vinput_scale_div);
    const __m128i vprodhi1 = _mm_mulhi_epi16(vextx1, vinput_scale_div);

    __m128i vprod32firstfour0 = _mm_unpacklo_epi16(vprodlo0, vprodhi0);
    __m128i vprod32firstfour1 = _mm_unpacklo_epi16(vprodlo1, vprodhi1);
    vprod32firstfour0 = _mm_sub_epi32(vprod32firstfour0, vhalf);
    vprod32firstfour1 = _mm_sub_epi32(vprod32firstfour1, vhalf);

    __m128i vprod32lastfour0 = _mm_unpackhi_epi16(vprodlo0, vprodhi0);
    __m128i vprod32lastfour1 = _mm_unpackhi_epi16(vprodlo1, vprodhi1);
    vprod32lastfour0 = _mm_sub_epi32(vprod32lastfour0, vhalf);
    vprod32lastfour1 = _mm_sub_epi32(vprod32lastfour1, vhalf);

    __m128i vin0 = _mm_packs_epi32(vprod32firstfour0, vprod32lastfour0);
    __m128i vin1 = _mm_packs_epi32(vprod32firstfour1, vprod32lastfour1);

    vin0 = _mm_min_epi16(vin0, vzero);
    vin1 = _mm_min_epi16(vin1, vzero);

    const __m128i voutlo0 =  _mm_mullo_epi16(vextx0, vscale_ratio);
    const __m128i voutlo1 =  _mm_mullo_epi16(vextx1, vscale_ratio);

    const __m128i vouthi0 =  _mm_mulhi_epi16(vextx0, vscale_ratio);
    const __m128i vouthi1 =  _mm_mulhi_epi16(vextx1, vscale_ratio);

    __m128i voutfirstfour0 = _mm_unpacklo_epi16(voutlo0, vouthi0);
    __m128i voutlastfour0 = _mm_unpackhi_epi16(voutlo0, vouthi0);
    __m128i voutfirstfour1 = _mm_unpacklo_epi16(voutlo1, vouthi1);
    __m128i voutlastfour1 = _mm_unpackhi_epi16(voutlo1, vouthi1);

    voutfirstfour0 = _mm_add_epi32(voutfirstfour0, vhalf);
    voutlastfour0 = _mm_add_epi32(voutlastfour0, vhalf);
    voutfirstfour1 = _mm_add_epi32(voutfirstfour1, vhalf);
    voutlastfour1 = _mm_add_epi32(voutlastfour1, vhalf);

    voutfirstfour0 = _mm_srai_epi32(voutfirstfour0, 15);
    voutlastfour0 = _mm_srai_epi32(voutlastfour0, 15);
    voutfirstfour1 = _mm_srai_epi32(voutfirstfour1, 15);
    voutlastfour1 = _mm_srai_epi32(voutlastfour1, 15);

    const __m128i vout0 = _mm_packs_epi32(voutfirstfour0, voutlastfour0);
    const __m128i vout1 = _mm_packs_epi32(voutfirstfour1, voutlastfour1);

    const __m128i vacclo0 = _mm_mullo_epi16(vout0, vin0);
    const __m128i vacclo1 = _mm_mullo_epi16(vout1, vin1);
    const __m128i vacchi0 = _mm_mulhi_epi16(vout0, vin0);
    const __m128i vacchi1 = _mm_mulhi_epi16(vout1, vin1);

    __m128i vaccfirst0 = _mm_unpacklo_epi16(vacclo0, vacchi0);
    __m128i vaccfirst1 = _mm_unpacklo_epi16(vacclo1, vacchi1);
    vaccfirst0 = _mm_srai_epi32(vaccfirst0, 15);
    vaccfirst1 = _mm_srai_epi32(vaccfirst1, 15);

    __m128i vaccsec0 = _mm_unpackhi_epi16(vacclo0, vacchi0);
    __m128i vaccsec1 = _mm_unpackhi_epi16(vacclo1, vacchi1);
    vaccsec0 = _mm_srai_epi32(vaccsec0, 15);
    vaccsec1 = _mm_srai_epi32(vaccsec1, 15);

    __m128i vacc0 = _mm_packs_epi32(vaccfirst0, vaccsec0);
    __m128i vacc1 = _mm_packs_epi32(vaccfirst1, vaccsec1);

    vacc0 = _mm_adds_epi16(vacc0, voutput_zero_point);
    vacc1 = _mm_adds_epi16(vacc1, voutput_zero_point);

    __m128i vy = ${_MM_PACKXS_EPI16}(vacc0, vacc1);
    if (batch & (8 * sizeof(${XINT8_T}))) {
      _mm_storel_epi64((__m128i*) output, vy);
      vy = _mm_unpackhi_epi64(vy, vy);
      output += 8;
    }
    if (batch & (4 * sizeof(${XINT8_T}))) {
      unaligned_store_u32(output, (uint32_t) _mm_cvtsi128_si32(vy));
      vy = _mm_srli_epi64(vy, 32);
      output += 4;
    }
    uint32_t vy0 = (uint32_t) _mm_cvtsi128_si32(vy);
    if (batch & (2 * sizeof(${XINT8_T}))) {
      unaligned_store_u16(output, (uint16_t) vy0);
      vy0 >>= 16;
      output += 2;
    }
    if (batch & (1 * sizeof(${XINT8_T}))) {
      *output = (${XINT8_T}) vy0;
    }
  }
}