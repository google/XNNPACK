// Copyright 2025 Imagination Technologies, inc.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE in ["QS8", "QU8"]
$assert LMUL in [1, 2]
#include <assert.h>
#include <riscv_vector.h>
#include "src/xnnpack/vbinary.h"

$XINT8_T = {"QS8": "int8_t", "QU8": "uint8_t"}[DATATYPE]

void xnn_${DATATYPE.lower()}_vadd_minmax_ukernel__rvv_u${LMUL}v(
    size_t batch,
    const ${XINT8_T}* input_a,
    const ${XINT8_T}* input_b,
    ${XINT8_T}* output,
    const struct xnn_${DATATYPE.lower()}_add_minmax_params* restrict params)
{
  assert(batch != 0);
  assert(batch % sizeof(${XINT8_T}) == 0);
  assert(input_a != NULL);
  assert(input_b != NULL);
  assert(output != NULL);

  const int32_t bias = params->scalar.bias;
  const int32_t a_multiplier = params->scalar.a_multiplier;
  const int32_t b_multiplier = params->scalar.b_multiplier;
  const uint32_t shift = params->scalar.shift;
  const int32_t output_min = params->scalar.output_min;
  const int32_t output_max = params->scalar.output_max;
  const int32_t output_zero_point = params->scalar.output_zero_point;

  do {
    size_t vl = __riscv_vsetvl_e8m${LMUL}(batch); batch -= vl;

    $if DATATYPE == "QS8":
      vint8m${LMUL}_t in_a_i8v = __riscv_vle8_v_i8m${LMUL}(input_a, vl); input_a += vl;
      vint8m${LMUL}_t in_b_i8v = __riscv_vle8_v_i8m${LMUL}(input_b, vl); input_b += vl;
      vint32m${LMUL*4}_t a_i32v = __riscv_vsext_vf4_i32m${LMUL*4}(in_a_i8v, vl);
      vint32m${LMUL*4}_t b_i32v = __riscv_vsext_vf4_i32m${LMUL*4}(in_b_i8v, vl);
    $else:
      vuint8m${LMUL}_t in_a_u8v = __riscv_vle8_v_u8m${LMUL}(input_a, vl); input_a += vl;
      vuint8m${LMUL}_t in_b_u8v = __riscv_vle8_v_u8m${LMUL}(input_b, vl); input_b += vl;
      vint32m${LMUL*4}_t a_i32v = __riscv_vreinterpret_v_u32m${LMUL*4}_i32m${LMUL*4}(__riscv_vzext_vf4_u32m${LMUL*4}(in_a_u8v, vl));
      vint32m${LMUL*4}_t b_i32v = __riscv_vreinterpret_v_u32m${LMUL*4}_i32m${LMUL*4}(__riscv_vzext_vf4_u32m${LMUL*4}(in_b_u8v, vl));

    a_i32v = __riscv_vmul_vx_i32m${LMUL*4}(a_i32v, a_multiplier, vl);
    b_i32v = __riscv_vmul_vx_i32m${LMUL*4}(b_i32v, b_multiplier, vl);
    vint32m${LMUL*4}_t out_i32v = __riscv_vadd_vx_i32m${LMUL*4}(a_i32v, bias, vl);
    out_i32v = __riscv_vadd_vv_i32m${LMUL*4}(out_i32v, b_i32v, vl);
    out_i32v = __riscv_vsra_vx_i32m${LMUL*4}(out_i32v, shift, vl);
    out_i32v = __riscv_vadd_vx_i32m${LMUL*4}(out_i32v, output_zero_point, vl);

    out_i32v = __riscv_vmax_vx_i32m${LMUL*4}(out_i32v, output_min, vl);
    out_i32v = __riscv_vmin_vx_i32m${LMUL*4}(out_i32v, output_max, vl);

    vint16m${LMUL*2}_t out_i16v = __riscv_vncvt_x_x_w_i16m${LMUL*2}(out_i32v, vl);
    $if DATATYPE == "QS8":
      vint8m${LMUL}_t out_i8v = __riscv_vncvt_x_x_w_i8m${LMUL}(out_i16v, vl);
      __riscv_vse8_v_i8m${LMUL}(output, out_i8v, vl); output += vl;
    $else:
      vuint8m${LMUL}_t out_u8v = __riscv_vncvt_x_x_w_u8m${LMUL}(__riscv_vreinterpret_v_i16m${LMUL*2}_u16m${LMUL*2}(out_i16v), vl);
      __riscv_vse8_v_u8m${LMUL}(output, out_u8v, vl); output += vl;
  } while (batch != 0);
}