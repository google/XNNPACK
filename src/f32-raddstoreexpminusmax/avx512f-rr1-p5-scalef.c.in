// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 16 == 0
$assert BATCH_TILE >= 16
$SIMD_TILE = BATCH_TILE // 16
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/raddstoreexpminusmax.h>


void xnn_f32_raddstoreexpminusmax_ukernel__avx512f_rr1_p5_scalef_u${BATCH_TILE}${"" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS}(
    size_t batch,
    const float* input,
    const float* max,
    float* output,
    float* sum,
    const union xnn_f32_expminus_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(max != NULL);
  assert(output != NULL);
  assert(sum != NULL);

  const __m512 vi_max = _mm512_set1_ps(*max);
  const __m512 vlog2e = _mm512_set1_ps(params->avx512_rr1_p5.log2e);
  const __m512 vminus_ln2 = _mm512_set1_ps(params->avx512_rr1_p5.minus_ln2);
  const __m512 vc5 = _mm512_set1_ps(params->avx512_rr1_p5.c5);
  const __m512 vc4 = _mm512_set1_ps(params->avx512_rr1_p5.c4);
  const __m512 vc3 = _mm512_set1_ps(params->avx512_rr1_p5.c3);
  const __m512 vc2 = _mm512_set1_ps(params->avx512_rr1_p5.c2);
  const __m512 vc1 = _mm512_set1_ps(params->avx512_rr1_p5.c1);
  const __m512 vc0 = _mm512_set1_ps(params->avx512_rr1_p5.c0);

  $for K in range(ACCUMULATORS):
    __m512 vacc${K} = _mm512_setzero_ps();
  for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
    const __m512 vi0 = _mm512_loadu_ps(input);
    $for N in range(1, SIMD_TILE):
      const __m512 vi${N} = _mm512_loadu_ps(input + ${N * 16});
    input += ${BATCH_TILE};

    $for N in range(SIMD_TILE):
      const __m512 vx${N} = _mm512_sub_ps(vi${N}, vi_max);

    $for N in range(SIMD_TILE):
      const __m512 vn${N} = _mm512_roundscale_ps(_mm512_mul_ps(vx${N}, vlog2e), 0);

    $for N in range(SIMD_TILE):
      const __m512 vt${N} = _mm512_fmadd_ps(vn${N}, vminus_ln2, vx${N});

    $for N in range(SIMD_TILE):
      __m512 vp${N} = _mm512_fmadd_ps(vc5, vt${N}, vc4);

    $for N in range(SIMD_TILE):
      vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vc3);

    $for N in range(SIMD_TILE):
      vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vc2);

    $for N in range(SIMD_TILE):
      vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vc1);

    $for N in range(SIMD_TILE):
      vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vc0);

    $for N in range(SIMD_TILE):
      const __m512 vf${N} = _mm512_scalef_ps(vp${N}, vn${N});

    _mm512_storeu_ps(output, vf0);
    $for N in range(1, SIMD_TILE):
      _mm512_storeu_ps(output + ${N * 16}, vf${N});
    output += ${BATCH_TILE};

    $for N in range(SIMD_TILE):
      vacc${N % ACCUMULATORS} = _mm512_add_ps(vacc${N % ACCUMULATORS}, vf${N});
  }
  $if ACCUMULATORS > 1:
    $ACC_SLICE = 1
    $while ACC_SLICE < ACCUMULATORS:
      $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
        $if A + ACC_SLICE < ACCUMULATORS:
          vacc${A} = _mm512_add_ps(vacc${A}, vacc${A + ACC_SLICE});
      $ACC_SLICE *= 2

  __m512 vacc = vacc0;
  for (; batch >= 16 * sizeof(float); batch -= 16 * sizeof(float)) {
    const __m512 vi = _mm512_loadu_ps(input);
    input += 16;

    const __m512 vx = _mm512_sub_ps(vi, vi_max);

    const __m512 vn = _mm512_roundscale_ps(_mm512_mul_ps(vx, vlog2e), 0);

    const __m512 vt = _mm512_fmadd_ps(vn, vminus_ln2, vx);

    __m512 vp = _mm512_fmadd_ps(vc5, vt, vc4);
    vp = _mm512_fmadd_ps(vp, vt, vc3);
    vp = _mm512_fmadd_ps(vp, vt, vc2);
    vp = _mm512_fmadd_ps(vp, vt, vc1);
    vp = _mm512_fmadd_ps(vp, vt, vc0);

    const __m512 vf = _mm512_scalef_ps(vp, vn);

    _mm512_storeu_ps(output, vf);
    output += 16;

    vacc = _mm512_add_ps(vacc, vf);
  }
  if (batch != 0) {
    // Prepare mask for valid 32-bit batch (depends on batch).
    batch >>= XNN_LOG2_SIZEOF_FLOAT;
    const __mmask16 vmask = _cvtu32_mask16((uint32_t) ((UINT32_C(1) << batch) - UINT32_C(1)));

    const __m512 vi = _mm512_maskz_loadu_ps(vmask, input);

    const __m512 vx = _mm512_sub_ps(vi, vi_max);

    const __m512 vn = _mm512_roundscale_ps(_mm512_mul_ps(vx, vlog2e), 0);

    const __m512 vt = _mm512_fmadd_ps(vn, vminus_ln2, vx);

    __m512 vp = _mm512_fmadd_ps(vc5, vt, vc4);
    vp = _mm512_fmadd_ps(vp, vt, vc3);
    vp = _mm512_fmadd_ps(vp, vt, vc2);
    vp = _mm512_fmadd_ps(vp, vt, vc1);
    vp = _mm512_fmadd_ps(vp, vt, vc0);

    const __m512 vf = _mm512_scalef_ps(vp, vn);

    _mm512_mask_storeu_ps(output, vmask, vf);

    vacc = _mm512_mask_add_ps(vacc, vmask, vacc, vf);
  }
  *sum = _mm512_reduce_add_ps(vacc);
}
