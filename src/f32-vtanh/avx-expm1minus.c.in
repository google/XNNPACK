// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert (LOG2LUT, P, H) in [(0, 6, 5), (2, 4, 3), (2, 4, 2)]
$assert not PS or (P, H) == (4, 3)
$assert DIV in ["DIV", "NR1", "NR1ADJ", "NR2"]
$assert BATCH_TILE % 8 == 0
$assert BATCH_TILE >= 8
$SIMD_TILE = BATCH_TILE // 8
$LUT = 1 << LOG2LUT
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/microparams.h"
#include "xnnpack/vunary.h"

$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d%s" % (P, H, "ps" if PS else "ts")
$PERM_SUFFIX = "_perm" if LOG2LUT != 0 else ""
$DIV_SUFFIX = DIV.lower()
$PARAMS_STRUCT = "avx_expm1minus_rr1_" + LUT_SUFFIX + ("p%dh%d" % (P, H)) + PERM_SUFFIX
$ISA = {0: "avx", 3: "fma3"}[FMA]
void xnn_f32_vtanh_ukernel__${ISA}_expm1minus_rr1_${LUT_SUFFIX}${POLY_SUFFIX}${PERM_SUFFIX}_${DIV_SUFFIX}_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_tanh_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const __m256 vsign_mask = _mm256_load_ps(params->${PARAMS_STRUCT}.sign_mask);
  const __m256 vsat_cutoff = _mm256_load_ps(params->${PARAMS_STRUCT}.sat_cutoff);
  const __m256 vlog2e = _mm256_load_ps(params->${PARAMS_STRUCT}.log2e);
  const __m256 vmagic_bias = _mm256_load_ps(params->${PARAMS_STRUCT}.magic_bias);
  $if LOG2LUT != 0:
    const __m128 vtable = _mm_load_ps(params->${PARAMS_STRUCT}.table);
  const __m256 vminus_ln2 = _mm256_load_ps(params->${PARAMS_STRUCT}.minus_ln2);
  $for i in reversed(range(2, P+1)):
    const __m256 vc${i} = _mm256_load_ps(params->${PARAMS_STRUCT}.c${i});
  const __m256 vtwo = _mm256_load_ps(params->${PARAMS_STRUCT}.two);
  const __m256 vminus_one = _mm256_load_ps(params->${PARAMS_STRUCT}.minus_one);

  $if BATCH_TILE > 8:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      const __m256 vx0 = _mm256_loadu_ps(input);
      $for N in range(1, SIMD_TILE):
        const __m256 vx${N} = _mm256_loadu_ps(input + ${N * 8});
      input += ${BATCH_TILE};

      $for N in range(SIMD_TILE):
        $if SAT == "MINMAX":
          __m256 vz${N} = _mm256_or_ps(vx${N}, vsign_mask);
        $elif SAT == "SELECT":
          const __m256 vz${N} = _mm256_or_ps(vx${N}, vsign_mask);

      $for N in range(SIMD_TILE):
        const __m256 vinvsignx${N} = _mm256_xor_ps(vx${N}, vz${N});
        $if SAT == "MINMAX":
          vz${N} = _mm256_max_ps(vsat_cutoff, vz${N});
        $elif SAT == "SELECT":
          const __m256 vm${N} = _mm256_cmp_ps(vz${N}, vsat_cutoff, _CMP_LE_OS);

      $for N in range(SIMD_TILE):
        $if FMA == 3:
          __m256 vn${N} = _mm256_fmadd_ps(vz${N}, vlog2e, vmagic_bias);
        $else:
          __m256 vn${N} = _mm256_add_ps(_mm256_mul_ps(vz${N}, vlog2e), vmagic_bias);

      $if LOG2LUT == 0:
        $for N in range(SIMD_TILE):
          const __m128 vn${N}_hi = _mm256_extractf128_ps(vn${N}, 1);

        $for N in range(SIMD_TILE):
          __m256 vs${N} = _mm256_castps128_ps256(_mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn${N})), 23)));
          const __m128 vs${N}_hi = _mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(vn${N}_hi), 23));

        $for N in range(SIMD_TILE):
          vs${N} = _mm256_insertf128_ps(vs${N}, vs${N}_hi, 1);
      $else:
        $for N in range(SIMD_TILE):
          const __m128 vn${N}_hi = _mm256_extractf128_ps(vn${N}, 1);
          __m128i ve${N}_lo = _mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn${N})), ${23-LOG2LUT});

        $for N in range(SIMD_TILE):
          __m128i ve${N}_hi = _mm_slli_epi32(_mm_castps_si128(vn${N}_hi), ${23-LOG2LUT});
          const __m128i vl${N}_lo = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(_mm256_castps256_ps128(vn${N}))));
          const __m128i vl${N}_hi = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(vn${N}_hi)));

        $for N in range(SIMD_TILE):
          const __m128 vs${N}_lo = _mm_castsi128_ps(_mm_add_epi32(ve${N}_lo, vl${N}_lo));
          const __m128 vs${N}_hi = _mm_castsi128_ps(_mm_add_epi32(ve${N}_hi, vl${N}_hi));

        $for N in range(SIMD_TILE):
          const __m256 vs${N} = _mm256_insertf128_ps(_mm256_castps128_ps256(vs${N}_lo), vs${N}_hi, 1);

      $for N in range(SIMD_TILE):
        vn${N} = _mm256_sub_ps(vn${N}, vmagic_bias);

      $for N in range(SIMD_TILE):
        $if FMA == 3:
          const __m256 vt${N} = _mm256_fmadd_ps(vn${N}, vminus_ln2, vz${N});
        $else:
          const __m256 vt${N} = _mm256_add_ps(_mm256_mul_ps(vn${N}, vminus_ln2), vz${N});

      $if FMA == 3:
        $for N in range(SIMD_TILE):
          __m256 vp${N} = vc${P};
        $for i in reversed(range(2, P)):
          $for N in range(SIMD_TILE):
            vp${N} = _mm256_fmadd_ps(vp${N}, vt${N}, vc${i});
      $else:
        $for N in range(SIMD_TILE):
          __m256 vp${N} = _mm256_add_ps(_mm256_mul_ps(vc${P}, vt${N}), vc${P-1});
        $for i in reversed(range(2, P-1)):
          $for N in range(SIMD_TILE):
            vp${N} = _mm256_add_ps(_mm256_mul_ps(vp${N}, vt${N}), vc${i});
      $for N in range(SIMD_TILE):
        $if P == H + 1:
          $if FMA == 3:
            vp${N} = _mm256_fmadd_ps(vp${N}, vt${N}, vtwo);
          $else:
            vp${N} = _mm256_add_ps(_mm256_mul_ps(vp${N}, vt${N}), vtwo);
        $else:
          vp${N} = _mm256_mul_ps(vp${N}, vt${N});

      $for N in range(SIMD_TILE):
        const __m256 vts${N} = _mm256_mul_ps(vt${N}, vs${N});
        const __m256 vsmo${N} = _mm256_add_ps(vs${N}, vminus_one);

      $if P == H + 1:
        $for N in range(SIMD_TILE):
          $if FMA == 3:
            const __m256 vemo${N} = _mm256_fmadd_ps(vp${N}, vts${N}, vsmo${N});
          $else:
            const __m256 vemo${N} = _mm256_add_ps(_mm256_mul_ps(vp${N}, vts${N}), vsmo${N});
      $else:
        $if FMA == 3:
          $for N in range(SIMD_TILE):
            vp${N} = _mm256_fmadd_ps(vp${N}, vts${N}, vts${N});
          $for N in range(SIMD_TILE):
            const __m256 vemo${N} = _mm256_fmadd_ps(vp${N}, vtwo, vsmo${N});
        $else:
          $for N in range(SIMD_TILE):
            vp${N} = _mm256_add_ps(_mm256_mul_ps(vp${N}, vts${N}), vts${N});
          $for N in range(SIMD_TILE):
            const __m256 vemo${N} = _mm256_add_ps(_mm256_mul_ps(vp${N}, vtwo), vsmo${N});

      $for N in range(SIMD_TILE):
        const __m256 vepo${N} = _mm256_add_ps(vemo${N}, vtwo);
      $if DIV == "DIV":
        $for N in range(SIMD_TILE):
          __m256 vy${N} = _mm256_div_ps(vemo${N}, vepo${N});
      $else:
        $for N in range(SIMD_TILE):
          __m256 vrepo${N} = _mm256_rcp_ps(vepo${N});
        $if FMA:
          $for N in range(SIMD_TILE):
            const __m256 verepo${N} = _mm256_fnmsub_ps(vrepo${N}, vepo${N}, vminus_one);
          $for N in range(SIMD_TILE):
            vrepo${N} = _mm256_fmadd_ps(verepo${N}, vrepo${N}, vrepo${N});
        $else:
          $for N in range(SIMD_TILE):
            vrepo${N} = _mm256_mul_ps(vrepo${N}, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo${N}, vepo${N})));
          $if DIV == "NR2":
            $for N in range(SIMD_TILE):
              vrepo${N} = _mm256_mul_ps(vrepo${N}, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo${N}, vepo${N})));

        $for N in range(SIMD_TILE):
          __m256 vy${N} = _mm256_mul_ps(vemo${N}, vrepo${N});

        $if DIV.endswith("ADJ"):
          $for N in range(SIMD_TILE):
            const __m256 vey${N} = _mm256_fnmadd_ps(vy${N}, vepo${N}, vemo${N});
          $for N in range(SIMD_TILE):
            vy${N} = _mm256_fmadd_ps(vey${N}, vrepo${N}, vy${N});

      $if SAT == "SELECT":
        $for N in range(SIMD_TILE):
          vy${N} = _mm256_blendv_ps(vy${N}, vminus_one, vm${N});
      $for N in range(SIMD_TILE):
        vy${N} = _mm256_xor_ps(vy${N}, vinvsignx${N});

      _mm256_storeu_ps(output, vy0);
      $for N in range(1, SIMD_TILE):
        _mm256_storeu_ps(output + ${N * 8}, vy${N});
      output += ${BATCH_TILE};
    }
  for (; batch >= 8 * sizeof(float); batch -= 8 * sizeof(float)) {
    const __m256 vx = _mm256_loadu_ps(input);
    input += 8;

    $if SAT == "MINMAX":
      __m256 vz = _mm256_or_ps(vx, vsign_mask);
    $elif SAT == "SELECT":
      const __m256 vz = _mm256_or_ps(vx, vsign_mask);

    const __m256 vinvsignx = _mm256_xor_ps(vx, vz);
    $if SAT == "MINMAX":
      vz = _mm256_max_ps(vsat_cutoff, vz);
    $elif SAT == "SELECT":
      const __m256 vm = _mm256_cmp_ps(vz, vsat_cutoff, _CMP_LE_OS);

    $if FMA == 3:
      __m256 vn = _mm256_fmadd_ps(vz, vlog2e, vmagic_bias);
    $else:
      __m256 vn = _mm256_add_ps(_mm256_mul_ps(vz, vlog2e), vmagic_bias);

    $if LOG2LUT == 0:
      const __m128 vn_hi = _mm256_extractf128_ps(vn, 1);
      __m256 vs = _mm256_castps128_ps256(_mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn)), 23)));
      const __m128 vs_hi = _mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(vn_hi), 23));
      vs = _mm256_insertf128_ps(vs, vs_hi, 1);
    $else:
      const __m128 vn_hi = _mm256_extractf128_ps(vn, 1);
      __m128i ve_lo = _mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn)), ${23-LOG2LUT});
      __m128i ve_hi = _mm_slli_epi32(_mm_castps_si128(vn_hi), ${23-LOG2LUT});

      const __m128i vl_lo = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(_mm256_castps256_ps128(vn))));
      const __m128i vl_hi = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(vn_hi)));

      const __m128 vs_lo = _mm_castsi128_ps(_mm_add_epi32(ve_lo, vl_lo));
      const __m128 vs_hi = _mm_castsi128_ps(_mm_add_epi32(ve_hi, vl_hi));
      const __m256 vs = _mm256_insertf128_ps(_mm256_castps128_ps256(vs_lo), vs_hi, 1);

    vn = _mm256_sub_ps(vn, vmagic_bias);

    $if FMA == 3:
      const __m256 vt = _mm256_fmadd_ps(vn, vminus_ln2, vz);
    $else:
      const __m256 vt = _mm256_add_ps(_mm256_mul_ps(vn, vminus_ln2), vz);

    $if FMA == 3:
      __m256 vp = vc${P};
      $for i in reversed(range(2, P)):
        vp = _mm256_fmadd_ps(vp, vt, vc${i});
    $else:
      __m256 vp = _mm256_add_ps(_mm256_mul_ps(vc${P}, vt), vc${P-1});
      $for i in reversed(range(2, P-1)):
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vt), vc${i});
    $if P == H + 1:
      $if FMA == 3:
        vp = _mm256_fmadd_ps(vp, vt, vtwo);
      $else:
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vt), vtwo);
    $else:
      vp = _mm256_mul_ps(vp, vt);

    const __m256 vts = _mm256_mul_ps(vt, vs);
    const __m256 vsmo = _mm256_add_ps(vs, vminus_one);
    $if P == H + 1:
      $if FMA == 3:
        const __m256 vemo = _mm256_fmadd_ps(vp, vts, vsmo);
      $else:
        const __m256 vemo = _mm256_add_ps(_mm256_mul_ps(vp, vts), vsmo);
    $else:
      $if FMA == 3:
        vp = _mm256_fmadd_ps(vp, vts, vts);
        const __m256 vemo = _mm256_fmadd_ps(vp, vtwo, vsmo);
      $else:
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vts), vts);
        const __m256 vemo = _mm256_add_ps(_mm256_mul_ps(vp, vtwo), vsmo);

    const __m256 vepo = _mm256_add_ps(vemo, vtwo);
    $if DIV == "DIV":
      __m256 vy = _mm256_div_ps(vemo, vepo);
    $else:
      __m256 vrepo = _mm256_rcp_ps(vepo);
      $if FMA:
        const __m256 verepo = _mm256_fnmsub_ps(vrepo, vepo, vminus_one);
        vrepo = _mm256_fmadd_ps(verepo, vrepo, vrepo);
      $else:
        vrepo = _mm256_mul_ps(vrepo, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo, vepo)));
        $if DIV == "NR2":
          vrepo = _mm256_mul_ps(vrepo, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo, vepo)));

      __m256 vy = _mm256_mul_ps(vemo, vrepo);

      $if DIV.endswith("ADJ"):
        const __m256 vey = _mm256_fnmadd_ps(vy, vepo, vemo);
        vy = _mm256_fmadd_ps(vey, vrepo, vy);

    $if SAT == "SELECT":
      vy = _mm256_blendv_ps(vy, vminus_one, vm);
    vy = _mm256_xor_ps(vy, vinvsignx);

    _mm256_storeu_ps(output, vy);
    output += 8;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(float));
    assert(batch <= 7 * sizeof(float));
    const __m256i vmask = _mm256_loadu_si256((const __m256i*) ((uintptr_t) &params->${PARAMS_STRUCT}.mask_table[7] - batch));

    const __m256 vx = _mm256_maskload_ps(input, vmask);

    $if SAT == "MINMAX":
      __m256 vz = _mm256_or_ps(vx, vsign_mask);
    $elif SAT == "SELECT":
      const __m256 vz = _mm256_or_ps(vx, vsign_mask);

    const __m256 vinvsignx = _mm256_xor_ps(vx, vz);
    $if SAT == "MINMAX":
      vz = _mm256_max_ps(vsat_cutoff, vz);
    $elif SAT == "SELECT":
      const __m256 vm = _mm256_cmp_ps(vz, vsat_cutoff, _CMP_LE_OS);

    $if FMA == 3:
      __m256 vn = _mm256_fmadd_ps(vz, vlog2e, vmagic_bias);
    $else:
      __m256 vn = _mm256_add_ps(_mm256_mul_ps(vz, vlog2e), vmagic_bias);

    $if LOG2LUT == 0:
      const __m128 vn_hi = _mm256_extractf128_ps(vn, 1);
      __m256 vs = _mm256_castps128_ps256(_mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn)), 23)));
      const __m128 vs_hi = _mm_castsi128_ps(_mm_slli_epi32(_mm_castps_si128(vn_hi), 23));
      vs = _mm256_insertf128_ps(vs, vs_hi, 1);
    $else:
      const __m128 vn_hi = _mm256_extractf128_ps(vn, 1);
      __m128i ve_lo = _mm_slli_epi32(_mm_castps_si128(_mm256_castps256_ps128(vn)), ${23-LOG2LUT});
      __m128i ve_hi = _mm_slli_epi32(_mm_castps_si128(vn_hi), ${23-LOG2LUT});

      const __m128i vl_lo = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(_mm256_castps256_ps128(vn))));
      const __m128i vl_hi = _mm_castps_si128(_mm_permutevar_ps(vtable, _mm_castps_si128(vn_hi)));

      const __m128 vs_lo = _mm_castsi128_ps(_mm_add_epi32(ve_lo, vl_lo));
      const __m128 vs_hi = _mm_castsi128_ps(_mm_add_epi32(ve_hi, vl_hi));
      const __m256 vs = _mm256_insertf128_ps(_mm256_castps128_ps256(vs_lo), vs_hi, 1);

    vn = _mm256_sub_ps(vn, vmagic_bias);

    $if FMA == 3:
      const __m256 vt = _mm256_fmadd_ps(vn, vminus_ln2, vz);
    $else:
      const __m256 vt = _mm256_add_ps(_mm256_mul_ps(vn, vminus_ln2), vz);

    $if FMA == 3:
      __m256 vp = vc${P};
      $for i in reversed(range(2, P)):
        vp = _mm256_fmadd_ps(vp, vt, vc${i});
    $else:
      __m256 vp = _mm256_add_ps(_mm256_mul_ps(vc${P}, vt), vc${P-1});
      $for i in reversed(range(2, P-1)):
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vt), vc${i});
    $if P == H + 1:
      $if FMA == 3:
        vp = _mm256_fmadd_ps(vp, vt, vtwo);
      $else:
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vt), vtwo);
    $else:
      vp = _mm256_mul_ps(vp, vt);

    const __m256 vts = _mm256_mul_ps(vt, vs);
    const __m256 vsmo = _mm256_add_ps(vs, vminus_one);
    $if P == H + 1:
      $if FMA == 3:
        const __m256 vemo = _mm256_fmadd_ps(vp, vts, vsmo);
      $else:
        const __m256 vemo = _mm256_add_ps(_mm256_mul_ps(vp, vts), vsmo);
    $else:
      $if FMA == 3:
        vp = _mm256_fmadd_ps(vp, vts, vts);
        const __m256 vemo = _mm256_fmadd_ps(vp, vtwo, vsmo);
      $else:
        vp = _mm256_add_ps(_mm256_mul_ps(vp, vts), vts);
        const __m256 vemo = _mm256_add_ps(_mm256_mul_ps(vp, vtwo), vsmo);

    const __m256 vepo = _mm256_add_ps(vemo, vtwo);
    $if DIV == "DIV":
      __m256 vy = _mm256_div_ps(vemo, vepo);
    $else:
      __m256 vrepo = _mm256_rcp_ps(vepo);
      $if FMA:
        const __m256 verepo = _mm256_fnmsub_ps(vrepo, vepo, vminus_one);
        vrepo = _mm256_fmadd_ps(verepo, vrepo, vrepo);
      $else:
        vrepo = _mm256_mul_ps(vrepo, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo, vepo)));
        $if DIV == "NR2":
          vrepo = _mm256_mul_ps(vrepo, _mm256_sub_ps(vtwo, _mm256_mul_ps(vrepo, vepo)));

      __m256 vy = _mm256_mul_ps(vemo, vrepo);

      $if DIV.endswith("ADJ"):
        const __m256 vey = _mm256_fnmadd_ps(vy, vepo, vemo);
        vy = _mm256_fmadd_ps(vey, vrepo, vy);

    $if SAT == "SELECT":
      vy = _mm256_blendv_ps(vy, vminus_one, vm);
    vy = _mm256_xor_ps(vy, vinvsignx);

    __m128 vy_lo = _mm256_castps256_ps128(vy);
    if (batch & (4 * sizeof(float))) {
      _mm_storeu_ps(output, vy_lo);
      vy_lo = _mm256_extractf128_ps(vy, 1);
      output += 4;
    }
    if (batch & (2 * sizeof(float))) {
      _mm_storel_pi((__m64*) output, vy_lo);
      vy_lo = _mm_movehl_ps(vy_lo, vy_lo);
      output += 2;
    }
    if (batch & (1 * sizeof(float))) {
      _mm_store_ss(output, vy_lo);
    }
  }
}
