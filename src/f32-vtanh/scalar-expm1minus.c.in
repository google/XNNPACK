// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert (LOG2LUT, P, H) in [(0, 6, 5), (3, 4, 3)]
$assert not PS or (P, H) == (4, 3)
$assert BATCH_TILE >= 1
$assert not WASM or not FMA
$LUT = 1 << LOG2LUT
#include <assert.h>
#include <stddef.h>
#include <stdint.h>
#include <math.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/microparams.h"
#include "xnnpack/vunary.h"

$if LOG2LUT != 0:

  extern XNN_INTERNAL const uint32_t xnn_table_exp2minus_k_over_${LUT}[${LUT}];

$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d%s" % (P, H, "ps" if PS else "ts")
$PARAMS_STRUCT = "scalar_expm1minus_rr1_" + LUT_SUFFIX + ("p%dh%d" % (P, H))
$MIN_F32 = "__builtin_wasm_min_f32" if WASM else "math_pmin_f32"
$ISA = "fma" if FMA else "wasm" if WASM else "scalar"
void xnn_f32_vtanh_ukernel__${ISA}_expm1minus_rr1_${LUT_SUFFIX}${POLY_SUFFIX}_div_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_tanh_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const float vsat_cutoff = params->${PARAMS_STRUCT}.sat_cutoff;
  const float vminus_log2e = params->${PARAMS_STRUCT}.minus_log2e;
  const float vmagic_bias = params->${PARAMS_STRUCT}.magic_bias;
  $if LOG2LUT != 0:
    const uint32_t vindex_mask = UINT32_C(0x${"%X" % (LUT-1)});
  const float vln2 = params->${PARAMS_STRUCT}.ln2;
  $for i in reversed(range(2, P+1)):
    const float vc${i} = params->${PARAMS_STRUCT}.c${i};
  const float vminus_two = params->${PARAMS_STRUCT}.minus_two;
  const float vone = params->${PARAMS_STRUCT}.one;

  $if BATCH_TILE > 1:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      $for N in range(BATCH_TILE):
        const float vx${N} = input[${N}];
      input += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        float vz${N} = fabsf(vx${N});

      $for N in range(BATCH_TILE):
        vz${N} = ${MIN_F32}(vz${N}, vsat_cutoff);

      $for N in range(BATCH_TILE):
        $if FMA:
          float vn${N} = fmaf(vz${N}, vminus_log2e, vmagic_bias);
        $else:
          float vn${N} = vz${N} * vminus_log2e + vmagic_bias;

      $for N in range(BATCH_TILE):
        const uint32_t vb${N} = float_as_uint32(vn${N});
        vn${N} -= vmagic_bias;

      $if LOG2LUT == 0:
        $for N in range(BATCH_TILE):
          const uint32_t ve${N} = vb${N} << 23;
      $else:
        $for N in range(BATCH_TILE):
          const uint32_t vidx${N} = vb${N} & vindex_mask;

        $for N in range(BATCH_TILE):
          const uint32_t vl${N} = xnn_table_exp2minus_k_over_${LUT}[vidx${N}];
          uint32_t ve${N} = vb${N} << ${23-LOG2LUT};

        $for N in range(BATCH_TILE):
          ve${N} += vl${N};

      $for N in range(BATCH_TILE):
        $if FMA:
          const float vt${N} = fmaf(vn${N}, vln2, vz${N});
        $else:
          const float vt${N} = vn${N} * vln2 + vz${N};
        const float vs${N} = uint32_as_float(ve${N});

      $for N in range(BATCH_TILE):
        $if FMA:
          float vp${N} = fmaf(vc${P}, vt${N}, vc${P-1});
        $else:
          float vp${N} = vc${P} * vt${N} + vc${P-1};
      $for i in reversed(range(2, P-1)):
        $for N in range(BATCH_TILE):
          $if FMA:
            vp${N} = fmaf(vp${N}, vt${N}, vc${i});
          $else:
            vp${N} = vp${N} * vt${N} + vc${i};
      $for N in range(BATCH_TILE):
        $if FMA:
          vp${N} = fmaf(vp${N}, vt${N}, vminus_two);
        $else:
          vp${N} = vp${N} * vt${N} + vminus_two;

      $for N in range(BATCH_TILE):
        const float vts${N} = vt${N} * vs${N};
        const float vsmo${N} = vs${N} - vone;

      $for N in range(BATCH_TILE):
        $if FMA:
          const float vemo${N} = fmaf(vp${N}, vts${N}, vsmo${N});
        $else:
          const float vemo${N} = vp${N} * vts${N} + vsmo${N};

      $for N in range(BATCH_TILE):
        const float vepo${N} = vemo${N} - vminus_two;

      $for N in range(BATCH_TILE):
        float vy${N} = vemo${N} / vepo${N};

      $for N in range(BATCH_TILE):
        vy${N} = copysignf(vy${N}, vx${N});

      $for N in range(BATCH_TILE):
        output[${N}] = vy${N};
      output += ${BATCH_TILE};
    }
  $if BATCH_TILE == 1:
    do {
      const float vx = *input++;

      float vz = fabsf(vx);

      vz = ${MIN_F32}(vz, vsat_cutoff);

      $if FMA:
        float vn = fmaf(vz, vminus_log2e, vmagic_bias);
      $else:
        float vn = vz * vminus_log2e + vmagic_bias;

      const uint32_t vb = float_as_uint32(vn);
      vn -= vmagic_bias;

      $if LOG2LUT == 0:
        const uint32_t ve = vb << 23;
      $else:
        const uint32_t vidx = vb & vindex_mask;
        const uint32_t vl = xnn_table_exp2minus_k_over_${LUT}[vidx];
        uint32_t ve = vb << ${23-LOG2LUT};
        ve += vl;
      const float vs = uint32_as_float(ve);

      $if FMA:
        const float vt = fmaf(vn, vln2, vz);
      $else:
        const float vt = vn * vln2 + vz;

      $if FMA:
        float vp = fmaf(vc${P}, vt, vc${P-1});
      $else:
        float vp = vc${P} * vt + vc${P-1};
      $for i in reversed(range(2, P-1)):
        $if FMA:
          vp = fmaf(vp, vt, vc${i});
        $else:
          vp = vp * vt + vc${i};
      $if FMA:
        vp = fmaf(vp, vt, vminus_two);
      $else:
        vp = vp * vt + vminus_two;

      const float vts = vt * vs;
      const float vsmo = vs - vone;
      $if FMA:
        const float vemo = fmaf(vp, vts, vsmo);
      $else:
        const float vemo = vp * vts + vsmo;

      const float vepo = vemo - vminus_two;

      float vy = vemo / vepo;

      vy = copysignf(vy, vx);

      *output++ = vy;

      batch -= sizeof(float);
    } while (batch != 0);
  $elif BATCH_TILE == 2:
    if XNN_UNLIKELY(batch != 0) {
      const float vx = *input;

      float vz = fabsf(vx);

      vz = ${MIN_F32}(vz, vsat_cutoff);

      $if FMA:
        float vn = fmaf(vz, vminus_log2e, vmagic_bias);
      $else:
        float vn = vz * vminus_log2e + vmagic_bias;

      const uint32_t vb = float_as_uint32(vn);
      vn -= vmagic_bias;

      $if LOG2LUT == 0:
        const uint32_t ve = vb << 23;
      $else:
        const uint32_t vidx = vb & vindex_mask;
        const uint32_t vl = xnn_table_exp2minus_k_over_${LUT}[vidx];
        uint32_t ve = vb << ${23-LOG2LUT};
        ve += vl;
      const float vs = uint32_as_float(ve);

      $if FMA:
        const float vt = fmaf(vn, vln2, vz);
      $else:
        const float vt = vn * vln2 + vz;

      $if FMA:
        float vp = fmaf(vc${P}, vt, vc${P-1});
      $else:
        float vp = vc${P} * vt + vc${P-1};
      $for i in reversed(range(2, P-1)):
        $if FMA:
          vp = fmaf(vp, vt, vc${i});
        $else:
          vp = vp * vt + vc${i};
      $if FMA:
        vp = fmaf(vp, vt, vminus_two);
      $else:
        vp = vp * vt + vminus_two;

      const float vts = vt * vs;
      const float vsmo = vs - vone;
      $if FMA:
        const float vemo = fmaf(vp, vts, vsmo);
      $else:
        const float vemo = vp * vts + vsmo;

      const float vepo = vemo - vminus_two;

      float vy = vemo / vepo;

      vy = copysignf(vy, vx);

      *output = vy;
    }
  $else:
    if XNN_UNLIKELY(batch != 0) {
      do {
        const float vx = *input++;

        float vz = fabsf(vx);

        vz = ${MIN_F32}(vz, vsat_cutoff);

        $if FMA:
          float vn = fmaf(vz, vminus_log2e, vmagic_bias);
        $else:
          float vn = vz * vminus_log2e + vmagic_bias;

        const uint32_t vb = float_as_uint32(vn);
        vn -= vmagic_bias;

        $if LOG2LUT == 0:
          const uint32_t ve = vb << 23;
        $else:
          const uint32_t vidx = vb & vindex_mask;
          const uint32_t vl = xnn_table_exp2minus_k_over_${LUT}[vidx];
          uint32_t ve = vb << ${23-LOG2LUT};
          ve += vl;
        const float vs = uint32_as_float(ve);

        $if FMA:
          const float vt = fmaf(vn, vln2, vz);
        $else:
          const float vt = vn * vln2 + vz;

        $if FMA:
          float vp = fmaf(vc${P}, vt, vc${P-1});
        $else:
          float vp = vc${P} * vt + vc${P-1};
        $for i in reversed(range(2, P-1)):
          $if FMA:
            vp = fmaf(vp, vt, vc${i});
          $else:
            vp = vp * vt + vc${i};
        $if FMA:
          vp = fmaf(vp, vt, vminus_two);
        $else:
          vp = vp * vt + vminus_two;

        const float vts = vt * vs;
        const float vsmo = vs - vone;
        $if FMA:
          const float vemo = fmaf(vp, vts, vsmo);
        $else:
          const float vemo = vp * vts + vsmo;

        const float vepo = vemo - vminus_two;

        float vy = vemo / vepo;

        vy = copysignf(vy, vx);

        *output++ = vy;

        batch -= sizeof(float);
      } while (batch != 0);
    }
}
