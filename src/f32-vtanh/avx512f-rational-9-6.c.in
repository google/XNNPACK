// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DIV in ("DIV", "NR")
$assert BATCH_TILE % 16 == 0
$assert BATCH_TILE >= 16
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$SIMD_TILE = BATCH_TILE // 16
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <immintrin.h>

#include "xnnpack/common.h"
#include "xnnpack/microparams.h"
#include "xnnpack/vunary.h"

void xnn_f32_vtanh_ukernel__avx512f_rational_9_6_${DIV.lower()}_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_tanh_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  // Cap the inputs to this value as `tanh(x)` will always be `+/-1.0f` beyond
  // this point. This value is chosen as the first floating point number as of
  // which the interpolation returns 1.0f.
  const __m512 vmax_x = _mm512_set1_ps(params->avx512_rational_9_6.max_abs_x);
  const __m512 vmin_x = _mm512_set1_ps(-params->avx512_rational_9_6.max_abs_x);
  
  // The monomial coefficients of the numerator polynomial (odd).
  const __m512 valpha_1 = _mm512_set1_ps(params->avx512_rational_9_6.alpha_1);
  const __m512 valpha_3 = _mm512_set1_ps(params->avx512_rational_9_6.alpha_3);
  const __m512 valpha_5 = _mm512_set1_ps(params->avx512_rational_9_6.alpha_5);
  const __m512 valpha_7 = _mm512_set1_ps(params->avx512_rational_9_6.alpha_7);
  const __m512 valpha_9 = _mm512_set1_ps(params->avx512_rational_9_6.alpha_9);

  // The monomial coefficients of the denominator polynomial (even).
  const __m512 vbeta_0 = _mm512_set1_ps(params->avx512_rational_9_6.beta_0);
  const __m512 vbeta_2 = _mm512_set1_ps(params->avx512_rational_9_6.beta_2);
  const __m512 vbeta_4 = _mm512_set1_ps(params->avx512_rational_9_6.beta_4);
  const __m512 vbeta_6 = _mm512_set1_ps(params->avx512_rational_9_6.beta_6);

  $if DIV == "NR":
    // Constant needed for the Newton-Raphson iteration of the reciprocal.
    const __m512 vtwo = _mm512_set1_ps(params->avx512_rational_9_6.two);

  $if SIMD_TILE > 1:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      __m512 vx_${ABC[0]} = _mm512_loadu_ps(input);
      $for N in range(1, SIMD_TILE):
        __m512 vx_${ABC[N]} = _mm512_loadu_ps(input + ${16 * N});
      input += ${BATCH_TILE};

      // Clamp the inputs to the interpolation range.
      $for N in range(SIMD_TILE):
        vx_${ABC[N]} = _mm512_min_ps(vmax_x, vx_${ABC[N]});
      $for N in range(SIMD_TILE):
        vx_${ABC[N]} = _mm512_max_ps(vmin_x, vx_${ABC[N]});

      // Since the polynomials are odd/even, we need x^2.
      $for N in range(SIMD_TILE):
        const __m512 vx2_${ABC[N]} = _mm512_mul_ps(vx_${ABC[N]}, vx_${ABC[N]});

      // Evaluate the numerator polynomial p.
      $for N in range(SIMD_TILE):
        __m512 vp_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, valpha_9, valpha_7);
      $for N in range(SIMD_TILE):
        vp_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vp_${ABC[N]}, valpha_5);
      $for N in range(SIMD_TILE):
        vp_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vp_${ABC[N]}, valpha_3);
      $for N in range(SIMD_TILE):
        vp_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vp_${ABC[N]}, valpha_1);
      $for N in range(SIMD_TILE):
        vp_${ABC[N]} = _mm512_mul_ps(vx_${ABC[N]}, vp_${ABC[N]});

      // Evaluate the denominator polynomial q.
      $for N in range(SIMD_TILE):
        __m512 vq_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vbeta_6, vbeta_4);
      $for N in range(SIMD_TILE):
        vq_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vq_${ABC[N]}, vbeta_2);
      $for N in range(SIMD_TILE):
        vq_${ABC[N]} = _mm512_fmadd_ps(vx2_${ABC[N]}, vq_${ABC[N]}, vbeta_0);

      // Divide the numerator by the denominator.
      $if DIV == "DIV":
        $for N in range(SIMD_TILE):
          const __m512 vy_${ABC[N]} =  _mm512_div_ps(vp_${ABC[N]}, vq_${ABC[N]});
      $else:
        $for N in range(SIMD_TILE):
          const __m512 vt0_${ABC[N]} = _mm512_rcp14_ps(vq_${ABC[N]});
        $for N in range(SIMD_TILE):
          const __m512 vt1_${ABC[N]} = _mm512_mul_ps(vt0_${ABC[N]}, _mm512_fnmadd_ps(vt0_${ABC[N]}, vq_${ABC[N]}, vtwo));
        $for N in range(SIMD_TILE):
          const __m512 vy_${ABC[N]} =  _mm512_mul_ps(vp_${ABC[N]}, vt1_${ABC[N]});

      _mm512_storeu_ps(output, vy_${ABC[0]});
      $for N in range(1, SIMD_TILE):
        _mm512_storeu_ps(output + ${16 * N}, vy_${ABC[N]});
      output += ${BATCH_TILE};
    }
  for (; batch >= 16 * sizeof(float); batch -= 16 * sizeof(float)) {
    __m512 vx = _mm512_loadu_ps(input);
    input += 16;

    // Clamp the inputs to the interpolation range.
    vx = _mm512_min_ps(vmax_x, vx);
    vx = _mm512_max_ps(vmin_x, vx);

    // Since the polynomials are odd/even, we need x^2.
    const __m512 vx2 = _mm512_mul_ps(vx, vx);

    // Evaluate the numerator polynomial p.
    __m512 vp = _mm512_fmadd_ps(vx2, valpha_9, valpha_7);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_5);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_3);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_1);
    vp = _mm512_mul_ps(vx, vp);

    // Evaluate the denominator polynomial q.
    __m512 vq = _mm512_fmadd_ps(vx2, vbeta_6, vbeta_4);
    vq = _mm512_fmadd_ps(vx2, vq, vbeta_2);
    vq = _mm512_fmadd_ps(vx2, vq, vbeta_0);

    // Divide the numerator by the denominator.
    $if DIV == "DIV":
      const __m512 vy =  _mm512_div_ps(vp, vq);
    $else:
      const __m512 vt0 =  _mm512_rcp14_ps(vq);
      const __m512 vt1 = _mm512_mul_ps(vt0, _mm512_fnmadd_ps(vt0, vq, vtwo));
      const __m512 vy =  _mm512_mul_ps(vp, vt1);

    _mm512_storeu_ps(output, vy);
    output += 16;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(float));
    assert(batch <= 15 * sizeof(float));

    // Prepare mask for valid 32-bit elements (depends on batch).
    batch >>= XNN_LOG2_SIZEOF_FLOAT;
    const __mmask16 vmask = _cvtu32_mask16((uint32_t) ((UINT32_C(1) << batch) - UINT32_C(1)));

    __m512 vx = _mm512_maskz_loadu_ps(vmask, input);

    // Clamp the inputs to the interpolation range.
    vx = _mm512_min_ps(vmax_x, vx);
    vx = _mm512_max_ps(vmin_x, vx);

    // Since the polynomials are odd/even, we need x^2.
    const __m512 vx2 = _mm512_mul_ps(vx, vx);

    // Evaluate the numerator polynomial p.
    __m512 vp = _mm512_fmadd_ps(vx2, valpha_9, valpha_7);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_5);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_3);
    vp = _mm512_fmadd_ps(vx2, vp, valpha_1);
    vp = _mm512_mul_ps(vx, vp);

    // Evaluate the denominator polynomial q.
    __m512 vq = _mm512_fmadd_ps(vx2, vbeta_6, vbeta_4);
    vq = _mm512_fmadd_ps(vx2, vq, vbeta_2);
    vq = _mm512_fmadd_ps(vx2, vq, vbeta_0);

    // Divide the numerator by the denominator.
    $if DIV == "DIV":
      const __m512 vy =  _mm512_div_ps(vp, vq);
    $else:
      const __m512 vt0 =  _mm512_rcp14_ps(vq);
      const __m512 vt1 = _mm512_mul_ps(vt0, _mm512_fnmadd_ps(vt0, vq, vtwo));
      const __m512 vy =  _mm512_mul_ps(vp, vt1);

    _mm512_mask_storeu_ps(output, vmask, vy);
  }
}
