// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$import math
$assert (LOG2LUT, P, H) in [(3, 4, 3), (0, 6, 5)]
$assert not PS or (P, H) == (4, 3)
$LUT = 1 << LOG2LUT
$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert MINMAX in ["WASM", "PSEUDO", "RELAXED"]
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <wasm_simd128.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/microparams.h"

$if LOG2LUT != 0:

  extern XNN_INTERNAL const uint32_t xnn_table_exp2minus_k_over_${LUT}[${LUT}];

$WASM_F32X4_MAX = {"WASM": "wasm_f32x4_max", "PSEUDO": "wasm_f32x4_pmax"}[MINMAX]
$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d%s" % (P, H, "ps" if PS else "ts")
$MINMAX_SUFFIX = {"WASM": "max", "PSEUDO": "pmax"}[MINMAX]
$PARAMS_STRUCT = "wasmsimd_expm1minus_rr1_" + LUT_SUFFIX + ("p%dh%d" % (P, H)) + "_nabs"
void xnn_f32_vtanh_ukernel__wasmsimd_expm1minus_rr1_${LUT_SUFFIX}${POLY_SUFFIX}_div_nabs_${MINMAX_SUFFIX}_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_tanh_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const v128_t vsign_mask = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.sign_mask);
  const v128_t vsat_cutoff = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.sat_cutoff);
  const v128_t vlog2e = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.log2e);
  const v128_t vmagic_bias = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.magic_bias);
  $if LOG2LUT != 0:
    const v128_t vindex_mask = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.index_mask);
  const v128_t vminus_ln2 = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.minus_ln2);
  $for i in reversed(range(2, P+1)):
    const v128_t vc${i} = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.c${i});
  const v128_t vtwo = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.two);
  const v128_t vone = wasm_v128_load64_splat(params->${PARAMS_STRUCT}.one);

  $if BATCH_TILE > 4:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      const v128_t vx${ABC[0:0+4]} = wasm_v128_load(input);
      $for N in range(4, BATCH_TILE, 4):
        const v128_t vx${ABC[N:N+4]} = wasm_v128_load(input + ${N});
      input += ${BATCH_TILE};

      $for N in range(0, BATCH_TILE, 4):
        v128_t vz${ABC[N:N+4]} = wasm_v128_or(vx${ABC[N:N+4]}, vsign_mask);

      $for N in range(0, BATCH_TILE, 4):
        const v128_t vinvsignx${ABC[N:N+4]} = wasm_v128_xor(vx${ABC[N:N+4]}, vz${ABC[N:N+4]});
        vz${ABC[N:N+4]} = ${WASM_F32X4_MAX}(vz${ABC[N:N+4]}, vsat_cutoff);

      $for N in range(0, BATCH_TILE, 4):
        v128_t vn${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vz${ABC[N:N+4]}, vlog2e), vmagic_bias);

      $if LOG2LUT == 0:
        $for N in range(0, BATCH_TILE, 4):
          const v128_t vs${ABC[N:N+4]} = wasm_i32x4_shl(vn${ABC[N:N+4]}, 23);
          vn${ABC[N:N+4]} = wasm_f32x4_sub(vn${ABC[N:N+4]}, vmagic_bias);
      $else:
        $for N in range(0, BATCH_TILE, 4):
          const v128_t ve${ABC[N:N+4]} = wasm_i32x4_shl(vn${ABC[N:N+4]}, ${23-LOG2LUT});
          const v128_t vidx${ABC[N:N+4]} = wasm_i32x4_shl(wasm_v128_and(vn${ABC[N:N+4]}, vindex_mask), 2);

        $for N in range(0, BATCH_TILE, 4):
          const uint64_t vidx${ABC[N:N+2]} = wasm_u64x2_extract_lane(vidx${ABC[N:N+4]}, 0);

        $for N in range(0, BATCH_TILE, 4):
          v128_t vl${ABC[N:N+4]} = wasm_v128_load32_zero((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx${ABC[N:N+2]}));

        $for N in range(0, BATCH_TILE, 4):
          vl${ABC[N:N+4]} = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx${ABC[N:N+2]} >> 32)), vl${ABC[N:N+4]}, 1);

        $for N in range(0, BATCH_TILE, 4):
          const uint64_t vidx${ABC[N+2:N+4]} = wasm_u64x2_extract_lane(vidx${ABC[N:N+4]}, 1);

        $for N in range(0, BATCH_TILE, 4):
          vl${ABC[N:N+4]} = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx${ABC[N+2:N+4]}), vl${ABC[N:N+4]}, 2);

        $for N in range(0, BATCH_TILE, 4):
          vl${ABC[N:N+4]} = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx${ABC[N+2:N+4]} >> 32)), vl${ABC[N:N+4]}, 3);

        $for N in range(0, BATCH_TILE, 4):
          const v128_t vs${ABC[N:N+4]} = wasm_i32x4_add(vl${ABC[N:N+4]}, ve${ABC[N:N+4]});
          vn${ABC[N:N+4]} = wasm_f32x4_sub(vn${ABC[N:N+4]}, vmagic_bias);

      $for N in range(0, BATCH_TILE, 4):
        const v128_t vt${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vn${ABC[N:N+4]}, vminus_ln2), vz${ABC[N:N+4]});

      $for N in range(0, BATCH_TILE, 4):
        v128_t vp${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vc${P}, vt${ABC[N:N+4]}), vc${P-1});
      $for i in reversed(range(2, P-1)):
        $for N in range(0, BATCH_TILE, 4):
          vp${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vp${ABC[N:N+4]}, vt${ABC[N:N+4]}), vc${i});

      $for N in range(0, BATCH_TILE, 4):
        vp${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vp${ABC[N:N+4]}, vt${ABC[N:N+4]}), vtwo);

      $for N in range(0, BATCH_TILE, 4):
        const v128_t vts${ABC[N:N+4]} = wasm_f32x4_mul(vt${ABC[N:N+4]}, vs${ABC[N:N+4]});
        const v128_t vsmo${ABC[N:N+4]} = wasm_f32x4_sub(vs${ABC[N:N+4]}, vone);

      $for N in range(0, BATCH_TILE, 4):
        const v128_t vemo${ABC[N:N+4]} = wasm_f32x4_add(wasm_f32x4_mul(vp${ABC[N:N+4]}, vts${ABC[N:N+4]}), vsmo${ABC[N:N+4]});

      $for N in range(0, BATCH_TILE, 4):
        const v128_t vepo${ABC[N:N+4]} = wasm_f32x4_add(vemo${ABC[N:N+4]}, vtwo);

      $for N in range(0, BATCH_TILE, 4):
        v128_t vy${ABC[N:N+4]} = wasm_f32x4_div(vemo${ABC[N:N+4]}, vepo${ABC[N:N+4]});

      $for N in range(0, BATCH_TILE, 4):
        vy${ABC[N:N+4]} = wasm_v128_xor(vy${ABC[N:N+4]}, vinvsignx${ABC[N:N+4]});

      wasm_v128_store(output, vy${ABC[0:4]});
      $for N in range(4, BATCH_TILE, 4):
        wasm_v128_store(output + ${N}, vy${ABC[N:N+4]});
      output += ${BATCH_TILE};
    }

  for (; batch >= 4 * sizeof(float); batch -= 4 * sizeof(float)) {
    const v128_t vx = wasm_v128_load(input);
    input += 4;

    v128_t vz = wasm_v128_or(vx, vsign_mask);

    const v128_t vinvsignx = wasm_v128_xor(vx, vz);

    vz = ${WASM_F32X4_MAX}(vz, vsat_cutoff);

    v128_t vn = wasm_f32x4_add(wasm_f32x4_mul(vz, vlog2e), vmagic_bias);

    $if LOG2LUT == 0:
      const v128_t vs = wasm_i32x4_shl(vn, 23);
    $else:
      const v128_t ve = wasm_i32x4_shl(vn, ${23-LOG2LUT});

      const v128_t vidx = wasm_i32x4_shl(wasm_v128_and(vn, vindex_mask), 2);
      const uint64_t vidx_lo = wasm_u64x2_extract_lane(vidx, 0);
      v128_t vl = wasm_v128_load32_zero((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx_lo));
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx_lo >> 32)), vl, 1);
      const uint64_t vidx_hi = wasm_u64x2_extract_lane(vidx, 1);
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx_hi), vl, 2);
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx_hi >> 32)), vl, 3);

      const v128_t vs = wasm_i32x4_add(vl, ve);

    vn = wasm_f32x4_sub(vn, vmagic_bias);

    const v128_t vt = wasm_f32x4_add(wasm_f32x4_mul(vn, vminus_ln2), vz);

    v128_t vp = wasm_f32x4_add(wasm_f32x4_mul(vc${P}, vt), vc${P-1});
    $for i in reversed(range(2, P-1)):
      vp = wasm_f32x4_add(wasm_f32x4_mul(vp, vt), vc${i});
    vp = wasm_f32x4_add(wasm_f32x4_mul(vp, vt), vtwo);

    const v128_t vts = wasm_f32x4_mul(vt, vs);
    const v128_t vsmo = wasm_f32x4_sub(vs, vone);
    const v128_t vemo = wasm_f32x4_add(wasm_f32x4_mul(vp, vts), vsmo);

    const v128_t vepo = wasm_f32x4_add(vemo, vtwo);
    v128_t vy = wasm_f32x4_div(vemo, vepo);

    vy = wasm_v128_xor(vy, vinvsignx);

    wasm_v128_store(output, vy);
    output += 4;
  }

  if XNN_UNLIKELY(batch != 0) {
    const v128_t vx = wasm_v128_load(input);

    v128_t vz = wasm_v128_or(vx, vsign_mask);

    const v128_t vinvsignx = wasm_v128_xor(vx, vz);

    vz = ${WASM_F32X4_MAX}(vz, vsat_cutoff);

    v128_t vn = wasm_f32x4_add(wasm_f32x4_mul(vz, vlog2e), vmagic_bias);

    $if LOG2LUT == 0:
      const v128_t vs = wasm_i32x4_shl(vn, 23);
    $else:
      const v128_t ve = wasm_i32x4_shl(vn, ${23-LOG2LUT});

      const v128_t vidx = wasm_i32x4_shl(wasm_v128_and(vn, vindex_mask), 2);
      const uint64_t vidx_lo = wasm_u64x2_extract_lane(vidx, 0);
      v128_t vl = wasm_v128_load32_zero((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx_lo));
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx_lo >> 32)), vl, 1);
      const uint64_t vidx_hi = wasm_u64x2_extract_lane(vidx, 1);
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) vidx_hi), vl, 2);
      vl = wasm_v128_load32_lane((const void*) ((uintptr_t) xnn_table_exp2minus_k_over_${LUT} + (uint32_t) (vidx_hi >> 32)), vl, 3);

      const v128_t vs = wasm_i32x4_add(vl, ve);

    vn = wasm_f32x4_sub(vn, vmagic_bias);

    const v128_t vt = wasm_f32x4_add(wasm_f32x4_mul(vn, vminus_ln2), vz);

    v128_t vp = wasm_f32x4_add(wasm_f32x4_mul(vc${P}, vt), vc${P-1});
    $for i in reversed(range(2, P-1)):
      vp = wasm_f32x4_add(wasm_f32x4_mul(vp, vt), vc${i});
    vp = wasm_f32x4_add(wasm_f32x4_mul(vp, vt), vtwo);

    const v128_t vts = wasm_f32x4_mul(vt, vs);
    const v128_t vsmo = wasm_f32x4_sub(vs, vone);
    const v128_t vemo = wasm_f32x4_add(wasm_f32x4_mul(vp, vts), vsmo);

    const v128_t vepo = wasm_f32x4_add(vemo, vtwo);
    v128_t vy = wasm_f32x4_div(vemo, vepo);

    vy = wasm_v128_xor(vy, vinvsignx);

    if (batch & (2 * sizeof(float))) {
      wasm_v128_store64_lane(output, vy, 0);
      vy = wasm_v64x2_shuffle(vy, vy, 1, 1);
      output += 2;
    }
    if (batch & (1 * sizeof(float))) {
      wasm_v128_store32_lane(output, vy, 0);
    }
  }
}
