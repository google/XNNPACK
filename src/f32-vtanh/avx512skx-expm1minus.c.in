// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert (LOG2LUT, P, H) in [(0, 6, 5), (2, 4, 3), (3, 4, 3)]
$assert DIV in ["DIV", "NR1", "NR1ADJ"]
$assert not PERM or LOG2LUT in [2, 3]
$assert not PS or (P, H) == (4, 3)
$assert BATCH_TILE % 16 == 0
$assert BATCH_TILE >= 16
$SIMD_TILE = BATCH_TILE // 16
$LUT = 1 << LOG2LUT
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <immintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/microparams.h>
#include <xnnpack/vunary.h>

$if LOG2LUT != 0 and not PERM:

  // Table of exp2(k / ${LUT}) values decremented (as integer) by (k << ${23-LOG2LUT}), k = 0..${LUT-1}
  extern XNN_INTERNAL const uint32_t xnn_table_exp2minus_k_over_${LUT}[${LUT}];

$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d%s" % (P, H, "ps" if PS else "ts")
$PERM_SUFFIX = "" if LOG2LUT == 0 else "_perm" if PERM else "_gather"
$DIV_SUFFIX = DIV.lower()
$PARAMS_STRUCT = "avx512_expm1minus_rr1_" + LUT_SUFFIX + ("p%dh%d" % (P, H)) + ("_perm" if PERM else "")
void xnn_f32_vtanh_ukernel__avx512skx_expm1minus_rr1_${LUT_SUFFIX}${POLY_SUFFIX}${PERM_SUFFIX}_${DIV_SUFFIX}_u${BATCH_TILE}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_tanh_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  const __m512 vsat_cutoff = _mm512_set1_ps(params->${PARAMS_STRUCT}.sat_cutoff);
  const __m512 vminus_log2e = _mm512_set1_ps(params->${PARAMS_STRUCT}.minus_log2e);
  const __m512 vmagic_bias = _mm512_set1_ps(params->${PARAMS_STRUCT}.magic_bias);
  $if LOG2LUT != 0:
    $if PERM:
      $if LOG2LUT == 2:
        const __m512 vtable = _mm512_load_ps(params->${PARAMS_STRUCT}.table);
      $elif LOG2LUT == 3:
        const __m512i vtable = _mm512_load_si512(params->${PARAMS_STRUCT}.table);
    $else:
      const __m512i vindex_mask = _mm512_set1_epi32((int) params->${PARAMS_STRUCT}.index_mask);
  const __m512 vln2 = _mm512_set1_ps(params->${PARAMS_STRUCT}.ln2);
  $for i in reversed(range(2, P+1)):
    const __m512 vc${i} = _mm512_set1_ps(params->${PARAMS_STRUCT}.c${i});
  const __m512 vminus_two = _mm512_set1_ps(params->${PARAMS_STRUCT}.minus_two);
  const __m512 vone = _mm512_set1_ps(params->${PARAMS_STRUCT}.one);
  const __m512i vsign_mask = _mm512_set1_epi32((int) params->${PARAMS_STRUCT}.sign_mask);

  $if BATCH_TILE > 16:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      const __m512 vx0 = _mm512_loadu_ps(input);
      $for N in range(1, SIMD_TILE):
        const __m512 vx${N} = _mm512_loadu_ps(input + ${N * 16});
      input += ${BATCH_TILE};

      $for N in range(SIMD_TILE):
        const __m512 vz${N} = _mm512_range_ps(vsat_cutoff, vx${N}, 0xA);
      $for N in range(SIMD_TILE):
        __m512 vn${N} = _mm512_fmadd_ps(vz${N}, vminus_log2e, vmagic_bias);

      $if LOG2LUT == 0:
        $for N in range(SIMD_TILE):
          const __m512 vs${N} = _mm512_castsi512_ps(_mm512_slli_epi32(_mm512_castps_si512(vn${N}), 23));
          vn${N} = _mm512_sub_ps(vn${N}, vmagic_bias);
      $else:
        $for N in range(SIMD_TILE):
          const __m512i ve${N} = _mm512_slli_epi32(_mm512_castps_si512(vn${N}), ${23-LOG2LUT});

        $if PERM:
          $for N in range(SIMD_TILE):
            $if LOG2LUT == 2:
              const __m512i vl${N} = _mm512_castps_si512(_mm512_permutevar_ps(vtable, _mm512_castps_si512(vn${N})));
            $elif LOG2LUT == 3:
              const __m512i vl${N} = _mm512_permutexvar_epi32(_mm512_castps_si512(vn${N}), vtable);
        $else:
          $for N in range(SIMD_TILE):
            const __m512i vidx${N} = _mm512_and_si512(_mm512_castps_si512(vn${N}), vindex_mask);
          $for N in range(SIMD_TILE):
            const __m512i vl${N} = _mm512_i32gather_epi32(vidx${N}, xnn_table_exp2minus_k_over_${LUT}, sizeof(uint32_t));

        $for N in range(SIMD_TILE):
          const __m512 vs${N} = _mm512_castsi512_ps(_mm512_add_epi32(vl${N}, ve${N}));
          vn${N} = _mm512_sub_ps(vn${N}, vmagic_bias);

      $for N in range(SIMD_TILE):
        const __m512 vt${N} = _mm512_fmadd_ps(vn${N}, vln2, vz${N});

      $for N in range(SIMD_TILE):
        __m512 vp${N} = vc${P};
      $for i in reversed(range(2, P)):
        $for N in range(SIMD_TILE):
          vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vc${i});
      $for N in range(SIMD_TILE):
        vp${N} = _mm512_fmadd_ps(vp${N}, vt${N}, vminus_two);

      $for N in range(SIMD_TILE):
        const __m512 vts${N} = _mm512_mul_ps(vt${N}, vs${N});
        const __m512 vsmo${N} = _mm512_sub_ps(vs${N}, vone);
      $for N in range(SIMD_TILE):
        const __m512 vemo${N} = _mm512_fmadd_ps(vp${N}, vts${N}, vsmo${N});
      $for N in range(SIMD_TILE):
        const __m512 vepo${N} = _mm512_sub_ps(vemo${N}, vminus_two);

      $if DIV == "DIV":
        $for N in range(SIMD_TILE):
          __m512 vy${N} = _mm512_div_ps(vemo${N}, vepo${N});
      $else:
        $for N in range(SIMD_TILE):
          __m512 vrepo${N} = _mm512_rcp14_ps(vepo${N});
        $for N in range(SIMD_TILE):
          const __m512 verepo${N} = _mm512_fnmadd_ps(vrepo${N}, vepo${N}, vone);
        $for N in range(SIMD_TILE):
          vrepo${N} = _mm512_fmadd_ps(verepo${N}, vrepo${N}, vrepo${N});

        $for N in range(SIMD_TILE):
          __m512 vy${N} = _mm512_mul_ps(vemo${N}, vrepo${N});
        $if DIV.endswith("ADJ"):
          $for N in range(SIMD_TILE):
            const __m512 vey${N} = _mm512_fnmadd_ps(vy${N}, vepo${N}, vemo${N});
          $for N in range(SIMD_TILE):
            vy${N} = _mm512_fmadd_ps(vey${N}, vrepo${N}, vy${N});
      $for N in range(SIMD_TILE):
        vy${N} = _mm512_castsi512_ps(_mm512_ternarylogic_epi32(_mm512_castps_si512(vy${N}), _mm512_castps_si512(vx${N}), vsign_mask, 0xD8));

      _mm512_storeu_ps(output, vy0);
      $for N in range(1, SIMD_TILE):
        _mm512_storeu_ps(output + ${N * 16}, vy${N});
      output += ${BATCH_TILE};
    }
  for (; batch >= 16 * sizeof(float); batch -= 16 * sizeof(float)) {
    const __m512 vx = _mm512_loadu_ps(input);
    input += 16;

    const __m512 vz = _mm512_range_ps(vsat_cutoff, vx, 0xA);
    __m512 vn = _mm512_fmadd_ps(vz, vminus_log2e, vmagic_bias);

    $if LOG2LUT == 0:
      const __m512 vs = _mm512_castsi512_ps(_mm512_slli_epi32(_mm512_castps_si512(vn), 23));
    $else:
      const __m512i ve = _mm512_slli_epi32(_mm512_castps_si512(vn), ${23-LOG2LUT});

      $if PERM:
        $if LOG2LUT == 2:
          const __m512i vl = _mm512_castps_si512(_mm512_permutevar_ps(vtable, _mm512_castps_si512(vn)));
        $elif LOG2LUT == 3:
          const __m512i vl = _mm512_permutexvar_epi32(_mm512_castps_si512(vn), vtable);
      $else:
        const __m512i vidx = _mm512_and_si512(_mm512_castps_si512(vn), vindex_mask);
        const __m512i vl = _mm512_i32gather_epi32(vidx, xnn_table_exp2minus_k_over_${LUT}, sizeof(uint32_t));

      const __m512 vs = _mm512_castsi512_ps(_mm512_add_epi32(vl, ve));

    vn = _mm512_sub_ps(vn, vmagic_bias);

    const __m512 vt = _mm512_fmadd_ps(vn, vln2, vz);

    __m512 vp = vc${P};
    $for i in reversed(range(2, P)):
      vp = _mm512_fmadd_ps(vp, vt, vc${i});
    vp = _mm512_fmadd_ps(vp, vt, vminus_two);

    const __m512 vts = _mm512_mul_ps(vt, vs);
    const __m512 vsmo = _mm512_sub_ps(vs, vone);
    const __m512 vemo = _mm512_fmadd_ps(vp, vts, vsmo);
    const __m512 vepo = _mm512_sub_ps(vemo, vminus_two);

    $if DIV == "DIV":
      __m512 vy = _mm512_div_ps(vemo, vepo);
    $else:
      __m512 vrepo = _mm512_rcp14_ps(vepo);
      const __m512 verepo = _mm512_fnmadd_ps(vrepo, vepo, vone);
      vrepo = _mm512_fmadd_ps(verepo, vrepo, vrepo);

      __m512 vy = _mm512_mul_ps(vemo, vrepo);
      $if DIV.endswith("ADJ"):
        const __m512 vey = _mm512_fnmadd_ps(vy, vepo, vemo);
        vy = _mm512_fmadd_ps(vey, vrepo, vy);
    vy = _mm512_castsi512_ps(_mm512_ternarylogic_epi32(_mm512_castps_si512(vy), _mm512_castps_si512(vx), vsign_mask, 0xD8));

    _mm512_storeu_ps(output, vy);
    output += 16;
  }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(float));
    assert(batch <= 15 * sizeof(float));

    // Prepare mask for valid 32-bit elements (depends on batch).
    batch >>= XNN_LOG2_SIZEOF_FLOAT;
    const __mmask16 vmask = _cvtu32_mask16((uint32_t) ((UINT32_C(1) << batch) - UINT32_C(1)));

    const __m512 vx = _mm512_maskz_loadu_ps(vmask, input);

    const __m512 vz = _mm512_range_ps(vsat_cutoff, vx, 0xA);
    __m512 vn = _mm512_fmadd_ps(vz, vminus_log2e, vmagic_bias);

    $if LOG2LUT == 0:
      const __m512 vs = _mm512_castsi512_ps(_mm512_slli_epi32(_mm512_castps_si512(vn), 23));
    $else:
      const __m512i ve = _mm512_slli_epi32(_mm512_castps_si512(vn), ${23-LOG2LUT});

      $if PERM:
        $if LOG2LUT == 2:
          const __m512i vl = _mm512_castps_si512(_mm512_permutevar_ps(vtable, _mm512_castps_si512(vn)));
        $elif LOG2LUT == 3:
          const __m512i vl = _mm512_permutexvar_epi32(_mm512_castps_si512(vn), vtable);
      $else:
        const __m512i vidx = _mm512_and_si512(_mm512_castps_si512(vn), vindex_mask);
        const __m512i vl = _mm512_i32gather_epi32(vidx, xnn_table_exp2minus_k_over_${LUT}, sizeof(uint32_t));

      const __m512 vs = _mm512_castsi512_ps(_mm512_add_epi32(vl, ve));

    vn = _mm512_sub_ps(vn, vmagic_bias);

    const __m512 vt = _mm512_fmadd_ps(vn, vln2, vz);

    __m512 vp = vc${P};
    $for i in reversed(range(2, P)):
      vp = _mm512_fmadd_ps(vp, vt, vc${i});
    vp = _mm512_fmadd_ps(vp, vt, vminus_two);

    const __m512 vts = _mm512_mul_ps(vt, vs);
    const __m512 vsmo = _mm512_sub_ps(vs, vone);
    const __m512 vemo = _mm512_fmadd_ps(vp, vts, vsmo);
    const __m512 vepo = _mm512_sub_ps(vemo, vminus_two);

    $if DIV == "DIV":
      __m512 vy = _mm512_div_ps(vemo, vepo);
    $else:
      __m512 vrepo = _mm512_rcp14_ps(vepo);
      const __m512 verepo = _mm512_fnmadd_ps(vrepo, vepo, vone);
      vrepo = _mm512_fmadd_ps(verepo, vrepo, vrepo);

      __m512 vy = _mm512_mul_ps(vemo, vrepo);
      $if DIV.endswith("ADJ"):
        const __m512 vey = _mm512_fnmadd_ps(vy, vepo, vemo);
        vy = _mm512_fmadd_ps(vey, vrepo, vy);
    vy = _mm512_castsi512_ps(_mm512_ternarylogic_epi32(_mm512_castps_si512(vy), _mm512_castps_si512(vx), vsign_mask, 0xD8));

    _mm512_mask_storeu_ps(output, vmask, vy);
  }
}
