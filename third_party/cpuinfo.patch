diff --git README.md README.md
index 393c32c..7d383ff 100644
--- README.md
+++ README.md
@@ -159,7 +159,7 @@ pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpu_set);
   - [x] ARM-designed ARM cores (up to Cortex-A55 and Cortex-A75)
   - [x] Qualcomm-designed ARM cores (up to Kryo, Kryo-280, and Kryo-385)
   - [x] Nvidia-designed ARM cores (Denver)
-  - [x] Samsung-designed ARM cores (Mongoose and Meerkat)
+  - [x] Samsung-designed ARM cores (Exynos)
   - [x] Intel-designed ARM cores (XScale up to 3rd-gen)
   - [x] Apple-designed ARM cores (up to Hurricane)
   - [x] Cavium-designed ARM cores (ThunderX)
diff --git src/arm/android/api.h src/arm/android/api.h
index b959894..228632a 100644
--- src/arm/android/api.h
+++ src/arm/android/api.h
@@ -12,6 +12,7 @@ enum cpuinfo_android_chipset_property {
 	cpuinfo_android_chipset_property_ro_mediatek_platform,
 	cpuinfo_android_chipset_property_ro_arch,
 	cpuinfo_android_chipset_property_ro_chipname,
+	cpuinfo_android_chipset_property_ro_hardware_chipname,
 	cpuinfo_android_chipset_property_max,
 };
 
diff --git src/arm/android/properties.c src/arm/android/properties.c
index 6e69647..5f93889 100644
--- src/arm/android/properties.c
+++ src/arm/android/properties.c
@@ -60,4 +60,8 @@ void cpuinfo_arm_android_parse_properties(struct cpuinfo_android_properties prop
 	const int ro_chipname_length =
 		cpuinfo_android_property_get("ro.chipname", properties->ro_chipname);
 	cpuinfo_log_debug("read ro.chipname = \"%.*s\"", ro_chipname_length, properties->ro_chipname);
+
+	const int ro_hardware_chipname_length =
+		cpuinfo_android_property_get("ro.hardware.chipname", properties->ro_hardware_chipname);
+	cpuinfo_log_debug("read ro.hardware.chipname = \"%.*s\"", ro_hardware_chipname_length, properties->ro_hardware_chipname);
 }
diff --git src/arm/api.h src/arm/api.h
index 69274bc..48b99dd 100644
--- src/arm/api.h
+++ src/arm/api.h
@@ -78,45 +78,45 @@ struct cpuinfo_arm_chipset {
 #define CPUINFO_ARM_CHIPSET_NAME_MAX CPUINFO_PACKAGE_NAME_MAX
 
 #ifndef __cplusplus
-CPUINFO_INTERNAL void cpuinfo_arm_chipset_to_string(
-	const struct cpuinfo_arm_chipset chipset[restrict static 1],
-	char name[restrict static CPUINFO_ARM_CHIPSET_NAME_MAX]);
+	CPUINFO_INTERNAL void cpuinfo_arm_chipset_to_string(
+		const struct cpuinfo_arm_chipset chipset[restrict static 1],
+		char name[restrict static CPUINFO_ARM_CHIPSET_NAME_MAX]);
 
-CPUINFO_INTERNAL void cpuinfo_arm_fixup_chipset(
-	struct cpuinfo_arm_chipset chipset[restrict static 1], uint32_t cores, uint32_t max_cpu_freq_max);
+	CPUINFO_INTERNAL void cpuinfo_arm_fixup_chipset(
+		struct cpuinfo_arm_chipset chipset[restrict static 1], uint32_t cores, uint32_t max_cpu_freq_max);
 
-CPUINFO_INTERNAL void cpuinfo_arm_decode_vendor_uarch(
-	uint32_t midr,
-#if CPUINFO_ARCH_ARM
-	bool has_vfpv4,
-#endif
-	enum cpuinfo_vendor vendor[restrict static 1],
-	enum cpuinfo_uarch uarch[restrict static 1]);
+	CPUINFO_INTERNAL void cpuinfo_arm_decode_vendor_uarch(
+		uint32_t midr,
+	#if CPUINFO_ARCH_ARM
+		bool has_vfpv4,
+	#endif
+		enum cpuinfo_vendor vendor[restrict static 1],
+		enum cpuinfo_uarch uarch[restrict static 1]);
 
-CPUINFO_INTERNAL void cpuinfo_arm_decode_cache(
-	enum cpuinfo_uarch uarch,
-	uint32_t cluster_cores,
-	uint32_t midr,
-	const struct cpuinfo_arm_chipset chipset[restrict static 1],
-	uint32_t cluster_id,
-	uint32_t arch_version,
-	struct cpuinfo_cache l1i[restrict static 1],
-	struct cpuinfo_cache l1d[restrict static 1],
-	struct cpuinfo_cache l2[restrict static 1],
-	struct cpuinfo_cache l3[restrict static 1]);
+	CPUINFO_INTERNAL void cpuinfo_arm_decode_cache(
+		enum cpuinfo_uarch uarch,
+		uint32_t cluster_cores,
+		uint32_t midr,
+		const struct cpuinfo_arm_chipset chipset[restrict static 1],
+		uint32_t cluster_id,
+		uint32_t arch_version,
+		struct cpuinfo_cache l1i[restrict static 1],
+		struct cpuinfo_cache l1d[restrict static 1],
+		struct cpuinfo_cache l2[restrict static 1],
+		struct cpuinfo_cache l3[restrict static 1]);
 
-CPUINFO_INTERNAL uint32_t cpuinfo_arm_compute_max_cache_size(
-	const struct cpuinfo_processor processor[restrict static 1]);
+	CPUINFO_INTERNAL uint32_t cpuinfo_arm_compute_max_cache_size(
+		const struct cpuinfo_processor processor[restrict static 1]);
 #else /* defined(__cplusplus) */
-CPUINFO_INTERNAL void cpuinfo_arm_decode_cache(
-	enum cpuinfo_uarch uarch,
-	uint32_t cluster_cores,
-	uint32_t midr,
-	const struct cpuinfo_arm_chipset chipset[1],
-	uint32_t cluster_id,
-	uint32_t arch_version,
-	struct cpuinfo_cache l1i[1],
-	struct cpuinfo_cache l1d[1],
-	struct cpuinfo_cache l2[1],
-	struct cpuinfo_cache l3[1]);
+	CPUINFO_INTERNAL void cpuinfo_arm_decode_cache(
+		enum cpuinfo_uarch uarch,
+		uint32_t cluster_cores,
+		uint32_t midr,
+		const struct cpuinfo_arm_chipset chipset[1],
+		uint32_t cluster_id,
+		uint32_t arch_version,
+		struct cpuinfo_cache l1i[1],
+		struct cpuinfo_cache l1d[1],
+		struct cpuinfo_cache l2[1],
+		struct cpuinfo_cache l3[1]);
 #endif
diff --git src/arm/linux/api.h src/arm/linux/api.h
index ab3741d..275d072 100644
--- src/arm/linux/api.h
+++ src/arm/linux/api.h
@@ -24,6 +24,7 @@
 		char ro_mediatek_platform[CPUINFO_BUILD_PROP_VALUE_MAX];
 		char ro_arch[CPUINFO_BUILD_PROP_VALUE_MAX];
 		char ro_chipname[CPUINFO_BUILD_PROP_VALUE_MAX];
+		char ro_hardware_chipname[CPUINFO_BUILD_PROP_VALUE_MAX];
 	};
 #endif
 
@@ -322,6 +323,9 @@ CPUINFO_INTERNAL struct cpuinfo_arm_chipset
 	CPUINFO_INTERNAL struct cpuinfo_arm_chipset
 		cpuinfo_arm_android_decode_chipset_from_ro_chipname(
 			const char ro_chipname[restrict static CPUINFO_BUILD_PROP_VALUE_MAX]);
+	CPUINFO_INTERNAL struct cpuinfo_arm_chipset
+		cpuinfo_arm_android_decode_chipset_from_ro_hardware_chipname(
+			const char ro_hardware_chipname[restrict static CPUINFO_BUILD_PROP_VALUE_MAX]);
 #endif
 
 CPUINFO_INTERNAL bool cpuinfo_arm_linux_detect_core_clusters_by_heuristic(
diff --git src/arm/linux/chipset.c src/arm/linux/chipset.c
index f365842..35058d9 100644
--- src/arm/linux/chipset.c
+++ src/arm/linux/chipset.c
@@ -234,6 +234,53 @@ static bool match_sdm(
 	return true;
 }
 
+/**
+ * Tries to match /SM\d{4}$/ signature for Qualcomm Snapdragon chipsets.
+ * If match successful, extracts model information into \p chipset argument.
+ *
+ * @param start - start of the /proc/cpuinfo Hardware string to match.
+ * @param end - end of the /proc/cpuinfo Hardware string to match.
+ * @param[out] chipset - location where chipset information will be stored upon a successful match.
+ *
+ * @returns true if signature matched, false otherwise.
+ */
+static bool match_sm(
+	const char* start, const char* end,
+	struct cpuinfo_arm_chipset chipset[restrict static 1])
+{
+	/* Expect exactly 6 symbols: 2 symbols "SM" + 4 digits */
+	if (start + 6 != end) {
+		return false;
+	}
+
+	/* Check that string starts with "SM".
+	 * The first three characters are loaded and compared as 16-bit little endian word.
+	 */
+	const uint32_t expected_sm = load_u16le(start);
+	if (expected_sm != UINT16_C(0x4D53) /* "MS" = reverse("SM") */) {
+		return false;
+	}
+
+	/* Validate and parse 4-digit model number */
+	uint32_t model = 0;
+	for (uint32_t i = 2; i < 6; i++) {
+		const uint32_t digit = (uint32_t) (uint8_t) start[i] - '0';
+		if (digit >= 10) {
+			/* Not really a digit */
+			return false;
+		}
+		model = model * 10 + digit;
+	}
+
+	/* Return parsed chipset. */
+	*chipset = (struct cpuinfo_arm_chipset) {
+		.vendor = cpuinfo_arm_chipset_vendor_qualcomm,
+		.series = cpuinfo_arm_chipset_series_qualcomm_snapdragon,
+		.model = model,
+	};
+	return true;
+}
+
 /**
  * Tries to match /Samsung Exynos\d{4}$/ signature (case-insensitive) for Samsung Exynos chipsets.
  * If match successful, extracts model information into \p chipset argument.
@@ -735,7 +782,7 @@ static bool match_rk(
 }
 
 /**
- * Tries to match, case-insentitively, /sc\d{4}[a-z]*|scx15$/ signature for Spreadtrum SC chipsets.
+ * Tries to match, case-insentitively, /s[cp]\d{4}[a-z]*|scx15$/ signature for Spreadtrum SC chipsets.
  * If match successful, extracts model information into \p chipset argument.
  *
  * @param start - start of the platform identifier (/proc/cpuinfo Hardware string, ro.product.board,
@@ -756,12 +803,16 @@ static bool match_sc(
 	}
 
 	/*
-	 * Check that string starts with "SC" (case-insensitive).
+	 * Check that string starts with "S[CP]" (case-insensitive).
 	 * The first two characters are loaded as 16-bit little endian word and converted to lowercase.
 	 */
-	const uint16_t expected_sc = UINT16_C(0x2020) | load_u16le(start);
-	if (expected_sc != UINT16_C(0x6373) /* "cs" = reverse("sc") */) {
-		return false;
+	const uint16_t expected_sc_or_sp = UINT16_C(0x2020) | load_u16le(start);
+	switch (expected_sc_or_sp) {
+		case UINT16_C(0x6373): /* "cs" = reverse("sc") */
+		case UINT16_C(0x7073): /* "ps" = reverse("sp") */
+			break;
+		default:
+			return false;
 	}
 
 	/* Special case: "scx" prefix (SC7715 reported as "scx15") */
@@ -785,7 +836,7 @@ static bool match_sc(
 		return true;
 	}
 
-	/* Expect at least 6 symbols: "SC" (2 symbols) + 4-digit model number */
+	/* Expect at least 6 symbols: "S[CP]" (2 symbols) + 4-digit model number */
 	if (start + 6 > end) {
 		return false;
 	}
@@ -2188,6 +2239,14 @@ struct cpuinfo_arm_chipset cpuinfo_arm_linux_decode_chipset_from_proc_cpuinfo_ha
 							return chipset;
 						}
 
+						/* Check SMxxxx (Qualcomm Snapdragon) signature */
+						if (match_sm(pos, hardware_end, &chipset)) {
+							cpuinfo_log_debug(
+								"matched Qualcomm SM signature in /proc/cpuinfo Hardware string \"%.*s\"",
+								(int) hardware_length, hardware);
+							return chipset;
+						}
+
 						/* Check MediaTek MT signature */
 						if (match_mt(pos, hardware_end, true, &chipset)) {
 							cpuinfo_log_debug(
@@ -2949,13 +3008,14 @@ struct cpuinfo_arm_chipset cpuinfo_arm_linux_decode_chipset_from_proc_cpuinfo_ha
 	}
 
 	/*
-	 * Decodes chipset name from ro.chipname Android system property.
+	 * Decodes chipset name from ro.chipname or ro.hardware.chipname Android system property.
 	 *
-	 * @param[in] chipname - ro.chipname value.
+	 * @param[in] chipname - ro.chipname or ro.hardware.chipname value.
 	 *
 	 * @returns Decoded chipset name. If chipset could not be decoded, the resulting structure would use `unknown` vendor
 	 *          and series identifiers.
 	 */
+
 	struct cpuinfo_arm_chipset cpuinfo_arm_android_decode_chipset_from_ro_chipname(
 		const char chipname[restrict static CPUINFO_BUILD_PROP_VALUE_MAX])
 	{
@@ -2971,6 +3031,14 @@ struct cpuinfo_arm_chipset cpuinfo_arm_linux_decode_chipset_from_proc_cpuinfo_ha
 			return chipset;
 		}
 
+		/* Check SMxxxx (Qualcomm Snapdragon) signature */
+		if (match_sm(chipname, chipname_end, &chipset)) {
+			cpuinfo_log_debug(
+				"matched Qualcomm SM signature in /proc/cpuinfo Hardware string \"%.*s\"",
+				(int) chipname_length, chipname);
+			return chipset;
+		}
+
 		/* Check exynosXXXX (Samsung Exynos) signature */
 		if (match_exynos(chipname, chipname_end, &chipset)) {
 			cpuinfo_log_debug(
@@ -3181,12 +3249,6 @@ void cpuinfo_arm_fixup_chipset(
 			}
 			break;
 		}
-		case cpuinfo_arm_chipset_series_qualcomm_snapdragon:
-			/* Snapdragon 670 was renamed to Snapdragon 710 */
-			if (chipset->model == 670) {
-				chipset->model = 710;
-			}
-			break;
 		case cpuinfo_arm_chipset_series_samsung_exynos:
 			switch (chipset->model) {
 #if CPUINFO_ARCH_ARM
@@ -3372,8 +3434,12 @@ void cpuinfo_arm_chipset_to_string(
 		const struct cpuinfo_arm_chipset proc_cpuinfo_hardware_chipset[restrict static 1],
 		const struct cpuinfo_arm_chipset ro_product_board_chipset[restrict static 1],
 		const struct cpuinfo_arm_chipset ro_board_platform_chipset[restrict static 1],
-		const struct cpuinfo_arm_chipset ro_chipname_chipset[restrict static 1])
+		const struct cpuinfo_arm_chipset ro_chipname_chipset[restrict static 1],
+		const struct cpuinfo_arm_chipset ro_hardware_chipname_chipset[restrict static 1])
 	{
+		if (ro_hardware_chipname_chipset->series != cpuinfo_arm_chipset_series_unknown) {
+			return *ro_hardware_chipname_chipset;
+		}
 		if (ro_chipname_chipset->series != cpuinfo_arm_chipset_series_unknown) {
 			return *ro_chipname_chipset;
 		}
@@ -3524,6 +3590,8 @@ void cpuinfo_arm_chipset_to_string(
 				cpuinfo_arm_android_decode_chipset_from_ro_arch(properties->ro_arch),
 			[cpuinfo_android_chipset_property_ro_chipname] =
 				cpuinfo_arm_android_decode_chipset_from_ro_chipname(properties->ro_chipname),
+			[cpuinfo_android_chipset_property_ro_hardware_chipname] =
+				cpuinfo_arm_android_decode_chipset_from_ro_chipname(properties->ro_hardware_chipname),
 		};
 		enum cpuinfo_arm_chipset_vendor vendor = cpuinfo_arm_chipset_vendor_unknown;
 		for (size_t i = 0; i < cpuinfo_android_chipset_property_max; i++) {
@@ -3592,7 +3660,8 @@ void cpuinfo_arm_chipset_to_string(
 								&chipsets[cpuinfo_android_chipset_property_proc_cpuinfo_hardware],
 								&chipsets[cpuinfo_android_chipset_property_ro_product_board],
 								&chipsets[cpuinfo_android_chipset_property_ro_board_platform],
-								&chipsets[cpuinfo_android_chipset_property_ro_chipname]);
+								&chipsets[cpuinfo_android_chipset_property_ro_chipname],
+								&chipsets[cpuinfo_android_chipset_property_ro_hardware_chipname]);
 						case cpuinfo_arm_chipset_vendor_mediatek:
 							return disambiguate_mediatek_chipset(
 								&chipsets[cpuinfo_android_chipset_property_proc_cpuinfo_hardware],
diff --git src/cpuinfo/internal-api.h src/cpuinfo/internal-api.h
index 717b810..f12c48d 100644
--- src/cpuinfo/internal-api.h
+++ src/cpuinfo/internal-api.h
@@ -40,6 +40,7 @@ CPUINFO_PRIVATE void cpuinfo_x86_linux_init(void);
 #endif
 CPUINFO_PRIVATE void cpuinfo_arm_mach_init(void);
 CPUINFO_PRIVATE void cpuinfo_arm_linux_init(void);
+CPUINFO_PRIVATE void cpuinfo_emscripten_init(void);
 
 CPUINFO_PRIVATE uint32_t cpuinfo_compute_max_cache_size(const struct cpuinfo_processor* processor);
 
diff --git src/init.c src/init.c
index fa69807..10a1afc 100644
--- src/init.c
+++ src/init.c
@@ -1,6 +1,6 @@
 #ifdef _WIN32
 	#include <windows.h>
-#else
+#elif !defined(__EMSCRIPTEN__) || defined(__EMSCRIPTEN_PTHREADS__)
 	#include <pthread.h>
 #endif
 
@@ -15,8 +15,10 @@
 
 #ifdef _WIN32
 	static INIT_ONCE init_guard = INIT_ONCE_STATIC_INIT;
-#else
+#elif !defined(__EMSCRIPTEN__) || defined(__EMSCRIPTEN_PTHREADS__)
 	static pthread_once_t init_guard = PTHREAD_ONCE_INIT;
+#else
+	static bool init_guard = false;
 #endif
 
 bool CPUINFO_ABI cpuinfo_initialize(void) {
@@ -38,6 +40,15 @@ bool CPUINFO_ABI cpuinfo_initialize(void) {
 	#else
 		cpuinfo_log_error("operating system is not supported in cpuinfo");
 	#endif
+#elif CPUINFO_ARCH_ASMJS || CPUINFO_ARCH_WASM || CPUINFO_ARCH_WASMSIMD
+	#if defined(__EMSCRIPTEN_PTHREADS__)
+		pthread_once(&init_guard, &cpuinfo_emscripten_init);
+	#else
+		if (!init_guard) {
+			cpuinfo_emscripten_init();
+		}
+		init_guard = true;
+	#endif
 #else
 	cpuinfo_log_error("processor architecture is not supported in cpuinfo");
 #endif
diff --git test/arm-cache.cc test/arm-cache.cc
index a58b826..8373f7c 100644
--- test/arm-cache.cc
+++ test/arm-cache.cc
@@ -829,7 +829,7 @@ TEST(SAMSUNG, exynos_8890) {
 	struct cpuinfo_cache big_l2 = { 0 };
 	struct cpuinfo_cache big_l3 = { 0 };
 	cpuinfo_arm_decode_cache(
-		cpuinfo_uarch_mongoose_m1, 4, UINT32_C(0x531F0011),
+		cpuinfo_uarch_exynos_m1, 4, UINT32_C(0x531F0011),
 		&chipset, 0, 8,
 		&big_l1i, &big_l1d, &big_l2, &big_l3);
 
@@ -865,7 +865,7 @@ TEST(SAMSUNG, exynos_8895) {
 	struct cpuinfo_cache big_l2 = { 0 };
 	struct cpuinfo_cache big_l3 = { 0 };
 	cpuinfo_arm_decode_cache(
-		cpuinfo_uarch_mongoose_m2, 4, UINT32_C(0x534F0010),
+		cpuinfo_uarch_exynos_m2, 4, UINT32_C(0x534F0010),
 		&chipset, 0, 8,
 		&big_l1i, &big_l1d, &big_l2, &big_l3);
 
@@ -901,7 +901,7 @@ TEST(SAMSUNG, exynos_9810) {
 	struct cpuinfo_cache big_l2 = { 0 };
 	struct cpuinfo_cache big_l3 = { 0 };
 	cpuinfo_arm_decode_cache(
-		cpuinfo_uarch_meerkat_m3, 4, UINT32_C(0x531F0020),
+		cpuinfo_uarch_exynos_m3, 4, UINT32_C(0x531F0020),
 		&chipset, 0, 8,
 		&big_l1i, &big_l1d, &big_l2, &big_l3);
 
diff --git test/mock/galaxy-s7-global.cc test/mock/galaxy-s7-global.cc
index 7a2ddab..620f2c1 100644
--- test/mock/galaxy-s7-global.cc
+++ test/mock/galaxy-s7-global.cc
@@ -188,7 +188,7 @@ TEST(CORES, uarch) {
 			case 1:
 			case 2:
 			case 3:
-				ASSERT_EQ(cpuinfo_uarch_mongoose_m1, cpuinfo_get_core(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m1, cpuinfo_get_core(i)->uarch);
 				break;
 			case 4:
 			case 5:
@@ -313,7 +313,7 @@ TEST(CLUSTERS, uarch) {
 	for (uint32_t i = 0; i < cpuinfo_get_clusters_count(); i++) {
 		switch (i) {
 			case 0:
-				ASSERT_EQ(cpuinfo_uarch_mongoose_m1, cpuinfo_get_cluster(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m1, cpuinfo_get_cluster(i)->uarch);
 				break;
 			case 1:
 				ASSERT_EQ(cpuinfo_uarch_cortex_a53, cpuinfo_get_cluster(i)->uarch);
diff --git test/mock/galaxy-s8-global.cc test/mock/galaxy-s8-global.cc
index ae946ba..30a2826 100644
--- test/mock/galaxy-s8-global.cc
+++ test/mock/galaxy-s8-global.cc
@@ -188,7 +188,7 @@ TEST(CORES, uarch) {
 			case 1:
 			case 2:
 			case 3:
-				ASSERT_EQ(cpuinfo_uarch_mongoose_m2, cpuinfo_get_core(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m2, cpuinfo_get_core(i)->uarch);
 				break;
 			case 4:
 			case 5:
@@ -313,7 +313,7 @@ TEST(CLUSTERS, uarch) {
 	for (uint32_t i = 0; i < cpuinfo_get_clusters_count(); i++) {
 		switch (i) {
 			case 0:
-				ASSERT_EQ(cpuinfo_uarch_mongoose_m2, cpuinfo_get_cluster(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m2, cpuinfo_get_cluster(i)->uarch);
 				break;
 			case 1:
 				ASSERT_EQ(cpuinfo_uarch_cortex_a53, cpuinfo_get_cluster(i)->uarch);
diff --git test/mock/galaxy-s9-global.cc test/mock/galaxy-s9-global.cc
index 412476e..7a67129 100644
--- test/mock/galaxy-s9-global.cc
+++ test/mock/galaxy-s9-global.cc
@@ -201,7 +201,7 @@ TEST(CORES, uarch) {
 			case 1:
 			case 2:
 			case 3:
-				ASSERT_EQ(cpuinfo_uarch_meerkat_m3, cpuinfo_get_core(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m3, cpuinfo_get_core(i)->uarch);
 				break;
 			case 4:
 			case 5:
@@ -326,7 +326,7 @@ TEST(CLUSTERS, uarch) {
 	for (uint32_t i = 0; i < cpuinfo_get_clusters_count(); i++) {
 		switch (i) {
 			case 0:
-				ASSERT_EQ(cpuinfo_uarch_meerkat_m3, cpuinfo_get_cluster(i)->uarch);
+				ASSERT_EQ(cpuinfo_uarch_exynos_m3, cpuinfo_get_cluster(i)->uarch);
 				break;
 			case 1:
 				ASSERT_EQ(cpuinfo_uarch_cortex_a55, cpuinfo_get_cluster(i)->uarch);
diff --git test/name/proc-cpuinfo-hardware.cc test/name/proc-cpuinfo-hardware.cc
index 3076ea2..5e6561b 100644
--- test/name/proc-cpuinfo-hardware.cc
+++ test/name/proc-cpuinfo-hardware.cc
@@ -288,6 +288,11 @@ TEST(PROC_CPUINFO_HARDWARE, qualcomm_sdm) {
 		parse_proc_cpuinfo_hardware("Qualcomm Technologies, Inc SDM660"));
 }
 
+TEST(PROC_CPUINFO_HARDWARE, qualcomm_sm) {
+	EXPECT_EQ("Qualcomm Snapdragon 8150",
+		parse_proc_cpuinfo_hardware("Qualcomm Technologies, Inc SM8150"));
+}
+
 TEST(PROC_CPUINFO_HARDWARE, mediatek_mt) {
 	EXPECT_EQ("MediaTek MT5507",
 		parse_proc_cpuinfo_hardware("MT5507"));
