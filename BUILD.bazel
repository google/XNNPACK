# Copyright 2020 Google LLC
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
#
# Description:
#   XNNPACK - optimized floating-point neural network operators library

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//lib:selects.bzl", "selects")  # buildifier: disable=out-of-order-load
load(":build_defs.bzl", "xnnpack_aggregate_library", "xnnpack_binary", "xnnpack_cc_library", "xnnpack_gcc_std_copts", "xnnpack_min_size_copts", "xnnpack_msvc_std_copts", "xnnpack_std_cxxopts", "xnnpack_unit_test", "xnnpack_visibility")
load(":microkernels.bzl", "AARCH32_ASM_MICROKERNEL_SRCS", "AARCH32_JIT_MICROKERNEL_SRCS", "AARCH64_ASM_MICROKERNEL_SRCS", "AARCH64_JIT_MICROKERNEL_SRCS", "ALL_ARMSIMD32_MICROKERNEL_SRCS", "ALL_AVX2_MICROKERNEL_SRCS", "ALL_AVX512F_MICROKERNEL_SRCS", "ALL_AVX512SKX_MICROKERNEL_SRCS", "ALL_AVX512VBMI_MICROKERNEL_SRCS", "ALL_AVX_MICROKERNEL_SRCS", "ALL_F16C_MICROKERNEL_SRCS", "ALL_FMA3_MICROKERNEL_SRCS", "ALL_FMA_MICROKERNEL_SRCS", "ALL_FP16ARITH_MICROKERNEL_SRCS", "ALL_HEXAGON_MICROKERNEL_SRCS", "ALL_NEONBF16_AARCH64_MICROKERNEL_SRCS", "ALL_NEONBF16_MICROKERNEL_SRCS", "ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS", "ALL_NEONDOT_MICROKERNEL_SRCS", "ALL_NEONFMA_AARCH64_MICROKERNEL_SRCS", "ALL_NEONFMA_MICROKERNEL_SRCS", "ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS", "ALL_NEONFP16ARITH_MICROKERNEL_SRCS", "ALL_NEONFP16_MICROKERNEL_SRCS", "ALL_NEONI8MM_MICROKERNEL_SRCS", "ALL_NEONV8_MICROKERNEL_SRCS", "ALL_NEON_AARCH64_MICROKERNEL_SRCS", "ALL_NEON_MICROKERNEL_SRCS", "ALL_RVV_MICROKERNEL_SRCS", "ALL_SCALAR_MICROKERNEL_SRCS", "ALL_SSE2_MICROKERNEL_SRCS", "ALL_SSE41_MICROKERNEL_SRCS", "ALL_SSE_MICROKERNEL_SRCS", "ALL_SSSE3_MICROKERNEL_SRCS", "ALL_WASMRELAXEDSIMD_MICROKERNEL_SRCS", "ALL_WASMSIMD_MICROKERNEL_SRCS", "ALL_WASM_MICROKERNEL_SRCS", "ALL_XOP_MICROKERNEL_SRCS", "WASM32_ASM_MICROKERNEL_SRCS", "WASM32_JIT_MICROKERNEL_SRCS", "WASMRELAXEDSIMD32_JIT_MICROKERNEL_SRCS", "WASMSIMD32_JIT_MICROKERNEL_SRCS")

licenses(["notice"])

exports_files(["LICENSE"])

exports_files(["preamble.js.lds"])

MICROKERNEL_TEST_DEPS = [
    ":aligned_allocator",
    ":allocator",
    ":common",
    ":enable_assembly",
    ":isa_checks",
    ":math",
    ":microkernels_h",
    ":microparams",
    ":microparams_init",
    ":memory",
    ":params",
    ":quantization",
    ":requantization",
    ":test_microkernels",
    ":xnnpack_h",
    "@FP16",
]

OPERATOR_TEST_DEPS = [
    ":allocator",
    ":cache",
    ":common",
    ":params",
    ":quantization",
    ":XNNPACK_test_mode",
    ":jit_test_mode",
    ":normalization_test_mode",
    "@pthreadpool",
    "@FP16",
]

OPERATOR_SRCS = [
    "src/operator-delete.c",
    "src/operator-run.c",
    "src/operators/argmax-pooling-nhwc.c",
    "src/operators/average-pooling-nhwc.c",
    "src/operators/batch-matrix-multiply-nc.c",
    "src/operators/binary-elementwise-nd.c",
    "src/operators/channel-shuffle-nc.c",
    "src/operators/constant-pad-nd.c",
    "src/operators/convolution-nchw.c",
    "src/operators/convolution-nhwc.c",
    "src/operators/deconvolution-nhwc.c",
    "src/operators/dynamic-fully-connected-nc.c",
    "src/operators/fully-connected-nc.c",
    "src/operators/global-average-pooling-ncw.c",
    "src/operators/global-average-pooling-nwc.c",
    "src/operators/lut-elementwise-nc.c",
    "src/operators/max-pooling-nhwc.c",
    "src/operators/prelu-nc.c",
    "src/operators/reduce-nd.c",
    "src/operators/resize-bilinear-nchw.c",
    "src/operators/resize-bilinear-nhwc.c",
    "src/operators/rope-nthc.c",
    "src/operators/scaled-dot-product-attention-nhtc.c",
    "src/operators/slice-nd.c",
    "src/operators/softmax-nc.c",
    "src/operators/transpose-nd.c",
    "src/operators/unary-elementwise-nc.c",
    "src/operators/unpooling-nhwc.c",
]

SUBGRAPH_SRCS = [
    "src/memory-planner.c",
    "src/runtime.c",
    "src/subgraph.c",
    "src/subgraph/abs.c",
    "src/subgraph/add2.c",
    "src/subgraph/argmax-pooling-2d.c",
    "src/subgraph/average-pooling-2d.c",
    "src/subgraph/bankers-rounding.c",
    "src/subgraph/batch-matrix-multiply.c",
    "src/subgraph/ceiling.c",
    "src/subgraph/clamp.c",
    "src/subgraph/concatenate.c",
    "src/subgraph/convert.c",
    "src/subgraph/convolution-2d.c",
    "src/subgraph/copy.c",
    "src/subgraph/deconvolution-2d.c",
    "src/subgraph/depth-to-space-2d.c",
    "src/subgraph/depthwise-convolution-2d.c",
    "src/subgraph/divide.c",
    "src/subgraph/elu.c",
    "src/subgraph/even-split.c",
    "src/subgraph/floor.c",
    "src/subgraph/fully-connected-sparse.c",
    "src/subgraph/fully-connected.c",
    "src/subgraph/global-average-pooling.c",
    "src/subgraph/global-sum-pooling.c",
    "src/subgraph/hardswish.c",
    "src/subgraph/leaky-relu.c",
    "src/subgraph/max-pooling-2d.c",
    "src/subgraph/maximum2.c",
    "src/subgraph/minimum2.c",
    "src/subgraph/multiply2.c",
    "src/subgraph/negate.c",
    "src/subgraph/prelu.c",
    "src/subgraph/rope.c",
    "src/subgraph/scaled-dot-product-attention.c",
    "src/subgraph/sigmoid.c",
    "src/subgraph/softmax.c",
    "src/subgraph/space-to-depth-2d.c",
    "src/subgraph/square-root.c",
    "src/subgraph/square.c",
    "src/subgraph/squared-difference.c",
    "src/subgraph/static-constant-pad.c",
    "src/subgraph/static-mean.c",
    "src/subgraph/static-reshape.c",
    "src/subgraph/static-resize-bilinear-2d.c",
    "src/subgraph/static-slice.c",
    "src/subgraph/static-transpose.c",
    "src/subgraph/subtract.c",
    "src/subgraph/tanh.c",
    "src/subgraph/unpooling-2d.c",
    "src/subgraph/validation.c",
    "src/tensor.c",
]

TABLE_SRCS = [
    "src/tables/exp2-k-over-64.c",
    "src/tables/exp2-k-over-2048.c",
    "src/tables/exp2minus-k-over-4.c",
    "src/tables/exp2minus-k-over-8.c",
    "src/tables/exp2minus-k-over-16.c",
    "src/tables/exp2minus-k-over-32.c",
    "src/tables/exp2minus-k-over-64.c",
    "src/tables/exp2minus-k-over-2048.c",
    "src/tables/vlog.c",
]

MICROKERNEL_HDRS = [
    "src/xnnpack/argmaxpool.h",
    "src/xnnpack/avgpool.h",
    "src/xnnpack/conv.h",
    "src/xnnpack/dwconv.h",
    "src/xnnpack/fft.h",
    "src/xnnpack/fill.h",
    "src/xnnpack/filterbank.h",
    "src/xnnpack/gavgpool.h",
    "src/xnnpack/gemm.h",
    "src/xnnpack/ibilinear.h",
    "src/xnnpack/igemm.h",
    "src/xnnpack/lut.h",
    "src/xnnpack/maxpool.h",
    "src/xnnpack/packb.h",
    "src/xnnpack/packw.h",
    "src/xnnpack/packx.h",
    "src/xnnpack/pad.h",
    "src/xnnpack/pavgpool.h",
    "src/xnnpack/ppmm.h",
    "src/xnnpack/prelu.h",
    "src/xnnpack/quantization.h",
    "src/xnnpack/raddexpminusmax.h",
    "src/xnnpack/raddextexp.h",
    "src/xnnpack/raddstoreexpminusmax.h",
    "src/xnnpack/reduce.h",
    "src/xnnpack/rmax.h",
    "src/xnnpack/rmaxabs.h",
    "src/xnnpack/spmm.h",
    "src/xnnpack/transpose.h",
    "src/xnnpack/unpool.h",
    "src/xnnpack/vadd.h",
    "src/xnnpack/vbinary.h",
    "src/xnnpack/vcvt.h",
    "src/xnnpack/vhswish.h",
    "src/xnnpack/vlog.h",
    "src/xnnpack/vlrelu.h",
    "src/xnnpack/vlshift.h",
    "src/xnnpack/vmul.h",
    "src/xnnpack/vmulcaddc.h",
    "src/xnnpack/vscaleexpminusmax.h",
    "src/xnnpack/vscaleextexp.h",
    "src/xnnpack/vsquareabs.h",
    "src/xnnpack/vunary.h",
    "src/xnnpack/window.h",
    "src/xnnpack/zerob.h",
    "src/xnnpack/zip.h",
]

INTERNAL_MICROKERNEL_HDRS = MICROKERNEL_HDRS + [
    "src/xnnpack/cache.h",
    "src/xnnpack/intrinsics-polyfill.h",
    "src/xnnpack/math-stubs.h",
    "src/xnnpack/requantization-stubs.h",
]

WASM_JIT_LINKOPTS = [
    "-sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=$addFunction",
    "-sALLOW_TABLE_GROWTH=1",
]

JIT_WASMSIMD32_COMMONS_SRCS = [
    "src/xnnpack/wasmsimd-gemm-igemm-commons.h",
    "src/xnnpack/wasmsimd-gemm-igemm-loadsplat-commons.h",
    "src/xnnpack/wasmsimd-gemm-igemm-s4-commons.h",
]

JIT_WASMRELAXEDSIMD32_COMMONS_SRCS = []

JIT_WASM32_SRCS = WASM32_JIT_MICROKERNEL_SRCS

JIT_WASMSIMD32_SRCS = JIT_WASM32_SRCS + JIT_WASMSIMD32_COMMONS_SRCS + WASMSIMD32_JIT_MICROKERNEL_SRCS

JIT_WASMRELAXEDSIMD32_SRCS = JIT_WASMSIMD32_SRCS + JIT_WASMRELAXEDSIMD32_COMMONS_SRCS + WASMRELAXEDSIMD32_JIT_MICROKERNEL_SRCS

filegroup(
    name = "microkernel_source_files",
    data = ALL_NEON_AARCH64_MICROKERNEL_SRCS + ALL_NEONBF16_AARCH64_MICROKERNEL_SRCS + ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS + ALL_NEONFMA_AARCH64_MICROKERNEL_SRCS + ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS + ALL_ARMSIMD32_MICROKERNEL_SRCS + ALL_AVX_MICROKERNEL_SRCS + ALL_AVX2_MICROKERNEL_SRCS + ALL_AVX512F_MICROKERNEL_SRCS + ALL_AVX512SKX_MICROKERNEL_SRCS + ALL_AVX512VBMI_MICROKERNEL_SRCS + ALL_F16C_MICROKERNEL_SRCS + ALL_FMA_MICROKERNEL_SRCS + ALL_FMA3_MICROKERNEL_SRCS + ALL_FP16ARITH_MICROKERNEL_SRCS + ALL_HEXAGON_MICROKERNEL_SRCS + ALL_NEON_MICROKERNEL_SRCS + ALL_NEONBF16_MICROKERNEL_SRCS + ALL_NEONDOT_MICROKERNEL_SRCS + ALL_NEONFMA_MICROKERNEL_SRCS + ALL_NEONFP16_MICROKERNEL_SRCS + ALL_NEONFP16ARITH_MICROKERNEL_SRCS + ALL_NEONV8_MICROKERNEL_SRCS + ALL_SCALAR_MICROKERNEL_SRCS + ALL_SSE_MICROKERNEL_SRCS + ALL_SSE2_MICROKERNEL_SRCS + ALL_SSE41_MICROKERNEL_SRCS + ALL_SSSE3_MICROKERNEL_SRCS + ALL_WASM_MICROKERNEL_SRCS + ALL_WASMRELAXEDSIMD_MICROKERNEL_SRCS + ALL_WASMSIMD_MICROKERNEL_SRCS + ALL_XOP_MICROKERNEL_SRCS + AARCH32_ASM_MICROKERNEL_SRCS + AARCH64_ASM_MICROKERNEL_SRCS + WASM32_ASM_MICROKERNEL_SRCS + ["src/microparams-init.c"],
    visibility = xnnpack_visibility(),
)

filegroup(
    name = "microkernel_header_files",
    data = MICROKERNEL_HDRS + ["src/xnnpack/microparams.h"],
    visibility = xnnpack_visibility(),
)

# Collection of internal microkernel related headers that declares all the microkernel functions.
xnnpack_cc_library(
    name = "microkernels_h",
    hdrs = INTERNAL_MICROKERNEL_HDRS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "xnnpack_h",
    hdrs = ["include/xnnpack.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "common",
    hdrs = ["src/xnnpack/common.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":platform_jit",
    ],
)

xnnpack_cc_library(
    name = "microparams",
    hdrs = [
        "src/xnnpack/microparams.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
    ],
)

xnnpack_cc_library(
    name = "hardware_config",
    srcs = ["src/configs/hardware-config.c"],
    hdrs = [
        "src/xnnpack/config.h",
        "src/xnnpack/microfnptr.h",
        "src/xnnpack/microparams.h",
    ],
    copts = select({
        ":cpuinfo_enabled": ["-DXNN_ENABLE_CPUINFO=1"],
        "//conditions:default": ["-DXNN_ENABLE_CPUINFO=0"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
    ] + select({
        ":cpuinfo_enabled": ["@cpuinfo"],
        "//conditions:default": [],
    }),
)

xnnpack_cc_library(
    name = "hardware_config_test_mode",
    srcs = ["src/configs/hardware-config.c"],
    hdrs = [
        "src/xnnpack/config.h",
        "src/xnnpack/microfnptr.h",
        "src/xnnpack/microparams.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ] + select({
        ":cpuinfo_enabled": ["-DXNN_ENABLE_CPUINFO=1"],
        "//conditions:default": ["-DXNN_ENABLE_CPUINFO=0"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
    ] + select({
        ":cpuinfo_enabled": ["@cpuinfo"],
        "//conditions:default": [],
    }),
)

xnnpack_cc_library(
    name = "microkernel_configs",
    srcs = [
        "src/configs/argmaxpool-config.c",
        "src/configs/avgpool-config.c",
        "src/configs/binary-elementwise-config.c",
        "src/configs/cmul-config.c",
        "src/configs/conv-hwc2chw-config.c",
        "src/configs/dwconv-config.c",
        "src/configs/dwconv2d-chw-config.c",
        "src/configs/gavgpool-config.c",
        "src/configs/gavgpool-cw-config.c",
        "src/configs/gemm-config.c",
        "src/configs/ibilinear-chw-config.c",
        "src/configs/ibilinear-config.c",
        "src/configs/lut32norm-config.c",
        "src/configs/maxpool-config.c",
        "src/configs/pavgpool-config.c",
        "src/configs/prelu-config.c",
        "src/configs/raddstoreexpminusmax-config.c",
        "src/configs/reduce-config.c",
        "src/configs/rmax-config.c",
        "src/configs/spmm-config.c",
        "src/configs/transpose-config.c",
        "src/configs/unary-elementwise-config.c",
        "src/configs/unpool-config.c",
        "src/configs/vmulcaddc-config.c",
        "src/configs/x8-lut-config.c",
        "src/configs/xx-fill-config.c",
        "src/configs/xx-pad-config.c",
        "src/configs/zip-config.c",
    ],
    hdrs = [
        "src/xnnpack/config.h",
        "src/xnnpack/microfnptr.h",
        "src/xnnpack/microparams.h",
    ],
    copts = select({
        ":cpuinfo_enabled": ["-DXNN_ENABLE_CPUINFO=1"],
        "//conditions:default": ["-DXNN_ENABLE_CPUINFO=0"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":enable_assembly",
        ":enable_dwconv_multipass",
        ":enable_gemm_m_specialization",
        ":enable_jit",
        ":hardware_config",
        ":logging",
        ":microkernels_h",
        ":microparams_init",
        ":packing",
        ":prod_microkernels",
    ] + select({
        ":cpuinfo_enabled": ["@cpuinfo"],
        "//conditions:default": [],
    }),
)

xnnpack_cc_library(
    name = "microkernel_configs_test_mode",
    srcs = [
        "src/configs/argmaxpool-config.c",
        "src/configs/avgpool-config.c",
        "src/configs/binary-elementwise-config.c",
        "src/configs/cmul-config.c",
        "src/configs/conv-hwc2chw-config.c",
        "src/configs/dwconv-config.c",
        "src/configs/dwconv2d-chw-config.c",
        "src/configs/gavgpool-config.c",
        "src/configs/gavgpool-cw-config.c",
        "src/configs/gemm-config.c",
        "src/configs/ibilinear-chw-config.c",
        "src/configs/ibilinear-config.c",
        "src/configs/lut32norm-config.c",
        "src/configs/maxpool-config.c",
        "src/configs/pavgpool-config.c",
        "src/configs/prelu-config.c",
        "src/configs/raddstoreexpminusmax-config.c",
        "src/configs/reduce-config.c",
        "src/configs/rmax-config.c",
        "src/configs/spmm-config.c",
        "src/configs/transpose-config.c",
        "src/configs/unary-elementwise-config.c",
        "src/configs/unpool-config.c",
        "src/configs/vmulcaddc-config.c",
        "src/configs/x8-lut-config.c",
        "src/configs/xx-fill-config.c",
        "src/configs/xx-pad-config.c",
        "src/configs/zip-config.c",
    ],
    hdrs = [
        "src/xnnpack/config.h",
        "src/xnnpack/microfnptr.h",
        "src/xnnpack/microparams.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ] + select({
        ":cpuinfo_enabled": ["-DXNN_ENABLE_CPUINFO=1"],
        "//conditions:default": ["-DXNN_ENABLE_CPUINFO=0"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":enable_assembly",
        ":enable_dwconv_multipass",
        ":enable_gemm_m_specialization",
        ":enable_jit",
        ":hardware_config_test_mode",
        ":logging",
        ":microkernels_h",
        ":microparams_init",
        ":packing",
        ":test_microkernels",
    ] + select({
        ":cpuinfo_enabled": ["@cpuinfo"],
        "//conditions:default": [],
    }),
)

xnnpack_cc_library(
    name = "params",
    srcs = ["src/params.c"],
    hdrs = [
        "src/xnnpack/config.h",
        "src/xnnpack/microfnptr.h",
        "src/xnnpack/params.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":microparams",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "math",
    hdrs = ["src/xnnpack/math.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
    ],
)

xnnpack_cc_library(
    name = "prefetch",
    hdrs = ["src/xnnpack/prefetch.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
    ],
)

xnnpack_cc_library(
    name = "unaligned",
    hdrs = ["src/xnnpack/unaligned.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
    ],
)

xnnpack_cc_library(
    name = "microparams_init",
    srcs = ["src/microparams-init.c"],
    hdrs = ["src/xnnpack/microparams-init.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
        ":math",
        ":microparams",
        ":unaligned",
        ":xnnpack_h",
        "@FP16",
    ],
)

xnnpack_cc_library(
    name = "node_type",
    hdrs = ["src/xnnpack/node-type.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "operator_type",
    hdrs = ["src/xnnpack/operator-type.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "microkernel_type",
    hdrs = ["src/xnnpack/microkernel-type.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "allocator",
    srcs = [
        "src/allocator.c",
    ],
    hdrs = ["src/xnnpack/allocator.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
        ":math",
        ":params",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "aligned_allocator",
    hdrs = [
        "src/xnnpack/aligned-allocator.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "isa_checks",
    hdrs = [
        "src/xnnpack/isa-checks.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":hardware_config",
    ],
)

xnnpack_cc_library(
    name = "math_stubs",
    hdrs = [
        "src/xnnpack/math-stubs.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "memory",
    srcs = [
        "src/memory.c",
    ],
    hdrs = ["src/xnnpack/memory.h"],
    # Do not use xnnpack_gcc_std_copts, as it defines -std=c99, which then makes MAP_ANONYMOUS undefined
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
        ":math",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "quantization",
    hdrs = ["src/xnnpack/quantization.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":microparams",
    ],
)

xnnpack_cc_library(
    name = "requantization",
    hdrs = ["src/xnnpack/requantization.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microparams",
    ],
)

xnnpack_cc_library(
    name = "requantization_stubs",
    hdrs = ["src/xnnpack/requantization-stubs.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
)

xnnpack_cc_library(
    name = "tables",
    srcs = TABLE_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
    ],
)

xnnpack_cc_library(
    name = "scalar_bench_microkernels",
    srcs = ALL_FMA_MICROKERNEL_SRCS + ALL_SCALAR_MICROKERNEL_SRCS,
    aarch32_copts = ["-marm"],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
        "-ffp-contract=off",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
        "@FXdiv",
    ],
)

xnnpack_cc_library(
    name = "scalar_prod_microkernels",
    srcs = ["src/amalgam/gen/scalar.c"],
    aarch32_copts = ["-marm"],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
        "-ffp-contract=off",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    riscv_srcs = ["src/amalgam/gen/fma.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
        "@FXdiv",
    ],
)

xnnpack_cc_library(
    name = "scalar_test_microkernels",
    srcs = ALL_FMA_MICROKERNEL_SRCS + ALL_SCALAR_MICROKERNEL_SRCS,
    aarch32_copts = ["-marm"],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
        "-ffp-contract=off",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
        "@FXdiv",
    ],
)

xnnpack_cc_library(
    name = "wasm_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    wasm_srcs = ALL_WASM_MICROKERNEL_SRCS,
    wasmrelaxedsimd_srcs = ALL_WASM_MICROKERNEL_SRCS + ALL_WASMSIMD_MICROKERNEL_SRCS + ALL_WASMRELAXEDSIMD_MICROKERNEL_SRCS,
    wasmsimd_srcs = ALL_WASM_MICROKERNEL_SRCS + ALL_WASMSIMD_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "wasm_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    wasm_srcs = ["src/amalgam/gen/wasm.c"],
    wasmrelaxedsimd_srcs = [
        "src/amalgam/gen/wasm.c",
        "src/amalgam/gen/wasmrelaxedsimd.c",
        "src/amalgam/gen/wasmsimd.c",
    ],
    wasmsimd_srcs = [
        "src/amalgam/gen/wasm.c",
        "src/amalgam/gen/wasmsimd.c",
    ],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "wasm_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    wasm_srcs = ALL_WASM_MICROKERNEL_SRCS,
    wasmrelaxedsimd_srcs = ALL_WASM_MICROKERNEL_SRCS + ALL_WASMSIMD_MICROKERNEL_SRCS + ALL_WASMRELAXEDSIMD_MICROKERNEL_SRCS,
    wasmsimd_srcs = ALL_WASM_MICROKERNEL_SRCS + ALL_WASMSIMD_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "armsimd32_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv6",
        "-mfpu=vfp",
        "-munaligned-access",
    ],
    aarch32_srcs = ALL_ARMSIMD32_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "armsimd32_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv6",
        "-mfpu=vfp",
        "-munaligned-access",
    ],
    aarch32_srcs = ["src/amalgam/gen/armsimd32.c"],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "armsimd32_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv6",
        "-mfpu=vfp",
        "-munaligned-access",
    ],
    aarch32_srcs = ALL_ARMSIMD32_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts() + [
        "-fno-fast-math",
        "-fno-math-errno",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fp16arith_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        # GCC emits wrong directives for assembler with -mfpu=fp-armv8
        "-mfpu=neon-fp-armv8",
        # For vsqrth_f16 polyfill using sqrtf
        "-fno-math-errno",
        # For vminh_f16/vmaxh_f16 polyfills using compare + select
        "-ffinite-math-only",
    ],
    aarch32_srcs = ALL_FP16ARITH_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+fp16"],
    aarch64_srcs = ALL_FP16ARITH_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fp16arith_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        # GCC emits wrong directives for assembler with -mfpu=fp-armv8
        "-mfpu=neon-fp-armv8",
        # For vsqrth_f16 polyfill using sqrtf
        "-fno-math-errno",
        # For vminh_f16/vmaxh_f16 polyfills using compare + select
        "-ffinite-math-only",
    ],
    aarch32_srcs = ["src/amalgam/gen/fp16arith.c"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fp16arith_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        # GCC emits wrong directives for assembler with -mfpu=fp-armv8
        "-mfpu=neon-fp-armv8",
        # For vsqrth_f16 polyfill using sqrtf
        "-fno-math-errno",
        # For vminh_f16/vmaxh_f16 polyfills using compare + select
        "-ffinite-math-only",
    ],
    aarch32_srcs = ALL_FP16ARITH_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+fp16"],
    aarch64_srcs = ALL_FP16ARITH_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neon_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon",
    ],
    aarch32_srcs = ALL_NEON_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEON_MICROKERNEL_SRCS + ALL_NEON_AARCH64_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neon_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon",
    ],
    aarch32_srcs = ["src/amalgam/gen/neon.c"],
    aarch64_srcs = [
        "src/amalgam/gen/neon-aarch64.c",
        "src/amalgam/gen/neon.c",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neon_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon",
    ],
    aarch32_srcs = ALL_NEON_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEON_MICROKERNEL_SRCS + ALL_NEON_AARCH64_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-fp16",
    ],
    aarch32_srcs = ALL_NEONFP16_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONFP16_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-fp16",
    ],
    aarch32_srcs = ["src/amalgam/gen/neonfp16.c"],
    aarch64_srcs = ["src/amalgam/gen/neonfp16.c"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-fp16",
    ],
    aarch32_srcs = ALL_NEONFP16_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONFP16_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfma_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-vfpv4",
    ],
    aarch32_srcs = ALL_NEONFMA_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONFMA_MICROKERNEL_SRCS + ALL_NEONFMA_AARCH64_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfma_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-vfpv4",
    ],
    aarch32_srcs = ["src/amalgam/gen/neonfma.c"],
    aarch64_srcs = [
        "src/amalgam/gen/neonfma-aarch64.c",
        "src/amalgam/gen/neonfma.c",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfma_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv7-a",
        "-mfpu=neon-vfpv4",
    ],
    aarch32_srcs = ALL_NEONFMA_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONFMA_MICROKERNEL_SRCS + ALL_NEONFMA_AARCH64_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonv8_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8-a",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONV8_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONV8_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonv8_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8-a",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ["src/amalgam/gen/neonv8.c"],
    aarch64_srcs = ["src/amalgam/gen/neonv8.c"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonv8_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8-a",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONV8_MICROKERNEL_SRCS,
    aarch64_srcs = ALL_NEONV8_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16arith_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONFP16ARITH_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+fp16"],
    aarch64_srcs = ALL_NEONFP16ARITH_MICROKERNEL_SRCS + ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16arith_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ["src/amalgam/gen/neonfp16arith.c"],
    aarch64_copts = ["-march=armv8.2-a+fp16"],
    aarch64_srcs = [
        "src/amalgam/gen/neonfp16arith-aarch64.c",
        "src/amalgam/gen/neonfp16arith.c",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonfp16arith_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+fp16",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONFP16ARITH_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+fp16"],
    aarch64_srcs = ALL_NEONFP16ARITH_MICROKERNEL_SRCS + ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonbf16_bench_microkernels",
    aarch64_copts = ["-march=armv8.2-a+bf16"],
    aarch64_srcs = ALL_NEONBF16_MICROKERNEL_SRCS + ALL_NEONBF16_AARCH64_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":params",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neonbf16_test_microkernels",
    aarch64_copts = ["-march=armv8.2-a+bf16"],
    aarch64_srcs = ALL_NEONBF16_MICROKERNEL_SRCS + ALL_NEONBF16_AARCH64_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":params",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neondot_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+dotprod",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONDOT_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+dotprod"],
    aarch64_srcs = ALL_NEONDOT_MICROKERNEL_SRCS + ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neondot_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+dotprod",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ["src/amalgam/gen/neondot.c"],
    aarch64_copts = ["-march=armv8.2-a+dotprod"],
    aarch64_srcs = [
        "src/amalgam/gen/neondot-aarch64.c",
        "src/amalgam/gen/neondot.c",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neondot_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+dotprod",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONDOT_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+dotprod"],
    aarch64_srcs = ALL_NEONDOT_MICROKERNEL_SRCS + ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neoni8mm_bench_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+i8mm",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONI8MM_MICROKERNEL_SRCS,
    aarch64_copts = [
        "-march=armv8.2-a+i8mm",
    ],
    aarch64_srcs = ALL_NEONI8MM_MICROKERNEL_SRCS,
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neoni8mm_prod_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+i8mm",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ["src/amalgam/gen/neoni8mm.c"],
    aarch64_copts = ["-march=armv8.2-a+i8mm"],
    aarch64_srcs = ["src/amalgam/gen/neoni8mm.c"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "neoni8mm_test_microkernels",
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+i8mm",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = ALL_NEONI8MM_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+i8mm"],
    aarch64_srcs = ALL_NEONI8MM_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse2_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse2",
        "-mno-sse3",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSE_MICROKERNEL_SRCS + ALL_SSE2_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse2_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse2",
        "-mno-sse3",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = [
        "src/amalgam/gen/sse.c",
        "src/amalgam/gen/sse2.c",
    ],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse2_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse2",
        "-mno-sse3",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSE_MICROKERNEL_SRCS + ALL_SSE2_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "ssse3_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mssse3",
        "-mno-sse4.1",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSSE3_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "ssse3_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mssse3",
        "-mno-sse4.1",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ["src/amalgam/gen/ssse3.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "ssse3_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mssse3",
        "-mno-sse4.1",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSSE3_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse41_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse4.1",
        "-mno-sse4.2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSE41_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse41_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse4.1",
        "-mno-sse4.2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ["src/amalgam/gen/sse41.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "sse41_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-msse4.1",
        "-mno-sse4.2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:SSE2"],
    x86_srcs = ALL_SSE41_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx",
        "-mno-avx2",
        "-mno-f16c",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_AVX_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx",
        "-mno-avx2",
        "-mno-f16c",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ["src/amalgam/gen/avx.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx",
        "-mno-avx2",
        "-mno-f16c",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_AVX_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "f16c_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mno-avx2",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_F16C_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "f16c_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mno-avx2",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ["src/amalgam/gen/f16c.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "f16c_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mno-avx2",
        "-mno-fma",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_F16C_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "xop_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mxop",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_XOP_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "xop_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mxop",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ["src/amalgam/gen/xop.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "xop_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mxop",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_XOP_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fma3_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_FMA3_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fma3_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ["src/amalgam/gen/fma3.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "fma3_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mno-avx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX"],
    msvc_x86_64_copts = ["/arch:AVX"],
    x86_srcs = ALL_FMA3_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx2_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mavx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX2"],
    msvc_x86_64_copts = ["/arch:AVX2"],
    x86_srcs = ALL_AVX2_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx2_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mavx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX2"],
    msvc_x86_64_copts = ["/arch:AVX2"],
    x86_srcs = ["src/amalgam/gen/avx2.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx2_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mf16c",
        "-mfma",
        "-mavx2",
    ],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX2"],
    msvc_x86_64_copts = ["/arch:AVX2"],
    x86_srcs = ALL_AVX2_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512f_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = ["-mavx512f"],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512F_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512f_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = ["-mavx512f"],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ["src/amalgam/gen/avx512f.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512f_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = ["-mavx512f"],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512F_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512skx_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512SKX_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512skx_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ["src/amalgam/gen/avx512skx.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512skx_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512SKX_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512vbmi_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
        "-mavx512vbmi",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512VBMI_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512vbmi_prod_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
        "-mavx512vbmi",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ["src/amalgam/gen/avx512vbmi.c"],
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "avx512vbmi_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    gcc_x86_copts = [
        "-mavx512f",
        "-mavx512cd",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
        "-mavx512vbmi",
    ],
    mingw_copts = ["-fno-asynchronous-unwind-tables"],
    msvc_copts = xnnpack_msvc_std_copts(),
    msvc_x86_32_copts = ["/arch:AVX512"],
    msvc_x86_64_copts = ["/arch:AVX512"],
    msys_copts = ["-fno-asynchronous-unwind-tables"],
    x86_srcs = ALL_AVX512VBMI_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "rvv_bench_microkernels",
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    riscv_copts = [
        "-march=rv64gcv",
    ],
    riscv_srcs = ALL_RVV_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "rvv_test_microkernels",
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    riscv_copts = [
        "-march=rv64gcv",
    ],
    riscv_srcs = ALL_RVV_MICROKERNEL_SRCS,
    deps = [
        ":common",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":prefetch",
        ":tables",
        ":unaligned",
    ],
)

xnnpack_cc_library(
    name = "asm_microkernels",
    hdrs = ["src/xnnpack/assembly.h"],
    aarch32_copts = [
        "-marm",
        "-march=armv8.2-a+dotprod",
        "-mfpu=neon-fp-armv8",
    ],
    aarch32_srcs = AARCH32_ASM_MICROKERNEL_SRCS,
    aarch64_copts = ["-march=armv8.2-a+fp16+dotprod"],
    aarch64_srcs = AARCH64_ASM_MICROKERNEL_SRCS,
    wasm_srcs = WASM32_ASM_MICROKERNEL_SRCS,
    wasmrelaxedsimd_srcs = WASM32_ASM_MICROKERNEL_SRCS,
    wasmsimd_srcs = WASM32_ASM_MICROKERNEL_SRCS,
)

xnnpack_cc_library(
    name = "log_level_default",
    defines = select({
        # No logging in optimized mode
        ":optimized_build": ["XNN_LOG_LEVEL=0"],
        # Info logging in debug mode.  Use `--define=xnn_log_level=debug` for full logging.
        ":debug_build": ["XNN_LOG_LEVEL=4"],
        # Error-only logging in default (fastbuild) mode
        "//conditions:default": ["XNN_LOG_LEVEL=2"],
    }),
)

xnnpack_cc_library(
    name = "logging",
    srcs = [
        "src/enums/datatype-strings.c",
        "src/enums/microkernel-type.c",
        "src/enums/node-type.c",
        "src/enums/operator-type.c",
        "src/log.c",
    ],
    hdrs = ["src/xnnpack/log.h"],
    copts = select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_log_to_stdio_explicit_true": ["-DXNN_LOG_TO_STDIO=1"],
        "//conditions:default": [],
    }),
    defines = select({
        ":xnn_log_level_explicit_none": ["XNN_LOG_LEVEL=0"],
        ":xnn_log_level_explicit_fatal": ["XNN_LOG_LEVEL=1"],
        ":xnn_log_level_explicit_error": ["XNN_LOG_LEVEL=2"],
        ":xnn_log_level_explicit_warning": ["XNN_LOG_LEVEL=3"],
        ":xnn_log_level_explicit_info": ["XNN_LOG_LEVEL=4"],
        ":xnn_log_level_explicit_debug": ["XNN_LOG_LEVEL=5"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    visibility = xnnpack_visibility(),
    deps = select({
        ":xnn_log_level_explicit_none": [],
        ":xnn_log_level_explicit_fatal": [],
        ":xnn_log_level_explicit_error": [],
        ":xnn_log_level_explicit_warning": [],
        ":xnn_log_level_explicit_info": [],
        ":xnn_log_level_explicit_debug": [],
        "//conditions:default": [":log_level_default"],
    }) + [
        ":common",
        ":microkernel_type",
        ":node_type",
        ":operator_type",
        ":xnnpack_h",
    ],
)

xnnpack_aggregate_library(
    name = "bench_microkernels",
    aarch32_deps = [
        ":armsimd32_bench_microkernels",
        ":neon_bench_microkernels",
        ":neonfp16_bench_microkernels",
        ":neonfma_bench_microkernels",
        ":neonv8_bench_microkernels",
        ":asm_microkernels",
    ],
    aarch64_deps = [
        ":neon_bench_microkernels",
        ":neonfp16_bench_microkernels",
        ":neonfma_bench_microkernels",
        ":neonv8_bench_microkernels",
        ":asm_microkernels",
    ],
    defines = select({
        ":arm_fp16_scalar_enabled": ["XNN_ENABLE_ARM_FP16_SCALAR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_SCALAR=0"],
    }) + select({
        ":arm_fp16_vector_enabled": ["XNN_ENABLE_ARM_FP16_VECTOR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_VECTOR=0"],
    }) + select({
        ":arm_bf16_enabled": ["XNN_ENABLE_ARM_BF16=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_BF16=0"],
    }) + select({
        ":arm_dotprod_enabled": ["XNN_ENABLE_ARM_DOTPROD=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_DOTPROD=0"],
    }) + select({
        ":arm_i8mm_enabled": ["XNN_ENABLE_ARM_I8MM=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_I8MM=0"],
    }) + select({
        ":riscv_vector_enabled": ["XNN_ENABLE_RISCV_VECTOR=1"],
        "//conditions:default": ["XNN_ENABLE_RISCV_VECTOR=0"],
    }),
    generic_deps = [
        ":scalar_bench_microkernels",
    ] + select({
        ":arm_fp16_scalar_enabled": [":fp16arith_bench_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_fp16_vector_enabled": [":neonfp16arith_bench_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_bf16_enabled": [":neonbf16_bench_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_dotprod_enabled": [":neondot_bench_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_i8mm_enabled": [":neoni8mm_bench_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":riscv_vector_enabled": [":rvv_bench_microkernels"],
        "//conditions:default": [],
    }),
    wasm_deps = [
        ":wasm_bench_microkernels",
        ":asm_microkernels",
    ],
    wasmrelaxedsimd_deps = [
        ":wasm_bench_microkernels",
        ":asm_microkernels",
    ],
    wasmsimd_deps = [
        ":wasm_bench_microkernels",
        ":asm_microkernels",
    ],
    x86_deps = [
        ":sse2_bench_microkernels",
        ":ssse3_bench_microkernels",
        ":sse41_bench_microkernels",
        ":avx_bench_microkernels",
        ":f16c_bench_microkernels",
        ":xop_bench_microkernels",
        ":fma3_bench_microkernels",
        ":avx2_bench_microkernels",
        ":avx512f_bench_microkernels",
        ":avx512skx_bench_microkernels",
        ":avx512vbmi_bench_microkernels",
    ],
)

xnnpack_aggregate_library(
    name = "prod_microkernels",
    aarch32_deps = [
        ":armsimd32_prod_microkernels",
        ":neon_prod_microkernels",
        ":neonfp16_prod_microkernels",
        ":neonfma_prod_microkernels",
        ":neonv8_prod_microkernels",
        ":asm_microkernels",
    ],
    aarch64_deps = [
        ":neon_prod_microkernels",
        ":neonfp16_prod_microkernels",
        ":neonfma_prod_microkernels",
        ":neonv8_prod_microkernels",
        ":asm_microkernels",
    ],
    defines = select({
        ":arm_fp16_scalar_enabled": ["XNN_ENABLE_ARM_FP16_SCALAR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_SCALAR=0"],
    }) + select({
        ":arm_fp16_vector_enabled": ["XNN_ENABLE_ARM_FP16_VECTOR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_VECTOR=0"],
    }) + select({
        ":arm_bf16_enabled": ["XNN_ENABLE_ARM_BF16=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_BF16=0"],
    }) + select({
        ":arm_dotprod_enabled": ["XNN_ENABLE_ARM_DOTPROD=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_DOTPROD=0"],
    }) + select({
        ":arm_i8mm_enabled": ["XNN_ENABLE_ARM_I8MM=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_I8MM=0"],
    }),
    generic_deps = [
        ":scalar_prod_microkernels",
    ] + select({
        ":arm_fp16_scalar_enabled": [":fp16arith_prod_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_fp16_vector_enabled": [":neonfp16arith_prod_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_dotprod_enabled": [":neondot_prod_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_i8mm_enabled": [":neoni8mm_prod_microkernels"],
        "//conditions:default": [],
    }),
    wasm_deps = [
        ":wasm_prod_microkernels",
        ":asm_microkernels",
    ],
    wasmrelaxedsimd_deps = [
        ":wasm_prod_microkernels",
        ":asm_microkernels",
    ],
    wasmsimd_deps = [
        ":wasm_prod_microkernels",
        ":asm_microkernels",
    ],
    x86_deps = [
        ":sse2_prod_microkernels",
        ":ssse3_prod_microkernels",
        ":sse41_prod_microkernels",
        ":avx_prod_microkernels",
        ":f16c_prod_microkernels",
        ":xop_prod_microkernels",
        ":fma3_prod_microkernels",
        ":avx2_prod_microkernels",
        ":avx512f_prod_microkernels",
        ":avx512skx_prod_microkernels",
        ":avx512vbmi_prod_microkernels",
    ],
)

xnnpack_aggregate_library(
    name = "test_microkernels",
    aarch32_deps = [
        ":armsimd32_test_microkernels",
        ":neon_test_microkernels",
        ":neonfp16_test_microkernels",
        ":neonfma_test_microkernels",
        ":neonv8_test_microkernels",
        ":asm_microkernels",
    ],
    aarch64_deps = [
        ":neon_test_microkernels",
        ":neonfp16_test_microkernels",
        ":neonfma_test_microkernels",
        ":neonv8_test_microkernels",
        ":asm_microkernels",
    ],
    defines = select({
        ":arm_fp16_scalar_enabled": ["XNN_ENABLE_ARM_FP16_SCALAR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_SCALAR=0"],
    }) + select({
        ":arm_fp16_vector_enabled": ["XNN_ENABLE_ARM_FP16_VECTOR=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_FP16_VECTOR=0"],
    }) + select({
        ":arm_bf16_enabled": ["XNN_ENABLE_ARM_BF16=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_BF16=0"],
    }) + select({
        ":arm_dotprod_enabled": ["XNN_ENABLE_ARM_DOTPROD=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_DOTPROD=0"],
    }) + select({
        ":arm_i8mm_enabled": ["XNN_ENABLE_ARM_I8MM=1"],
        "//conditions:default": ["XNN_ENABLE_ARM_I8MM=0"],
    }) + select({
        ":riscv_vector_enabled": ["XNN_ENABLE_RISCV_VECTOR=1"],
        "//conditions:default": ["XNN_ENABLE_RISCV_VECTOR=0"],
    }),
    generic_deps = [
        ":scalar_test_microkernels",
    ] + select({
        ":arm_fp16_scalar_enabled": [":fp16arith_test_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_fp16_vector_enabled": [":neonfp16arith_test_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_bf16_enabled": [":neonbf16_test_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_dotprod_enabled": [":neondot_test_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":arm_i8mm_enabled": [":neoni8mm_test_microkernels"],
        "//conditions:default": [],
    }) + select({
        ":riscv_vector_enabled": [":rvv_test_microkernels"],
        "//conditions:default": [],
    }),
    wasm_deps = [
        ":wasm_test_microkernels",
        ":asm_microkernels",
    ],
    wasmrelaxedsimd_deps = [
        ":wasm_test_microkernels",
        ":asm_microkernels",
    ],
    wasmsimd_deps = [
        ":wasm_test_microkernels",
        ":asm_microkernels",
    ],
    x86_deps = [
        ":sse2_test_microkernels",
        ":ssse3_test_microkernels",
        ":sse41_test_microkernels",
        ":avx_test_microkernels",
        ":f16c_test_microkernels",
        ":xop_test_microkernels",
        ":fma3_test_microkernels",
        ":avx2_test_microkernels",
        ":avx512f_test_microkernels",
        ":avx512skx_test_microkernels",
        ":avx512vbmi_test_microkernels",
    ],
)

xnnpack_cc_library(
    name = "im2col",
    srcs = ["src/im2col.c"],
    hdrs = [
        "src/xnnpack/im2col.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [":common"],
)

xnnpack_cc_library(
    name = "indirection",
    srcs = ["src/indirection.c"],
    hdrs = ["src/xnnpack/indirection.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":operator_h",
        ":xnnpack_h",
        "@FP16",
        "@FXdiv",
    ],
)

xnnpack_cc_library(
    name = "indirection_test_mode",
    srcs = ["src/indirection.c"],
    hdrs = ["src/xnnpack/indirection.h"],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":operator_h",
        "@FP16",
        "@FXdiv",
    ],
)

xnnpack_cc_library(
    name = "packing",
    srcs = ["src/packing.c"],
    hdrs = ["src/xnnpack/pack.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":operator_h",
        ":unaligned",
        "@FP16",
    ],
)

xnnpack_cc_library(
    name = "packing_test_mode",
    srcs = ["src/packing.c"],
    hdrs = ["src/xnnpack/pack.h"],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":operator_h",
        ":unaligned",
        "@FP16",
    ],
)

cc_library(
    name = "enable_assembly",
    defines = select({
        ":assembly_enabled": ["XNN_ENABLE_ASSEMBLY=1"],
        "//conditions:default": ["XNN_ENABLE_ASSEMBLY=0"],
    }),
    visibility = xnnpack_visibility(),
)

cc_library(
    name = "enable_sparse",
    defines = select({
        ":sparse_enabled": ["XNN_ENABLE_SPARSE=1"],
        "//conditions:default": ["XNN_ENABLE_SPARSE=0"],
    }),
)

cc_library(
    name = "enable_jit",
    defines = select({
        ":jit_enabled": ["XNN_ENABLE_JIT=1"],
        "//conditions:default": ["XNN_ENABLE_JIT=0"],
    }),
    visibility = xnnpack_visibility(),
)

cc_library(
    name = "enable_gemm_m_specialization",
    defines = select({
        ":gemm_m_specialization_enabled": ["XNN_ENABLE_GEMM_M_SPECIALIZATION=1"],
        "//conditions:default": ["XNN_ENABLE_GEMM_M_SPECIALIZATION=0"],
    }),
)

cc_library(
    name = "enable_dwconv_multipass",
    defines = select({
        ":dwconv_multipass_enabled": ["XNN_ENABLE_DWCONV_MULTIPASS=1"],
        "//conditions:default": ["XNN_ENABLE_DWCONV_MULTIPASS=0"],
    }),
)

cc_library(
    name = "platform_jit",
    defines = select({
        ":xnn_platform_jit_explicit_true": ["XNN_PLATFORM_JIT=1"],
        ":xnn_platform_jit_explicit_false": ["XNN_PLATFORM_JIT=0"],
        # Auto-detect JIT compatibility based on platform macros and set XNN_PLATFORM_JIT in xnnpack/common.h
        "//conditions:default": [],
    }),
)

xnnpack_cc_library(
    name = "cache",
    srcs = ["src/cache.c"],
    hdrs = ["src/xnnpack/cache.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":common",
        ":logging",
        ":math",
        ":memory",
        ":mutex",
        ":xnnpack_h",
    ],
)

# Define a library with just the header to remove circular dependencies:
# operator-run (compute) <-> operators.
xnnpack_cc_library(
    name = "compute_h",
    hdrs = [
        "src/xnnpack/compute.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":params",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "microkernel_utils",
    srcs = ["src/microkernel-utils.c"],
    hdrs = ["src/xnnpack/microkernel-utils.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
    ],
)

xnnpack_cc_library(
    name = "post_operation",
    srcs = [
        "src/operators/post-operation.c",
    ],
    hdrs = [
        "src/xnnpack/post-operation.h",
    ],
    deps = [
        ":allocator",
        ":microkernel_configs",
        ":microparams",
        ":params",
    ],
)

xnnpack_cc_library(
    name = "post_operation_test_mode",
    srcs = [
        "src/operators/post-operation.c",
    ],
    hdrs = [
        "src/xnnpack/post-operation.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ] + select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }),
    deps = [
        ":allocator",
        ":microkernel_configs_test_mode",
        ":microparams",
        ":params",
    ],
)

# Define a library with just the header to remove circular dependencies:
# indirection <-> operators.
xnnpack_cc_library(
    name = "operator_h",
    hdrs = [
        "src/xnnpack/operator.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":cache",
        ":compute_h",
        ":microkernel_type",
        ":operator_type",
        ":params",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "operator_utils",
    srcs = ["src/operator-utils.c"],
    hdrs = ["src/xnnpack/operator-utils.h"],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":cache",
        ":common",
        ":math",
        ":operator_h",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "operators",
    srcs = OPERATOR_SRCS,
    hdrs = [
        "src/xnnpack/compute.h",
        "src/xnnpack/operator.h",
    ],
    copts = select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":cache",
        ":common",
        ":enable_gemm_m_specialization",
        ":enable_jit",
        ":indirection",
        ":jit",
        ":logging",
        ":math",
        ":microkernel_configs",
        ":microkernel_type",
        ":microkernel_utils",
        ":microparams_init",
        ":normalization",
        ":operator_type",
        ":operator_utils",
        ":packing",
        ":params",
        ":post_operation",
        ":xnnpack_h",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "operators_test_mode",
    srcs = OPERATOR_SRCS,
    hdrs = [
        "src/xnnpack/compute.h",
        "src/xnnpack/operator.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ] + select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":cache",
        ":common",
        ":enable_gemm_m_specialization",
        ":enable_jit",
        ":indirection_test_mode",
        ":jit_test_mode",
        ":logging",
        ":math",
        ":microkernel_configs_test_mode",
        ":microkernel_type",
        ":microkernel_utils",
        ":microparams_init",
        ":normalization_test_mode",
        ":operator_utils",
        ":packing_test_mode",
        ":params",
        ":post_operation_test_mode",
        ":xnnpack_h",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "jit",
    srcs = [
        "src/jit/aarch32-assembler.cc",
        "src/jit/aarch64-assembler.cc",
        "src/jit/assembler.cc",
        "src/jit/wasm-assembler.cc",
    ],
    hdrs = [
        "src/xnnpack/aarch32-assembler.h",
        "src/xnnpack/aarch64-assembler.h",
        "src/xnnpack/array-helpers.h",
        "src/xnnpack/assembler.h",
        "src/xnnpack/leb128.h",
        "src/xnnpack/wasm-assembler.h",
    ],
    aarch32_srcs = AARCH32_JIT_MICROKERNEL_SRCS,
    aarch64_srcs = AARCH64_JIT_MICROKERNEL_SRCS,
    linkopts = select({
        "xnn_enable_jit_explicit_true_on_emscripten": WASM_JIT_LINKOPTS,
        "//conditions:default": [],
    }),
    msvc_copts = xnnpack_msvc_std_copts(),
    wasm_srcs = JIT_WASM32_SRCS,
    wasmrelaxedsimd_srcs = JIT_WASMRELAXEDSIMD32_SRCS,
    wasmsimd_srcs = JIT_WASMSIMD32_SRCS,
    deps = [
        ":common",
        ":logging",
        ":math",
        ":memory",
        ":microkernels_h",
        ":microparams",
        ":post_operation",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "jit_test_mode",
    srcs = [
        "src/jit/aarch32-assembler.cc",
        "src/jit/aarch64-assembler.cc",
        "src/jit/assembler.cc",
        "src/jit/wasm-assembler.cc",
    ],
    hdrs = [
        "src/xnnpack/aarch32-assembler.h",
        "src/xnnpack/aarch64-assembler.h",
        "src/xnnpack/array-helpers.h",
        "src/xnnpack/assembler.h",
        "src/xnnpack/leb128.h",
        "src/xnnpack/wasm-assembler.h",
    ],
    aarch32_srcs = AARCH32_JIT_MICROKERNEL_SRCS,
    aarch64_srcs = AARCH64_JIT_MICROKERNEL_SRCS,
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    linkopts = select({
        "emscripten": WASM_JIT_LINKOPTS,
        "//conditions:default": [],
    }),
    msvc_copts = xnnpack_msvc_std_copts(),
    wasm_srcs = JIT_WASM32_SRCS,
    wasmrelaxedsimd_srcs = JIT_WASMRELAXEDSIMD32_SRCS,
    wasmsimd_srcs = JIT_WASMSIMD32_SRCS,
    deps = [
        ":common",
        ":logging",
        ":math",
        ":memory",
        ":microkernels_h",
        ":microparams",
        ":post_operation_test_mode",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "subgraph",
    srcs = SUBGRAPH_SRCS,
    hdrs = [
        "src/xnnpack/memory-planner.h",
        "src/xnnpack/subgraph.h",
        "src/xnnpack/subgraph-validation.h",
    ],
    defines = select({
        ":memopt_enabled": ["XNN_ENABLE_MEMOPT=1"],
        "//conditions:default": ["XNN_ENABLE_MEMOPT=1"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":cache",
        ":common",
        ":enable_jit",
        ":enable_sparse",
        ":logging",
        ":math",
        ":node_type",
        ":operators",
        ":params",
        ":requantization",
        ":xnnpack_h",
        "@FP16",
    ],
)

xnnpack_cc_library(
    name = "subgraph_test_mode",
    srcs = SUBGRAPH_SRCS,
    hdrs = [
        "src/xnnpack/memory-planner.h",
        "src/xnnpack/subgraph.h",
        "src/xnnpack/subgraph-validation.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    defines = select({
        ":memopt_enabled": ["XNN_ENABLE_MEMOPT=1"],
        "//conditions:default": ["XNN_ENABLE_MEMOPT=1"],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":allocator",
        ":cache",
        ":common",
        ":enable_jit",
        ":enable_sparse",
        ":logging",
        ":math",
        ":node_type",
        ":operators_test_mode",
        ":params",
        ":requantization",
        ":xnnpack_h",
        "@FP16",
    ],
)

xnnpack_cc_library(
    name = "mutex",
    srcs = [
        "src/mutex.c",
    ],
    hdrs = [
        "src/xnnpack/mutex.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "mutex_test_mode",
    srcs = [
        "src/mutex.c",
    ],
    hdrs = [
        "src/xnnpack/mutex.h",
    ],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":logging",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "normalization",
    srcs = ["src/normalization.c"],
    hdrs = [
        "src/xnnpack/normalization.h",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":common",
        ":math",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "normalization_test_mode",
    srcs = ["src/normalization.c"],
    hdrs = ["src/xnnpack/normalization.h"],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ],
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    deps = [
        ":math",
        ":xnnpack_h",
    ],
)

xnnpack_cc_library(
    name = "XNNPACK",
    srcs = [
        "src/init.c",
    ],
    hdrs = ["include/xnnpack.h"],
    copts = select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    visibility = xnnpack_visibility(),
    deps = [
        ":allocator",
        ":common",
        ":hardware_config",
        ":logging",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":microparams_init",
        ":normalization",
        ":operators",
        ":params",
        ":subgraph",
    ],
)

xnnpack_cc_library(
    name = "XNNPACK_test_mode",
    srcs = [
        "src/init.c",
    ],
    hdrs = ["include/xnnpack.h"],
    copts = [
        "-UNDEBUG",
        "-DXNN_TEST_MODE=1",
    ] + select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    visibility = xnnpack_visibility(),
    deps = [
        ":allocator",
        ":common",
        ":hardware_config_test_mode",
        ":logging",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":microparams_init",
        ":operators_test_mode",
        ":params",
        ":subgraph_test_mode",
        ":test_microkernels",
    ],
)

# Specialized XNNPACK version for TensorFlow Lite. Excludes operators currently
# not used by the TensorFlow Lite XNNPACK delegate to minimize code size.
xnnpack_cc_library(
    name = "xnnpack_for_tflite",
    srcs = [
        "src/init.c",
    ],
    hdrs = ["include/xnnpack.h"],
    copts = select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    visibility = xnnpack_visibility(),
    deps = [
        ":allocator",
        ":common",
        ":logging",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":microparams_init",
        ":operators",
        ":params",
        ":prod_microkernels",
        ":subgraph",
    ],
)

# Specialized XNNPACK version for TensorFlow.js. Excludes operators currently
# not used by the TensorFlow.js WebAssembly backend to minimize code size.
xnnpack_cc_library(
    name = "xnnpack_for_tfjs",
    srcs = [
        "src/init.c",
    ],
    hdrs = ["include/xnnpack.h"],
    copts = select({
        ":debug_build": [],
        "//conditions:default": xnnpack_min_size_copts(),
    }) + select({
        ":xnn_enable_hmp_explicit_false": ["-DXNN_MAX_UARCH_TYPES=1"],
        "//conditions:default": [],
    }),
    gcc_copts = xnnpack_gcc_std_copts(),
    msvc_copts = xnnpack_msvc_std_copts(),
    visibility = xnnpack_visibility(),
    deps = [
        ":allocator",
        ":common",
        ":logging",
        ":math",
        ":microkernels_h",
        ":microparams",
        ":microparams_init",
        ":operators",
        ":params",
        ":prod_microkernels",
    ],
)

############################# End-to-end benchmarks ############################

# Helper library for benchmarks to depend on.
xnnpack_cc_library(
    name = "models_h",
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":common",
        "@FP16",
    ],
)

xnnpack_cc_library(
    name = "fp16_mobilenet_v1",
    srcs = ["models/fp16-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v1",
    srcs = ["models/fp32-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v1_jit",
    srcs = ["models/fp32-mobilenet-v1-jit.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_sparse_mobilenet_v1",
    srcs = ["models/fp16-sparse-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_sparse_mobilenet_v1",
    srcs = ["models/fp32-sparse-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qs8_qc8w_mobilenet_v1",
    srcs = ["models/qs8-qc8w-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qs8_qc8w_mobilenet_v2",
    srcs = ["models/qs8-qc8w-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qs8_mobilenet_v1",
    srcs = ["models/qs8-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qs8_mobilenet_v2",
    srcs = ["models/qs8-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qu8_mobilenet_v1",
    srcs = ["models/qu8-mobilenet-v1.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qu8_mobilenet_v2",
    srcs = ["models/qu8-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qu8_mobilenet_v3_large",
    srcs = ["models/qu8-mobilenet-v3-large.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "qu8_mobilenet_v3_small",
    srcs = ["models/qu8-mobilenet-v3-small.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_mobilenet_v2",
    srcs = ["models/fp16-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v2",
    srcs = ["models/fp32-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v2_jit",
    srcs = ["models/fp32-mobilenet-v2-jit.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_sparse_mobilenet_v2",
    srcs = ["models/fp16-sparse-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_sparse_mobilenet_v2",
    srcs = ["models/fp32-sparse-mobilenet-v2.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_mobilenet_v3_large",
    srcs = ["models/fp16-mobilenet-v3-large.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v3_large",
    srcs = ["models/fp32-mobilenet-v3-large.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v3_large_jit",
    srcs = ["models/fp32-mobilenet-v3-large-jit.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_sparse_mobilenet_v3_large",
    srcs = ["models/fp16-sparse-mobilenet-v3-large.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_sparse_mobilenet_v3_large",
    srcs = ["models/fp32-sparse-mobilenet-v3-large.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_mobilenet_v3_small",
    srcs = ["models/fp16-mobilenet-v3-small.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@FP16",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v3_small",
    srcs = ["models/fp32-mobilenet-v3-small.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v3_small_fused",
    srcs = ["models/fp32-mobilenet-v3-small-fused.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        ":post_operation",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_mobilenet_v3_small_jit",
    srcs = ["models/fp32-mobilenet-v3-small-jit.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp16_sparse_mobilenet_v3_small",
    srcs = ["models/fp16-sparse-mobilenet-v3-small.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

xnnpack_cc_library(
    name = "fp32_sparse_mobilenet_v3_small",
    srcs = ["models/fp32-sparse-mobilenet-v3-small.cc"],
    hdrs = ["src/xnnpack/models.h"],
    copts = xnnpack_std_cxxopts(),
    deps = [
        ":XNNPACK",
        ":aligned_allocator",
        ":cache",
        "@pthreadpool",
    ],
)

######################### Unit tests for micro-kernels #########################

xnnpack_cc_library(
    name = "gemm_microkernel_tester",
    testonly = True,
    srcs = ["test/gemm-microkernel-tester.cc"],
    hdrs = ["test/gemm-microkernel-tester.h"],
    deps = MICROKERNEL_TEST_DEPS + [
        ":XNNPACK_test_mode",
        ":packing",
        "@com_google_googletest//:gtest_main",
    ],
)

xnnpack_unit_test(
    name = "bf16_gemm_minmax_test",
    srcs = [
        "test/bf16-gemm-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_f32_vcvt_test",
    srcs = [
        "test/f16-f32-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_avgpool_minmax_test",
    srcs = [
        "test/avgpool-microkernel-tester.h",
        "test/f16-avgpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_dwconv_minmax_multipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f16-dwconv-minmax-multipass.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f16_dwconv_minmax_unipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f16-dwconv-minmax-unipass.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f16_gavgpool_cw_test",
    srcs = [
        "test/f16-gavgpool-cw.cc",
        "test/gavgpool-cw-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_gavgpool_minmax_test",
    srcs = [
        "test/f16-gavgpool-minmax.cc",
        "test/gavgpool-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_f32acc_gemm_minmax_test",
    srcs = [
        "test/f16-f32acc-gemm-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_gemm_jit_test",
    srcs = [
        "test/f16-gemm-jit.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_gemm_minmax_test",
    srcs = [
        "test/f16-gemm-minmax.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_ibilinear_test",
    srcs = [
        "test/f16-ibilinear.cc",
        "test/ibilinear-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_ibilinear_chw_test",
    srcs = [
        "test/f16-ibilinear-chw.cc",
        "test/ibilinear-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_igemm_jit_test",
    srcs = [
        "test/f16-igemm-jit.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_f32acc_igemm_minmax_test",
    srcs = [
        "test/f16-f32acc-igemm-minmax.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_igemm_minmax_test",
    srcs = [
        "test/f16-igemm-minmax.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f16_maxpool_minmax_test",
    srcs = [
        "test/f16-maxpool-minmax.cc",
        "test/maxpool-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_pavgpool_minmax_test",
    srcs = [
        "test/avgpool-microkernel-tester.h",
        "test/f16-pavgpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_prelu_test",
    srcs = [
        "test/f16-prelu.cc",
        "test/prelu-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_spmm_minmax_test",
    srcs = [
        "test/f16-spmm-minmax.cc",
        "test/spmm-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vabs_test",
    srcs = [
        "test/f16-vabs.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vadd_minmax_test",
    srcs = [
        "test/f16-vadd-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vaddc_minmax_test",
    srcs = [
        "test/f16-vaddc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vclamp_test",
    srcs = [
        "test/f16-vclamp.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vdiv_minmax_test",
    srcs = [
        "test/f16-vdiv-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vdivc_minmax_test",
    srcs = [
        "test/f16-vdivc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrdivc_minmax_test",
    srcs = [
        "test/f16-vrdivc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_velu_test",
    srcs = [
        "test/f16-velu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vhswish_test",
    srcs = [
        "test/f16-vhswish.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vlrelu_test",
    srcs = [
        "test/f16-vlrelu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmax_test",
    srcs = [
        "test/f16-vmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmaxc_test",
    srcs = [
        "test/f16-vmaxc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmin_test",
    srcs = [
        "test/f16-vmin.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vminc_test",
    srcs = [
        "test/f16-vminc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmul_minmax_test",
    srcs = [
        "test/f16-vmul-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmulc_minmax_test",
    srcs = [
        "test/f16-vmulc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vmulcaddc_minmax_test",
    srcs = [
        "test/f16-vmulcaddc-minmax.cc",
        "test/vmulcaddc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f16_vneg_test",
    srcs = [
        "test/f16-vneg.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrndne_test",
    srcs = [
        "test/f16-vrndne.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrndz_test",
    srcs = [
        "test/f16-vrndz.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrndu_test",
    srcs = [
        "test/f16-vrndu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrndd_test",
    srcs = [
        "test/f16-vrndd.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vsqrt_test",
    srcs = [
        "test/f16-vsqrt.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_raddstoreexpminusmax_test",
    srcs = [
        "test/f16-raddstoreexpminusmax.cc",
        "test/raddstoreexpminusmax-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_rmax_test",
    srcs = [
        "test/f16-rmax.cc",
        "test/rmax-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_rsum_test",
    srcs = [
        "test/f16-rsum.cc",
        "test/rsum-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_f32acc_rsum_test",
    srcs = [
        "test/f16-f32acc-rsum.cc",
        "test/rsum-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vsigmoid_test",
    srcs = [
        "test/f16-vsigmoid.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vsqr_test",
    srcs = [
        "test/f16-vsqr.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vsub_minmax_test",
    srcs = [
        "test/f16-vsub-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vsubc_minmax_test",
    srcs = [
        "test/f16-vsubc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vrsubc_minmax_test",
    srcs = [
        "test/f16-vrsubc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f16_vtanh_test",
    srcs = [
        "test/f16-vtanh.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_argmaxpool_test",
    srcs = [
        "test/argmaxpool-microkernel-tester.h",
        "test/f32-argmaxpool.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_avgpool_minmax_test",
    srcs = [
        "test/avgpool-microkernel-tester.h",
        "test/f32-avgpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_ibilinear_test",
    srcs = [
        "test/f32-ibilinear.cc",
        "test/ibilinear-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_ibilinear_chw_test",
    srcs = [
        "test/f32-ibilinear-chw.cc",
        "test/ibilinear-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_igemm_test",
    srcs = [
        "test/f32-igemm.cc",
        "test/f32-igemm-2.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_igemm_relu_test",
    srcs = [
        "test/f32-igemm-relu.cc",
        "test/f32-igemm-relu-2.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_igemm_minmax_test",
    srcs = [
        "test/f32-igemm-minmax.cc",
        "test/f32-igemm-minmax-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_igemm_jit_test",
    srcs = [
        "test/f32-igemm-jit.cc",
    ],
    shard_count = 10,
    tags = ["not_run:arm"],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "f32_conv_hwc_test",
    srcs = [
        "test/conv-hwc-microkernel-tester.h",
        "test/f32-conv-hwc.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f16_conv_hwc2chw_test",
    srcs = [
        "test/conv-hwc2chw-microkernel-tester.h",
        "test/f16-conv-hwc2chw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f32_conv_hwc2chw_test",
    srcs = [
        "test/conv-hwc2chw-microkernel-tester.h",
        "test/f32-conv-hwc2chw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f32_dwconv_unipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f32-dwconv-unipass.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f32_dwconv_multipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f32-dwconv-multipass.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f32_dwconv_minmax_multipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f32-dwconv-minmax-multipass.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f32_dwconv_minmax_unipass_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/f32-dwconv-minmax-unipass.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f16_dwconv2d_chw_test",
    srcs = [
        "test/dwconv2d-microkernel-tester.h",
        "test/f16-dwconv2d-chw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f32_dwconv2d_chw_test",
    srcs = [
        "test/dwconv2d-microkernel-tester.h",
        "test/f32-dwconv2d-chw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f32_f16_vcvt_test",
    srcs = [
        "test/f32-f16-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_gavgpool_minmax_test",
    srcs = [
        "test/f32-gavgpool-minmax.cc",
        "test/gavgpool-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_gavgpool_cw_test",
    srcs = [
        "test/f32-gavgpool-cw.cc",
        "test/gavgpool-cw-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_gemm_test",
    srcs = [
        "test/f32-gemm.cc",
        "test/f32-gemm-2.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_gemm_relu_test",
    srcs = [
        "test/f32-gemm-relu.cc",
        "test/f32-gemm-relu-2.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_gemm_minmax_test",
    srcs = [
        "test/f32-gemm-minmax.cc",
        "test/f32-gemm-minmax-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "f32_gemm_goi_minmax_test",
    srcs = [
        "test/f32-gemm-goi-minmax.cc",
        "test/gemm-goi-microkernel-tester.h",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "f32_qc8w_gemm_test",
    srcs = [
        "test/f32-qc8w-gemm.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_qc8w_gemm_relu_test",
    srcs = [
        "test/f32-qc8w-gemm-relu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_qc4w_gemm_minmax_test",
    srcs = [
        "test/f32-qc4w-gemm-minmax.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_qc8w_gemm_minmax_test",
    srcs = [
        "test/f32-qc8w-gemm-minmax.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_gemm_jit_test",
    srcs = [
        "test/f32-gemm-jit.cc",
    ],
    shard_count = 10,
    tags = ["not_run:arm"],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "f32_gemminc_minmax_test",
    srcs = [
        "test/f32-gemminc-minmax.cc",
        "test/f32-gemminc-minmax-2.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_vhswish_test",
    srcs = [
        "test/f32-vhswish.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_maxpool_minmax_test",
    srcs = [
        "test/f32-maxpool-minmax.cc",
        "test/maxpool-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_pavgpool_minmax_test",
    srcs = [
        "test/avgpool-microkernel-tester.h",
        "test/f32-pavgpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_ppmm_minmax_test",
    srcs = [
        "test/f32-ppmm-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "f32_prelu_test",
    srcs = [
        "test/f32-prelu.cc",
        "test/prelu-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_qs8_vcvt_test",
    srcs = [
        "test/f32-qs8-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_qu8_vcvt_test",
    srcs = [
        "test/f32-qu8-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_raddexpminusmax_test",
    srcs = [
        "test/f32-raddexpminusmax.cc",
        "test/raddexpminusmax-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_raddextexp_test",
    srcs = [
        "test/f32-raddextexp.cc",
        "test/raddextexp-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_raddstoreexpminusmax_test",
    srcs = [
        "test/f32-raddstoreexpminusmax.cc",
        "test/raddstoreexpminusmax-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_rmax_test",
    srcs = [
        "test/f32-rmax.cc",
        "test/reduce-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_rminmax_test",
    srcs = [
        "test/f32-rminmax.cc",
        "test/reduce-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_rmin_test",
    srcs = [
        "test/f32-rmin.cc",
        "test/reduce-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_rsum_test",
    srcs = [
        "test/f32-rsum.cc",
        "test/rsum-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_spmm_minmax_test",
    srcs = [
        "test/f32-spmm-minmax.cc",
        "test/spmm-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vabs_test",
    srcs = [
        "test/f32-vabs.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vadd_test",
    srcs = [
        "test/f32-vadd.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vadd_minmax_test",
    srcs = [
        "test/f32-vadd-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vadd_relu_test",
    srcs = [
        "test/f32-vadd-relu.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vaddc_test",
    srcs = [
        "test/f32-vaddc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vaddc_minmax_test",
    srcs = [
        "test/f32-vaddc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vaddc_relu_test",
    srcs = [
        "test/f32-vaddc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vclamp_test",
    srcs = [
        "test/f32-vclamp.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vcmul_test",
    srcs = [
        "test/f32-vcmul.cc",
        "test/vcmul-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdiv_test",
    srcs = [
        "test/f32-vdiv.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdiv_minmax_test",
    srcs = [
        "test/f32-vdiv-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdiv_relu_test",
    srcs = [
        "test/f32-vdiv-relu.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdivc_test",
    srcs = [
        "test/f32-vdivc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdivc_minmax_test",
    srcs = [
        "test/f32-vdivc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vdivc_relu_test",
    srcs = [
        "test/f32-vdivc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrdivc_test",
    srcs = [
        "test/f32-vrdivc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrdivc_minmax_test",
    srcs = [
        "test/f32-vrdivc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrdivc_relu_test",
    srcs = [
        "test/f32-vrdivc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_velu_test",
    srcs = [
        "test/f32-velu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmax_test",
    srcs = [
        "test/f32-vmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmaxc_test",
    srcs = [
        "test/f32-vmaxc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmin_test",
    srcs = [
        "test/f32-vmin.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vminc_test",
    srcs = [
        "test/f32-vminc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmul_test",
    srcs = [
        "test/f32-vmul.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmul_minmax_test",
    srcs = [
        "test/f32-vmul-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmul_relu_test",
    srcs = [
        "test/f32-vmul-relu.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmulc_test",
    srcs = [
        "test/f32-vmulc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmulc_minmax_test",
    srcs = [
        "test/f32-vmulc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmulc_relu_test",
    srcs = [
        "test/f32-vmulc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vmulcaddc_minmax_test",
    srcs = [
        "test/f32-vmulcaddc-minmax.cc",
        "test/vmulcaddc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":packing"],
)

xnnpack_unit_test(
    name = "f32_vlrelu_test",
    srcs = [
        "test/f32-vlrelu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vneg_test",
    srcs = [
        "test/f32-vneg.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrelu_test",
    srcs = [
        "test/f32-vrelu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":jit_test_mode"],
)

xnnpack_unit_test(
    name = "f32_vrndne_test",
    srcs = [
        "test/f32-vrndne.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrndz_test",
    srcs = [
        "test/f32-vrndz.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrndu_test",
    srcs = [
        "test/f32-vrndu.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrndd_test",
    srcs = [
        "test/f32-vrndd.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vscaleexpminusmax_test",
    srcs = [
        "test/f32-vscaleexpminusmax.cc",
        "test/vscaleexpminusmax-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vscaleextexp_test",
    srcs = [
        "test/f32-vscaleextexp.cc",
        "test/vscaleextexp-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsigmoid_test",
    srcs = [
        "test/f32-vsigmoid.cc",
        "test/vunary-microkernel-tester.h",
    ],
    shard_count = 3,
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsqr_test",
    srcs = [
        "test/f32-vsqr.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsqrdiff_test",
    srcs = [
        "test/f32-vsqrdiff.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsqrdiffc_test",
    srcs = [
        "test/f32-vsqrdiffc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsqrt_test",
    srcs = [
        "test/f32-vsqrt.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsub_test",
    srcs = [
        "test/f32-vsub.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsub_minmax_test",
    srcs = [
        "test/f32-vsub-minmax.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsub_relu_test",
    srcs = [
        "test/f32-vsub-relu.cc",
        "test/vbinary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsubc_test",
    srcs = [
        "test/f32-vsubc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsubc_minmax_test",
    srcs = [
        "test/f32-vsubc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vsubc_relu_test",
    srcs = [
        "test/f32-vsubc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrsubc_test",
    srcs = [
        "test/f32-vrsubc.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrsubc_minmax_test",
    srcs = [
        "test/f32-vrsubc-minmax.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vrsubc_relu_test",
    srcs = [
        "test/f32-vrsubc-relu.cc",
        "test/vbinaryc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "f32_vtanh_test",
    srcs = [
        "test/f32-vtanh.cc",
        "test/vunary-microkernel-tester.h",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qd8_f32_qc8w_gemm_minmax_test",
    timeout = "moderate",
    srcs = [
        "test/qd8-f32-qc8w-gemm-minmax.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qd8_f32_qc4w_gemm_minmax_test",
    timeout = "moderate",
    srcs = [
        "test/qd8-f32-qc4w-gemm-minmax.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_dwconv_minmax_multipass_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-qc8w-dwconv-minmax-multipass-fp32.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_dwconv_minmax_unipass_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-qc8w-dwconv-minmax-unipass-fp32.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_gemm_jit_fp32_test",
    srcs = [
        "test/qs8-qc8w-gemm-jit-fp32.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_gemm_minmax_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-qc8w-gemm-minmax-fp32.cc",
        "test/qs8-qc8w-gemm-minmax-fp32-2.cc",
        "test/qs8-qc8w-gemm-minmax-fp32-3.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_igemm_jit_fp32_test",
    srcs = [
        "test/qs8-qc8w-igemm-jit-fp32.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "qs8_qc8w_igemm_minmax_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-qc8w-igemm-minmax-fp32.cc",
        "test/qs8-qc8w-igemm-minmax-fp32-2.cc",
        "test/qs8-qc8w-igemm-minmax-fp32-3.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_dwconv_minmax_multipass_fp32_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-dwconv-minmax-multipass-fp32.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_dwconv_minmax_multipass_rndnu_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-dwconv-minmax-multipass-rndnu.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_dwconv_minmax_unipass_fp32_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-dwconv-minmax-unipass-fp32.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_dwconv_minmax_unipass_rndnu_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qs8-dwconv-minmax-unipass-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qs8_f32_vcvt_test",
    srcs = [
        "test/qs8-f32-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_gavgpool_minmax_fp32_test",
    srcs = [
        "test/gavgpool-microkernel-tester.h",
        "test/qs8-gavgpool-minmax-fp32.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_gavgpool_minmax_rndnu_test",
    srcs = [
        "test/gavgpool-microkernel-tester.h",
        "test/qs8-gavgpool-minmax-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_gemm_minmax_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-gemm-minmax-fp32.cc",
        "test/qs8-gemm-minmax-fp32-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_gemm_jit_rndnu_test",
    srcs = [
        "test/qs8-gemm-jit-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "qs8_gemm_minmax_rndnu_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-gemm-minmax-rndnu.cc",
        "test/qs8-gemm-minmax-rndnu-2.cc",
        "test/qs8-gemm-minmax-rndnu-3.cc",
        "test/qs8-gemm-minmax-rndnu-4.cc",
        "test/qs8-gemm-minmax-rndnu-5.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_igemm_minmax_fp32_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-igemm-minmax-fp32.cc",
        "test/qs8-igemm-minmax-fp32-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_igemm_jit_rndnu_test",
    srcs = [
        "test/qs8-igemm-jit-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
        ":jit_test_mode",
    ],
)

xnnpack_unit_test(
    name = "qs8_igemm_minmax_rndnu_test",
    timeout = "moderate",
    srcs = [
        "test/qs8-igemm-minmax-rndnu.cc",
        "test/qs8-igemm-minmax-rndnu-2.cc",
        "test/qs8-igemm-minmax-rndnu-3.cc",
        "test/qs8-igemm-minmax-rndnu-4.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qs8_requantization_test",
    srcs = [
        "test/qs8-requantization.cc",
        "test/requantization-tester.h",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [":requantization_stubs"],
)

xnnpack_unit_test(
    name = "qs8_vadd_minmax_test",
    srcs = [
        "test/qs8-vadd-minmax.cc",
        "test/vadd-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vaddc_minmax_test",
    srcs = [
        "test/qs8-vaddc-minmax.cc",
        "test/vaddc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vcvt_test",
    srcs = [
        "test/qs8-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs16_qs8_vcvt_test",
    srcs = [
        "test/qs16-qs8-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vhswish_test",
    srcs = [
        "test/qs8-vhswish.cc",
        "test/vhswish-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vlrelu_test",
    srcs = [
        "test/qs8-vlrelu.cc",
        "test/vlrelu-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vmul_minmax_fp32_test",
    srcs = [
        "test/qs8-vmul-minmax-fp32.cc",
        "test/vmul-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vmul_minmax_rndnu_test",
    srcs = [
        "test/qs8-vmul-minmax-rndnu.cc",
        "test/vmul-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vmulc_minmax_fp32_test",
    srcs = [
        "test/qs8-vmulc-minmax-fp32.cc",
        "test/vmulc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qs8_vmulc_minmax_rndnu_test",
    srcs = [
        "test/qs8-vmulc-minmax-rndnu.cc",
        "test/vmulc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_avgpool_minmax_fp32_test",
    srcs = [
        "test/avgpool-microkernel-tester.h",
        "test/qu8-avgpool-minmax-fp32.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_dwconv_minmax_multipass_fp32_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qu8-dwconv-minmax-multipass-fp32.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qu8_dwconv_minmax_multipass_rndnu_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qu8-dwconv-minmax-multipass-rndnu.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qu8_dwconv_minmax_unipass_fp32_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qu8-dwconv-minmax-unipass-fp32.cc",
    ],
    shard_count = 5,
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qu8_dwconv_minmax_unipass_rndnu_test",
    srcs = [
        "test/dwconv-microkernel-tester.h",
        "test/qu8-dwconv-minmax-unipass-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "qu8_f32_vcvt_test",
    srcs = [
        "test/qu8-f32-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_gavgpool_minmax_fp32_test",
    srcs = [
        "test/gavgpool-microkernel-tester.h",
        "test/qu8-gavgpool-minmax-fp32.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_gavgpool_minmax_rndnu_test",
    srcs = [
        "test/gavgpool-microkernel-tester.h",
        "test/qu8-gavgpool-minmax-rndnu.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_gemm_minmax_fp32_test",
    srcs = [
        "test/qu8-gemm-minmax-fp32.cc",
        "test/qu8-gemm-minmax-fp32-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qu8_gemm_minmax_rndnu_test",
    srcs = [
        "test/qu8-gemm-minmax-rndnu.cc",
        "test/qu8-gemm-minmax-rndnu-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qu8_igemm_minmax_fp32_test",
    srcs = [
        "test/qu8-igemm-minmax-fp32.cc",
        "test/qu8-igemm-minmax-fp32-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qu8_igemm_minmax_rndnu_test",
    srcs = [
        "test/qu8-igemm-minmax-rndnu.cc",
        "test/qu8-igemm-minmax-rndnu-2.cc",
    ],
    shard_count = 10,
    deps = MICROKERNEL_TEST_DEPS + [
        ":gemm_microkernel_tester",
    ],
)

xnnpack_unit_test(
    name = "qu8_requantization_test",
    srcs = [
        "test/qu8-requantization.cc",
        "test/requantization-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS + [":requantization_stubs"],
)

xnnpack_unit_test(
    name = "qu8_vadd_minmax_test",
    srcs = [
        "test/qu8-vadd-minmax.cc",
        "test/vadd-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vaddc_minmax_test",
    srcs = [
        "test/qu8-vaddc-minmax.cc",
        "test/vaddc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vcvt_test",
    srcs = [
        "test/qu8-vcvt.cc",
        "test/vcvt-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vhswish_test",
    srcs = [
        "test/qu8-vhswish.cc",
        "test/vhswish-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vlrelu_test",
    srcs = [
        "test/qu8-vlrelu.cc",
        "test/vlrelu-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vmul_minmax_fp32_test",
    srcs = [
        "test/qu8-vmul-minmax-fp32.cc",
        "test/vmul-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vmul_minmax_rndnu_test",
    srcs = [
        "test/qu8-vmul-minmax-rndnu.cc",
        "test/vmul-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vmulc_minmax_fp32_test",
    srcs = [
        "test/qu8-vmulc-minmax-fp32.cc",
        "test/vmulc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "qu8_vmulc_minmax_rndnu_test",
    srcs = [
        "test/qu8-vmulc-minmax-rndnu.cc",
        "test/vmulc-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "s16_rmaxabs_test",
    srcs = [
        "test/rmaxabs-microkernel-tester.h",
        "test/s16-rmaxabs.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "s16_window_test",
    srcs = [
        "test/s16-window.cc",
        "test/window-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u32_filterbank_accumulate_test",
    srcs = [
        "test/filterbank-accumulate-microkernel-tester.h",
        "test/u32-filterbank-accumulate.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u32_filterbank_subtract_test",
    srcs = [
        "test/filterbank-subtract-microkernel-tester.h",
        "test/u32-filterbank-subtract.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u32_vlog_test",
    srcs = [
        "test/u32-vlog.cc",
        "test/vlog-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "i16_vlshift_test",
    srcs = [
        "test/i16-vlshift.cc",
        "test/vlshift-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "cs16_vsquareabs_test",
    srcs = [
        "test/cs16-vsquareabs.cc",
        "test/vsquareabs-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "cs16_bfly4_test",
    srcs = [
        "test/bfly4-microkernel-tester.h",
        "test/cs16-bfly4.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "cs16_fftr_test",
    srcs = [
        "test/cs16-fftr.cc",
        "test/fftr-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "s8_ibilinear_test",
    srcs = [
        "test/ibilinear-microkernel-tester.h",
        "test/s8-ibilinear.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "s8_maxpool_minmax_test",
    srcs = [
        "test/maxpool-microkernel-tester.h",
        "test/s8-maxpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "s8_vclamp_test",
    srcs = [
        "test/s8-vclamp.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u8_ibilinear_test",
    srcs = [
        "test/ibilinear-microkernel-tester.h",
        "test/u8-ibilinear.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u8_lut32norm_test",
    srcs = [
        "test/lut-norm-microkernel-tester.h",
        "test/u8-lut32norm.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u8_maxpool_minmax_test",
    srcs = [
        "test/maxpool-microkernel-tester.h",
        "test/u8-maxpool-minmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u8_rmax_test",
    srcs = [
        "test/rmax-microkernel-tester.h",
        "test/u8-rmax.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u8_vclamp_test",
    srcs = [
        "test/u8-vclamp.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "u64_u32_vsqrtshift_test",
    srcs = [
        "test/u64-u32-vsqrtshift.cc",
        "test/vunary-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x8_lut_test",
    srcs = [
        "test/lut-microkernel-tester.h",
        "test/x8-lut.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x8_zip_test",
    srcs = [
        "test/x8-zip.cc",
        "test/zip-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x32_packb_test",
    srcs = [
        "test/packb-microkernel-tester.h",
        "test/x32-packb.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "x8_packw_test",
    srcs = [
        "test/packw-microkernel-tester.h",
        "test/x8-packw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "x16_packw_test",
    srcs = [
        "test/packw-microkernel-tester.h",
        "test/x16-packw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "x32_packw_test",
    srcs = [
        "test/packw-microkernel-tester.h",
        "test/x32-packw.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "x32_packx_test",
    srcs = [
        "test/pack-microkernel-tester.h",
        "test/x32-packx.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x8_transpose_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/x8-transpose.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x16_transpose_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/x16-transpose.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x24_transpose_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/x24-transpose.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x32_transpose_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/x32-transpose.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x64_transpose_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/x64-transpose.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "xx_transposev_test",
    srcs = [
        "test/transpose-microkernel-tester.h",
        "test/xx-transposev.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x32_unpool_test",
    srcs = [
        "test/unpool-microkernel-tester.h",
        "test/x32-unpool.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "x32_zerob_test",
    srcs = [
        "test/packb-microkernel-tester.h",
        "test/x32-zerob.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":packing",
    ],
)

xnnpack_unit_test(
    name = "x32_zip_test",
    srcs = [
        "test/x32-zip.cc",
        "test/zip-microkernel-tester.h",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "xx_fill_test",
    srcs = [
        "test/fill-microkernel-tester.h",
        "test/xx-fill.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

xnnpack_unit_test(
    name = "xx_pad_test",
    srcs = [
        "test/pad-microkernel-tester.h",
        "test/xx-pad.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS,
)

########################## Size tests for the library #########################

xnnpack_binary(
    name = "operator_size_test",
    srcs = ["test/operator-size.c"],
    deps = [":xnnpack_for_tfjs"],
)

xnnpack_binary(
    name = "subgraph_size_test",
    srcs = ["test/subgraph-size.c"],
    deps = [
        ":XNNPACK",
    ],
)

########################### Unit tests for operators ##########################

xnnpack_unit_test(
    name = "abs_nc_test",
    srcs = [
        "test/abs-nc.cc",
        "test/abs-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "abs_nc_eager_test",
    srcs = [
        "test/abs-nc-eager.cc",
        "test/abs-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "add_nd_test",
    timeout = "moderate",
    srcs = [
        "test/add-nd.cc",
        "test/binary-elementwise-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "add_nd_eager_test",
    timeout = "moderate",
    srcs = [
        "test/add-nd-eager.cc",
        "test/binary-elementwise-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "argmax_pooling_nhwc_test",
    srcs = [
        "test/argmax-pooling-nhwc.cc",
        "test/argmax-pooling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "average_pooling_nhwc_test",
    srcs = [
        "test/average-pooling-nhwc.cc",
        "test/average-pooling-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "bankers_rounding_nc_test",
    srcs = [
        "test/bankers-rounding-nc.cc",
        "test/bankers-rounding-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "bankers_rounding_nc_eager_test",
    srcs = [
        "test/bankers-rounding-nc-eager.cc",
        "test/bankers-rounding-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "batch_matrix_multiply_nc_test",
    srcs = [
        "test/batch-matrix-multiply-nc.cc",
        "test/batch-matrix-multiply-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [":aligned_allocator"],
)

xnnpack_unit_test(
    name = "ceiling_nc_test",
    srcs = [
        "test/ceiling-nc.cc",
        "test/ceiling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "ceiling_nc_eager_test",
    srcs = [
        "test/ceiling-nc-eager.cc",
        "test/ceiling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "channel_shuffle_nc_test",
    srcs = [
        "test/channel-shuffle-nc.cc",
        "test/channel-shuffle-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "clamp_nc_test",
    srcs = [
        "test/clamp-nc.cc",
        "test/clamp-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "clamp_nc_eager_test",
    srcs = [
        "test/clamp-nc-eager.cc",
        "test/clamp-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "constant_pad_nd_test",
    srcs = [
        "test/constant-pad-nd.cc",
        "test/constant-pad-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "constant_pad_nd_eager_test",
    srcs = [
        "test/constant-pad-nd-eager.cc",
        "test/constant-pad-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "convert_nc_test",
    srcs = [
        "test/convert-nc.cc",
        "test/convert-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "convert_nc_eager_test",
    srcs = [
        "test/convert-nc-eager.cc",
        "test/convert-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [":math"],
)

xnnpack_unit_test(
    name = "convolution_nhwc_test",
    timeout = "moderate",
    srcs = [
        "test/convolution-nhwc.cc",
        "test/convolution-operator-tester.h",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
        ":convolution_test_helpers",
    ],
)

xnnpack_unit_test(
    name = "convolution_nchw_test",
    timeout = "moderate",
    srcs = [
        "test/convolution-nchw.cc",
        "test/convolution-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
        ":convolution_test_helpers",
    ],
)

xnnpack_unit_test(
    name = "copy_nc_test",
    srcs = [
        "test/copy-nc.cc",
        "test/copy-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "copy_nc_eager_test",
    srcs = [
        "test/copy-nc-eager.cc",
        "test/copy-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "deconvolution_nhwc_test",
    timeout = "moderate",
    srcs = [
        "test/deconvolution-nhwc.cc",
        "test/deconvolution-operator-tester.h",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
        ":convolution_test_helpers",
    ],
)

xnnpack_unit_test(
    name = "depth_to_space_nchw2nhwc_test",
    srcs = [
        "test/depth-to-space-nchw2nhwc.cc",
        "test/depth-to-space-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "depth_to_space_nhwc_test",
    srcs = [
        "test/depth-to-space-nhwc.cc",
        "test/depth-to-space-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "divide_nd_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/divide-nd.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "divide_nd_eager_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/divide-nd-eager.cc",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "dynamic_fully_connected_nc_test",
    srcs = [
        "test/dynamic-fully-connected-nc.cc",
        "test/dynamic-fully-connected-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [":aligned_allocator"],
)

xnnpack_unit_test(
    name = "elu_nc_test",
    srcs = [
        "test/elu-nc.cc",
        "test/elu-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "elu_nc_eager_test",
    srcs = [
        "test/elu-nc-eager.cc",
        "test/elu-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "fully_connected_nc_test",
    srcs = [
        "test/fully-connected-nc.cc",
        "test/fully-connected-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "floor_nc_test",
    srcs = [
        "test/floor-nc.cc",
        "test/floor-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "floor_nc_eager_test",
    srcs = [
        "test/floor-nc-eager.cc",
        "test/floor-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "global_average_pooling_nwc_test",
    srcs = [
        "test/global-average-pooling-nwc.cc",
        "test/global-average-pooling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [":aligned_allocator"],
)

xnnpack_unit_test(
    name = "global_average_pooling_ncw_test",
    srcs = [
        "test/global-average-pooling-ncw.cc",
        "test/global-average-pooling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [":aligned_allocator"],
)

xnnpack_unit_test(
    name = "global_sum_pooling_nwc_test",
    srcs = [
        "test/global-sum-pooling-nwc.cc",
        "test/global-sum-pooling-operator-tester.h",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS + [":aligned_allocator"],
)

xnnpack_unit_test(
    name = "hardswish_nc_test",
    srcs = [
        "test/hardswish-nc.cc",
        "test/hardswish-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "hardswish_nc_eager_test",
    srcs = [
        "test/hardswish-nc-eager.cc",
        "test/hardswish-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "leaky_relu_nc_test",
    srcs = [
        "test/leaky-relu-nc.cc",
        "test/leaky-relu-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "leaky_relu_nc_eager_test",
    srcs = [
        "test/leaky-relu-nc-eager.cc",
        "test/leaky-relu-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "max_pooling_nhwc_test",
    timeout = "moderate",
    srcs = [
        "test/max-pooling-nhwc.cc",
        "test/max-pooling-operator-tester.h",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "maximum_nd_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/maximum-nd.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "maximum_nd_eager_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/maximum-nd-eager.cc",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "mean_nd_test",
    timeout = "moderate",
    srcs = [
        "test/mean-nd.cc",
        "test/mean-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "minimum_nd_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/minimum-nd.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "minimum_nd_eager_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/minimum-nd-eager.cc",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "multiply_nd_test",
    timeout = "moderate",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/multiply-nd.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "multiply_nd_eager_test",
    timeout = "moderate",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/multiply-nd-eager.cc",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "negate_nc_test",
    srcs = [
        "test/negate-nc.cc",
        "test/negate-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "negate_nc_eager_test",
    srcs = [
        "test/negate-nc-eager.cc",
        "test/negate-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "slice_normalization_test",
    srcs = [
        "test/slice-normalization.cc",
        "test/slice-normalization-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "reduce_normalization_test",
    srcs = [
        "test/reduce-normalization.cc",
        "test/reduce-normalization-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "transpose_normalization_test",
    srcs = [
        "test/transpose-normalization.cc",
        "test/transpose-normalization-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "prelu_nc_test",
    srcs = [
        "test/prelu-nc.cc",
        "test/prelu-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "resize_bilinear_nhwc_test",
    srcs = [
        "test/resize-bilinear-nhwc.cc",
        "test/resize-bilinear-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "resize_bilinear_nchw_test",
    srcs = [
        "test/resize-bilinear-nchw.cc",
        "test/resize-bilinear-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "rope_nthc_test",
    srcs = [
        "test/rope-nthc.cc",
        "test/rope-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "scaled_dot_product_attention_nhtc_test",
    timeout = "moderate",
    srcs = [
        "test/scaled-dot-product-attention-nhtc.cc",
        "test/scaled-dot-product-attention-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS + [
        ":aligned_allocator",
    ],
)

xnnpack_unit_test(
    name = "sigmoid_nc_test",
    srcs = [
        "test/sigmoid-nc.cc",
        "test/sigmoid-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "sigmoid_nc_eager_test",
    srcs = [
        "test/sigmoid-nc-eager.cc",
        "test/sigmoid-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "slice_nd_test",
    timeout = "moderate",
    srcs = [
        "test/slice-nd.cc",
        "test/slice-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "slice_nd_eager_test",
    timeout = "moderate",
    srcs = [
        "test/slice-nd-eager.cc",
        "test/slice-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "softmax_nc_test",
    srcs = [
        "test/softmax-nc.cc",
        "test/softmax-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "space_to_depth_nhwc_test",
    srcs = [
        "test/space-to-depth-nhwc.cc",
        "test/space-to-depth-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "square_nc_test",
    srcs = [
        "test/square-nc.cc",
        "test/square-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "square_nc_eager_test",
    srcs = [
        "test/square-nc-eager.cc",
        "test/square-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "square_root_nc_test",
    srcs = [
        "test/square-root-nc.cc",
        "test/square-root-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "square_root_nc_eager_test",
    srcs = [
        "test/square-root-nc-eager.cc",
        "test/square-root-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "squared_difference_nd_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/squared-difference-nd.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "squared_difference_nd_eager_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/squared-difference-nd-eager.cc",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "subtract_nd_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/subtract-nd.cc",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "subtract_nd_eager_test",
    srcs = [
        "test/binary-elementwise-operator-tester.h",
        "test/subtract-nd-eager.cc",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "tanh_nc_test",
    srcs = [
        "test/tanh-nc.cc",
        "test/tanh-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "tanh_nc_eager_test",
    srcs = [
        "test/tanh-nc-eager.cc",
        "test/tanh-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "transpose_nd_test",
    srcs = [
        "test/transpose-nd.cc",
        "test/transpose-operator-tester.h",
    ],
    shard_count = 10,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "transpose_nd_eager_test",
    srcs = [
        "test/transpose-nd-eager.cc",
        "test/transpose-operator-tester.h",
    ],
    shard_count = 5,
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "truncation_nc_test",
    srcs = [
        "test/truncation-nc.cc",
        "test/truncation-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "truncation_nc_eager_test",
    srcs = [
        "test/truncation-nc-eager.cc",
        "test/truncation-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

xnnpack_unit_test(
    name = "unpooling_nhwc_test",
    srcs = [
        "test/unpooling-nhwc.cc",
        "test/unpooling-operator-tester.h",
    ],
    deps = OPERATOR_TEST_DEPS,
)

########################### Unit tests for subgraph ###########################

xnnpack_cc_library(
    name = "convolution_test_helpers",
    testonly = True,
    srcs = [
        "test/convolution-test-helpers.cc",
    ],
    hdrs = [
        "test/convolution-test-helpers.h",
    ],
)

xnnpack_cc_library(
    name = "subgraph_unary_tester",
    testonly = True,
    hdrs = [
        "test/subgraph-unary-tester.h",
    ],
    deps = [
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
        ":xnnpack_h",
        "@com_google_googletest//:gtest_main",
    ],
)

xnnpack_cc_library(
    name = "subgraph_binary_tester",
    testonly = True,
    hdrs = [
        "test/subgraph-binary-tester.h",
    ],
    deps = [
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
        ":xnnpack_h",
        "@com_google_googletest//:gtest_main",
    ],
)

xnnpack_unit_test(
    name = "workspace_test",
    srcs = [
        "test/workspace.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":math",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "abs_test",
    srcs = [
        "test/abs.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "add2_test",
    srcs = [
        "test/add2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "argmax_pooling_2d_test",
    srcs = [
        "test/argmax-pooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "average_pooling_2d_test",
    srcs = [
        "test/average-pooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":node_type",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "bankers_rounding_test",
    srcs = [
        "test/bankers-rounding.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "batch_matrix_multiply_test",
    srcs = [
        "test/batch-matrix-multiply.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "ceiling_test",
    srcs = [
        "test/ceiling.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "clamp_test",
    srcs = [
        "test/clamp.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "concatenate2_test",
    srcs = [
        "test/concatenate2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "concatenate3_test",
    srcs = [
        "test/concatenate3.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "concatenate4_test",
    srcs = [
        "test/concatenate4.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "convert_test",
    srcs = [
        "test/convert.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "convolution_2d_test",
    srcs = [
        "test/convolution-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":convolution_test_helpers",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "copy_test",
    srcs = [
        "test/copy.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "deconvolution_2d_test",
    timeout = "moderate",
    srcs = [
        "test/deconvolution-2d.cc",
    ],
    shard_count = 5,
    deps = [
        ":XNNPACK_test_mode",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "depth_to_space_2d_test",
    srcs = [
        "test/depth-to-space-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "depthwise_convolution_2d_test",
    srcs = [
        "test/depthwise-convolution-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":convolution_test_helpers",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "divide2_test",
    srcs = [
        "test/divide2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "elu_test",
    srcs = [
        "test/elu.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "even_split2_test",
    srcs = [
        "test/even-split2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "even_split3_test",
    srcs = [
        "test/even-split3.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "even_split4_test",
    srcs = [
        "test/even-split4.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "floor_test",
    srcs = [
        "test/floor.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "fully_connected_test",
    srcs = [
        "test/fully-connected.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "global_average_pooling_1d_test",
    srcs = [
        "test/global-average-pooling-1d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "global_average_pooling_2d_test",
    srcs = [
        "test/global-average-pooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "global_sum_pooling_1d_test",
    srcs = [
        "test/global-sum-pooling-1d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "global_sum_pooling_2d_test",
    srcs = [
        "test/global-sum-pooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "hardswish_test",
    srcs = [
        "test/hardswish.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "leaky_relu_test",
    srcs = [
        "test/leaky-relu.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "max_pooling_2d_test",
    srcs = [
        "test/max-pooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "maximum2_test",
    srcs = [
        "test/maximum2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "minimum2_test",
    srcs = [
        "test/minimum2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "multiply2_test",
    srcs = [
        "test/multiply2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "negate_test",
    srcs = [
        "test/negate.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "prelu_test",
    srcs = [
        "test/prelu.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "rope_test",
    srcs = [
        "test/rope.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "scaled_dot_product_attention_test",
    srcs = [
        "test/scaled-dot-product-attention.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "sigmoid_test",
    srcs = [
        "test/sigmoid.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "softmax_test",
    srcs = [
        "test/softmax.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "space_to_depth_2d_test",
    srcs = [
        "test/space-to-depth-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "square_test",
    srcs = [
        "test/square.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "square_root_test",
    srcs = [
        "test/square-root.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "squared_difference_test",
    srcs = [
        "test/squared-difference.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "static_constant_pad_test",
    srcs = [
        "test/static-constant-pad.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
        "@FP16",
    ],
)

xnnpack_unit_test(
    name = "static_mean_test",
    srcs = [
        "test/static-mean.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":aligned_allocator",
        ":common",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "static_reshape_test",
    srcs = [
        "test/static-reshape.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "static_resize_bilinear_2d_test",
    srcs = [
        "test/static-resize-bilinear-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "static_slice_test",
    srcs = [
        "test/static-slice.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "static_transpose_test",
    srcs = [
        "test/static-transpose.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "subtract2_test",
    srcs = [
        "test/subtract2.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_binary_tester",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "tanh_test",
    srcs = [
        "test/tanh.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operators_test_mode",
        ":subgraph_test_mode",
        ":subgraph_unary_tester",
    ],
)

xnnpack_unit_test(
    name = "unpooling_2d_test",
    srcs = [
        "test/unpooling-2d.cc",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":node_type",
        ":operator_utils",
        ":operators_test_mode",
        ":requantization",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "fusion_test",
    srcs = [
        "test/fusion.cc",
        "test/runtime-tester.h",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK_test_mode",
        ":subgraph_test_mode",
    ],
)

############################### Misc unit tests ###############################

xnnpack_unit_test(
    name = "subgraph_test",
    srcs = [
        "test/runtime-tester.h",
        "test/subgraph.cc",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "subgraph_shape_inference_test",
    srcs = [
        "test/runtime-tester.h",
        "test/subgraph-shape-inference.cc",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "memory_planner_test",
    srcs = [
        "test/memory-planner-test.cc",
        "test/runtime-tester.h",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK",
        ":common",
        ":math",
        ":node_type",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "subgraph_nchw_test",
    srcs = [
        "test/subgraph-nchw.cc",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK",
        ":subgraph_test_mode",
    ],
)

xnnpack_unit_test(
    name = "subgraph_fp16_test",
    srcs = [
        "test/mock-allocator.h",
        "test/runtime-tester.h",
        "test/subgraph-fp16.cc",
        "test/subgraph-tester.h",
    ],
    deps = [
        ":XNNPACK",
        ":allocator",
        ":node_type",
        ":subgraph_test_mode",
        "@FP16",
    ],
)

xnnpack_unit_test(
    name = "jit_test",
    srcs = [
        "test/jit.cc",
    ],
    deps = [
        ":common",
        ":jit_test_mode",
        ":memory",
    ],
)

xnnpack_unit_test(
    name = "aarch32_assembler_test",
    srcs = [
        "test/aarch32-assembler.cc",
        "test/assembler-helpers.h",
    ],
    deps = [
        ":common",
        ":jit_test_mode",
        ":memory",
        ":microparams",
        ":microparams_init",
    ],
)

xnnpack_unit_test(
    name = "aarch64_assembler_test",
    srcs = [
        "test/aarch64-assembler.cc",
        "test/assembler-helpers.h",
    ],
    deps = [
        ":common",
        ":jit_test_mode",
        ":memory",
        ":microparams",
        ":microparams_init",
    ],
)

xnnpack_unit_test(
    name = "wasm_assembler_test",
    srcs = [
        "test/wasm-assembler.cc",
    ],
    deps = [
        ":common",
        ":jit_test_mode",
        ":memory",
    ],
)

xnnpack_unit_test(
    name = "code_cache_test",
    srcs = ["test/code-cache.cc"],
    deps = [
        ":XNNPACK",
        ":cache",
    ],
)

xnnpack_unit_test(
    name = "weights_cache_test",
    srcs = ["test/weights-cache.cc"],
    deps = [
        ":XNNPACK",
        ":cache",
        ":common",
    ],
)

xnnpack_unit_test(
    name = "mutex_test",
    srcs = ["test/mutex.cc"],
    deps = [
        ":common",
        ":mutex_test_mode",
        ":xnnpack_h",
    ],
)

xnnpack_unit_test(
    name = "microkernel_utils_test",
    srcs = ["test/microkernel-utils.cc"],
    deps = [
        ":common",
        ":microkernel_utils",
        ":params",
    ],
)

xnnpack_unit_test(
    name = "operator_utils_test",
    srcs = ["test/operator-utils.cc"],
    deps = [
        ":common",
        ":operator_utils",
        ":operators_test_mode",
        ":params",
    ],
)

xnnpack_unit_test(
    name = "packing_test",
    srcs = [
        "test/packing.cc",
    ],
    deps = MICROKERNEL_TEST_DEPS + [
        ":microkernel_utils",
        ":operator_utils",
        ":packing_test_mode",
    ],
)

xnnpack_unit_test(
    name = "indirection_test",
    srcs = [
        "test/indirection.cc",
    ],
    deps = [
        ":allocator",
        ":indirection_test_mode",
        ":operator_utils",
        ":operators_test_mode",
        ":xnnpack_h",
    ],
)

############################# Build configurations #############################

# Enables usage of ARM FP16 (FP16 arithmetics) scalar kernels.
config_setting(
    name = "xnn_enable_arm_fp16_scalar_explicit_true",
    define_values = {"xnn_enable_arm_fp16_scalar": "true"},
)

# Disables usage of ARM FP16 (FP16 arithmetics) scalar kernels.
config_setting(
    name = "xnn_enable_arm_fp16_scalar_explicit_false",
    define_values = {"xnn_enable_arm_fp16_scalar": "false"},
)

# Enables usage of ARM FP16 (FP16 arithmetics) vector kernels.
config_setting(
    name = "xnn_enable_arm_fp16_vector_explicit_true",
    define_values = {"xnn_enable_arm_fp16_vector": "true"},
)

# Disables usage of ARM FP16 (FP16 arithmetics) vector kernels.
config_setting(
    name = "xnn_enable_arm_fp16_vector_explicit_false",
    define_values = {"xnn_enable_arm_fp16_vector": "false"},
)

# Enables usage of ARM BF16 (BF16 arithmetics) kernels.
config_setting(
    name = "xnn_enable_arm_bf16_explicit_true",
    define_values = {"xnn_enable_arm_bf16": "true"},
)

# Disables usage of ARM BF16 (BF16 arithmetics) kernels.
config_setting(
    name = "xnn_enable_arm_bf16_explicit_false",
    define_values = {"xnn_enable_arm_bf16": "false"},
)

# Enables usage of ARM DotProd (integer dot product) kernels.
config_setting(
    name = "xnn_enable_arm_dotprod_explicit_true",
    define_values = {"xnn_enable_arm_dotprod": "true"},
)

# Disables usage of ARM DotProd (integer dot product) kernels.
config_setting(
    name = "xnn_enable_arm_dotprod_explicit_false",
    define_values = {"xnn_enable_arm_dotprod": "false"},
)

# Enables usage of ARM I8MM (8-bit integer matrix multiply accumulate) kernels.
config_setting(
    name = "xnn_enable_arm_i8mm_explicit_true",
    define_values = {"xnn_enable_arm_i8mm": "true"},
)

# Disables usage of ARM I8MM (8-bit integer matrix multiply accumulate) kernels.
config_setting(
    name = "xnn_enable_arm_i8mm_explicit_false",
    define_values = {"xnn_enable_arm_i8mm": "false"},
)

# Enables usage of RISC-V Vector kernels.
config_setting(
    name = "xnn_enable_riscv_vector_explicit_true",
    define_values = {"xnn_enable_riscv_vector": "true"},
)

# Disables usage of RISC-V Vector kernels.
config_setting(
    name = "xnn_enable_riscv_vector_explicit_false",
    define_values = {"xnn_enable_riscv_vector": "false"},
)

# Enables usage of cpuinfo library.
config_setting(
    name = "xnn_enable_cpuinfo_explicit_true",
    define_values = {"xnn_enable_cpuinfo": "true"},
)

# Disables usage of cpuinfo library.
config_setting(
    name = "xnn_enable_cpuinfo_explicit_false",
    define_values = {"xnn_enable_cpuinfo": "false"},
)

# Enables usage of assembly kernels.
config_setting(
    name = "xnn_enable_assembly_explicit_true",
    define_values = {"xnn_enable_assembly": "true"},
)

# Disables usage of assembly kernels.
config_setting(
    name = "xnn_enable_assembly_explicit_false",
    define_values = {"xnn_enable_assembly": "false"},
)

# Enables usage of sparse inference.
config_setting(
    name = "xnn_enable_sparse_explicit_true",
    define_values = {"xnn_enable_sparse": "true"},
)

# Disables usage of sparse inference.
config_setting(
    name = "xnn_enable_sparse_explicit_false",
    define_values = {"xnn_enable_sparse": "false"},
)

# Disables usage of HMP-aware optimizations.
config_setting(
    name = "xnn_enable_hmp_explicit_false",
    define_values = {"xnn_enable_hmp": "false"},
)

# Enable usage of optimized memory allocation
config_setting(
    name = "xnn_enable_memopt_explicit_true",
    define_values = {"xnn_enable_memopt": "true"},
)

# Disable usage of optimized memory allocation
config_setting(
    name = "xnn_enable_memopt_explicit_false",
    define_values = {"xnn_enable_memopt": "false"},
)

# Enables usage of JIT kernels.
config_setting(
    name = "xnn_enable_jit_explicit_true",
    define_values = {"xnn_enable_jit": "true"},
)

selects.config_setting_group(
    name = "xnn_enable_jit_explicit_true_on_emscripten",
    match_all = [
        ":xnn_enable_jit_explicit_true",
        ":emscripten",
    ],
)

# Disables usage of JIT kernels.
config_setting(
    name = "xnn_enable_jit_explicit_false",
    define_values = {"xnn_enable_jit": "false"},
)

# Enables usage of mr heuristic to select microkernels.
config_setting(
    name = "xnn_enable_gemm_m_specialization_explicit_true",
    define_values = {"xnn_enable_gemm_m_specialization": "true"},
)

# Disables usage of mr heuristic to select microkernels.
config_setting(
    name = "xnn_enable_gemm_m_specialization_explicit_false",
    define_values = {"xnn_enable_gemm_m_specialization": "false"},
)

# Enables usage of DWCONV multipass kernels.
config_setting(
    name = "xnn_enable_dwconv_multipass_explicit_true",
    define_values = {"xnn_enable_dwconv_multipass": "true"},
)

# Disables usage of DWCONV multipass kernels.
config_setting(
    name = "xnn_enable_dwconv_multipass_explicit_false",
    define_values = {"xnn_enable_dwconv_multipass": "false"},
)

# Force logging to stderr/stdout
config_setting(
    name = "xnn_log_to_stdio_explicit_true",
    define_values = {"xnn_log_to_stdio": "true"},
)

# Fully disable logging
config_setting(
    name = "xnn_log_level_explicit_none",
    define_values = {"xnn_log_level": "none"},
)

# Log fatal errors only
config_setting(
    name = "xnn_log_level_explicit_fatal",
    define_values = {"xnn_log_level": "fatal"},
)

# Log fatal and non-fatal errors
config_setting(
    name = "xnn_log_level_explicit_error",
    define_values = {"xnn_log_level": "error"},
)

# Log warnings and errors
config_setting(
    name = "xnn_log_level_explicit_warning",
    define_values = {"xnn_log_level": "warning"},
)

# Log information messages, warnings and errors
config_setting(
    name = "xnn_log_level_explicit_info",
    define_values = {"xnn_log_level": "info"},
)

# Log all messages, including debug messages
config_setting(
    name = "xnn_log_level_explicit_debug",
    define_values = {"xnn_log_level": "debug"},
)

config_setting(
    name = "xnn_platform_jit_explicit_true",
    define_values = {"xnn_platform_jit": "true"},
)

config_setting(
    name = "xnn_platform_jit_explicit_false",
    define_values = {"xnn_platform_jit": "false"},
)

# Builds with -c dbg
config_setting(
    name = "debug_build",
    values = {
        "compilation_mode": "dbg",
    },
)

# Builds with -c opt
config_setting(
    name = "optimized_build",
    values = {
        "compilation_mode": "opt",
    },
)

config_setting(
    name = "linux_arm64",
    values = {"cpu": "aarch64"},
)

config_setting(
    name = "linux_k8",
    values = {"cpu": "k8"},
)

config_setting(
    name = "linux_arm",
    values = {"cpu": "arm"},
)

config_setting(
    name = "linux_armeabi",
    values = {"cpu": "armeabi"},
)

config_setting(
    name = "linux_armhf",
    values = {"cpu": "armhf"},
)

config_setting(
    name = "linux_armv7a",
    values = {"cpu": "armv7a"},
)

config_setting(
    name = "linux_riscv64",
    values = {"cpu": "riscv64"},
)

config_setting(
    name = "android",
    values = {"crosstool_top": "//external:android/crosstool"},
)

config_setting(
    name = "android_armv7",
    values = {
        "crosstool_top": "//external:android/crosstool",
        "cpu": "armeabi-v7a",
    },
)

config_setting(
    name = "android_arm64",
    values = {
        "crosstool_top": "//external:android/crosstool",
        "cpu": "arm64-v8a",
    },
)

config_setting(
    name = "android_x86",
    values = {
        "crosstool_top": "//external:android/crosstool",
        "cpu": "x86",
    },
)

config_setting(
    name = "android_x86_64",
    values = {
        "crosstool_top": "//external:android/crosstool",
        "cpu": "x86_64",
    },
)

config_setting(
    name = "windows_x86_64",
    values = {"cpu": "x64_windows"},
)

config_setting(
    name = "windows_x86_64_clang",
    values = {
        "compiler": "clang-cl",
        "cpu": "x64_windows",
    },
)

config_setting(
    name = "windows_x86_64_mingw",
    values = {
        "compiler": "mingw-gcc",
        "cpu": "x64_windows",
    },
)

config_setting(
    name = "windows_x86_64_msys",
    values = {
        "compiler": "msys-gcc",
        "cpu": "x64_windows",
    },
)

config_setting(
    name = "macos_x86_64",
    values = {
        "apple_platform_type": "macos",
        "cpu": "darwin_x86_64",
    },
)

config_setting(
    name = "macos_x86_64_legacy",
    values = {
        "apple_platform_type": "macos",
        "cpu": "darwin",
    },
)

config_setting(
    name = "macos_arm64",
    values = {
        "apple_platform_type": "macos",
        "cpu": "darwin_arm64",
    },
)

config_setting(
    name = "emscripten",
    values = {"crosstool_top": "@emsdk//emscripten_toolchain:everything"},
)

config_setting(
    name = "emscripten_wasm",
    values = {
        "crosstool_top": "@emsdk//emscripten_toolchain:everything",
        "cpu": "wasm",
    },
)

config_setting(
    name = "emscripten_wasmsimd",
    values = {
        "crosstool_top": "@emsdk//emscripten_toolchain:everything",
        "cpu": "wasm",
        "features": "wasm_simd",
    },
)

config_setting(
    name = "emscripten_wasmrelaxedsimd",
    values = {
        "crosstool_top": "@emsdk//emscripten_toolchain:everything",
        "cpu": "wasm",
        "features": "wasm_relaxed_simd",
    },
)

config_setting(
    name = "ios_arm64",
    values = {
        "apple_platform_type": "ios",
        "cpu": "ios_arm64",
    },
)

config_setting(
    name = "ios_arm64e",
    values = {
        "apple_platform_type": "ios",
        "cpu": "ios_arm64e",
    },
)

config_setting(
    name = "ios_sim_arm64",
    values = {
        "apple_platform_type": "ios",
        "cpu": "ios_sim_arm64",
    },
)

config_setting(
    name = "ios_x86_64",
    values = {
        "apple_platform_type": "ios",
        "cpu": "ios_x86_64",
    },
)

config_setting(
    name = "watchos_arm64_32",
    values = {
        "apple_platform_type": "watchos",
        "cpu": "watchos_arm64_32",
    },
)

config_setting(
    name = "watchos_x86_64",
    values = {
        "apple_platform_type": "watchos",
        "cpu": "watchos_x86_64",
    },
)

config_setting(
    name = "tvos_arm64",
    values = {
        "apple_platform_type": "tvos",
        "cpu": "tvos_arm64",
    },
)

config_setting(
    name = "tvos_x86_64",
    values = {
        "apple_platform_type": "tvos",
        "cpu": "tvos_x86_64",
    },
)

######################## Composite build configurations #######################

selects.config_setting_group(
    name = "aarch32",
    match_any = [
        ":android_armv7",
        ":linux_arm",
        ":linux_armeabi",
        ":linux_armhf",
        ":linux_armv7a",
    ],
)

selects.config_setting_group(
    name = "aarch64",
    match_any = [
        ":android_arm64",
        ":ios_arm64",
        ":ios_arm64e",
        ":ios_sim_arm64",
        ":linux_arm64",
        ":macos_arm64",
        ":tvos_arm64",
        ":watchos_arm64_32",
    ],
)

selects.config_setting_group(
    name = "x86",
    match_any = [
        ":android_x86",
        ":android_x86_64",
        ":ios_x86_64",
        ":linux_k8",
        ":macos_x86_64",
        ":macos_x86_64_legacy",
        ":tvos_x86_64",
        ":watchos_x86_64",
        ":windows_x86_64",
        ":windows_x86_64_clang",
        ":windows_x86_64_mingw",
        ":windows_x86_64_msys",
    ],
)

selects.config_setting_group(
    name = "riscv",
    match_any = [":linux_riscv64"],
)

selects.config_setting_group(
    name = "arm_fp16_scalar_enabled_by_default",
    match_any = [
        ":aarch32",
        ":aarch64",
    ],
)

alias(
    name = "arm_fp16_scalar_enabled",
    actual = select({
        ":xnn_enable_arm_fp16_scalar_explicit_true": ":xnn_enable_arm_fp16_scalar_explicit_true",
        ":xnn_enable_arm_fp16_scalar_explicit_false": ":xnn_enable_arm_fp16_scalar_explicit_true",
        "//conditions:default": ":arm_fp16_scalar_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "arm_fp16_vector_enabled_by_default",
    match_any = [
        ":aarch32",
        ":aarch64",
    ],
)

alias(
    name = "arm_fp16_vector_enabled",
    actual = select({
        ":xnn_enable_arm_fp16_vector_explicit_true": ":xnn_enable_arm_fp16_vector_explicit_true",
        ":xnn_enable_arm_fp16_vector_explicit_false": ":xnn_enable_arm_fp16_vector_explicit_true",
        "//conditions:default": ":arm_fp16_vector_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "arm_bf16_enabled_by_default",
    match_any = [
        ":aarch64",
    ],
)

alias(
    name = "arm_bf16_enabled",
    actual = select({
        ":xnn_enable_arm_bf16_explicit_true": ":xnn_enable_arm_bf16_explicit_true",
        ":xnn_enable_arm_bf16_explicit_false": ":xnn_enable_arm_bf16_explicit_true",
        "//conditions:default": ":arm_bf16_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "arm_dotprod_enabled_by_default",
    match_any = [
        ":aarch32",
        ":aarch64",
    ],
)

alias(
    name = "arm_dotprod_enabled",
    actual = select({
        ":xnn_enable_arm_dotprod_explicit_true": ":xnn_enable_arm_dotprod_explicit_true",
        ":xnn_enable_arm_dotprod_explicit_false": ":xnn_enable_arm_dotprod_explicit_true",
        "//conditions:default": ":arm_dotprod_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "arm_i8mm_enabled_by_default",
    match_any = [
        ":aarch32",
        ":aarch64",
    ],
)

alias(
    name = "arm_i8mm_enabled",
    actual = select({
        ":xnn_enable_arm_i8mm_explicit_true": ":xnn_enable_arm_i8mm_explicit_true",
        ":xnn_enable_arm_i8mm_explicit_false": ":xnn_enable_arm_i8mm_explicit_true",
        "//conditions:default": ":arm_i8mm_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "riscv_vector_enabled_by_default",
    match_any = [
        ":riscv",
    ],
)

alias(
    name = "riscv_vector_enabled",
    actual = select({
        ":xnn_enable_riscv_vector_explicit_true": ":xnn_enable_riscv_vector_explicit_true",
        ":xnn_enable_riscv_vector_explicit_false": ":xnn_enable_riscv_vector_explicit_true",
        "//conditions:default": ":riscv_vector_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "cpuinfo_enabled_by_default",
    match_any = [
        ":aarch32",
        ":aarch64",
        ":x86",
    ],
)

alias(
    name = "cpuinfo_enabled",
    actual = select({
        ":xnn_enable_cpuinfo_explicit_true": ":xnn_enable_cpuinfo_explicit_true",
        ":xnn_enable_cpuinfo_explicit_false": ":xnn_enable_cpuinfo_explicit_true",
        "//conditions:default": ":cpuinfo_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "assembly_enabled_by_default",
    match_any = [
        "//conditions:default",
    ],
)

alias(
    name = "assembly_enabled",
    actual = select({
        ":xnn_enable_assembly_explicit_true": ":xnn_enable_assembly_explicit_true",
        ":xnn_enable_assembly_explicit_false": ":xnn_enable_assembly_explicit_true",
        "//conditions:default": ":assembly_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "sparse_enabled_by_default",
    match_any = [
        "//conditions:default",
    ],
)

alias(
    name = "sparse_enabled",
    actual = select({
        ":xnn_enable_sparse_explicit_true": ":xnn_enable_sparse_explicit_true",
        ":xnn_enable_sparse_explicit_false": ":xnn_enable_sparse_explicit_true",
        "//conditions:default": ":sparse_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "memopt_enabled_by_default",
    match_any = [
        "//conditions:default",
    ],
)

alias(
    name = "memopt_enabled",
    actual = select({
        ":xnn_enable_memopt_explicit_true": ":xnn_enable_memopt_explicit_true",
        ":xnn_enable_memopt_explicit_false": ":xnn_enable_memopt_explicit_true",
        "//conditions:default": ":memopt_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "jit_enabled_by_default",
    match_any = [
        # Disabled by default, only enabled explicitly
        ":xnn_enable_jit_explicit_true",
    ],
)

alias(
    name = "jit_enabled",
    actual = select({
        ":xnn_enable_jit_explicit_true": ":xnn_enable_jit_explicit_true",
        ":xnn_enable_jit_explicit_false": ":xnn_enable_jit_explicit_true",
        "//conditions:default": ":jit_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "gemm_m_specialization_enabled_by_default",
    match_any = [
        "//conditions:default",
    ],
)

alias(
    name = "gemm_m_specialization_enabled",
    actual = select({
        ":xnn_enable_gemm_m_specialization_explicit_true": ":xnn_enable_gemm_m_specialization_explicit_true",
        ":xnn_enable_gemm_m_specialization_explicit_false": ":xnn_enable_gemm_m_specialization_explicit_true",
        "//conditions:default": ":gemm_m_specialization_enabled_by_default",
    }),
)

selects.config_setting_group(
    name = "dwconv_multipass_enabled_by_default",
    match_any = [
        # Disabled by default, only enabled explicitly
        ":xnn_enable_dwconv_multipass_explicit_true",
    ],
)

alias(
    name = "dwconv_multipass_enabled",
    actual = select({
        ":xnn_enable_dwconv_multipass_explicit_true": ":xnn_enable_dwconv_multipass_explicit_true",
        ":xnn_enable_dwconv_multipass_explicit_false": ":xnn_enable_dwconv_multipass_explicit_true",
        "//conditions:default": ":dwconv_multipass_enabled_by_default",
    }),
)

bzl_library(
    name = "build_defs_bzl",
    srcs = ["build_defs.bzl"],
    visibility = ["//visibility:private"],
)
